// Package oasana provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package oasana

import (
	"encoding/json"
	"fmt"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/pkg/errors"
)

const (
	Oauth2Scopes              = "oauth2.Scopes"
	PersonalAccessTokenScopes = "personalAccessToken.Scopes"
)

// Defines values for AttachmentRequestResourceSubtype.
const (
	AttachmentRequestResourceSubtypeAsanaFileAttachments AttachmentRequestResourceSubtype = "asana_file_attachments"

	AttachmentRequestResourceSubtypeExternal AttachmentRequestResourceSubtype = "external"
)

// Defines values for BatchRequestActionMethod.
const (
	BatchRequestActionMethodDelete BatchRequestActionMethod = "delete"

	BatchRequestActionMethodGet BatchRequestActionMethod = "get"

	BatchRequestActionMethodHead BatchRequestActionMethod = "head"

	BatchRequestActionMethodPatch BatchRequestActionMethod = "patch"

	BatchRequestActionMethodPost BatchRequestActionMethod = "post"

	BatchRequestActionMethodPut BatchRequestActionMethod = "put"
)

// Defines values for CustomFieldBaseCustomLabelPosition.
const (
	CustomFieldBaseCustomLabelPositionPrefix CustomFieldBaseCustomLabelPosition = "prefix"

	CustomFieldBaseCustomLabelPositionSuffix CustomFieldBaseCustomLabelPosition = "suffix"
)

// Defines values for CustomFieldBaseFormat.
const (
	CustomFieldBaseFormatCurrency CustomFieldBaseFormat = "currency"

	CustomFieldBaseFormatCustom CustomFieldBaseFormat = "custom"

	CustomFieldBaseFormatIdentifier CustomFieldBaseFormat = "identifier"

	CustomFieldBaseFormatNone CustomFieldBaseFormat = "none"

	CustomFieldBaseFormatPercentage CustomFieldBaseFormat = "percentage"
)

// Defines values for CustomFieldCompactResourceSubtype.
const (
	CustomFieldCompactResourceSubtypeEnum CustomFieldCompactResourceSubtype = "enum"

	CustomFieldCompactResourceSubtypeMultiEnum CustomFieldCompactResourceSubtype = "multi_enum"

	CustomFieldCompactResourceSubtypeNumber CustomFieldCompactResourceSubtype = "number"

	CustomFieldCompactResourceSubtypeText CustomFieldCompactResourceSubtype = "text"
)

// Defines values for CustomFieldCompactType.
const (
	CustomFieldCompactTypeEnum CustomFieldCompactType = "enum"

	CustomFieldCompactTypeMultiEnum CustomFieldCompactType = "multi_enum"

	CustomFieldCompactTypeNumber CustomFieldCompactType = "number"

	CustomFieldCompactTypeText CustomFieldCompactType = "text"
)

// Defines values for GoalMetricBaseResourceSubtype.
const (
	GoalMetricBaseResourceSubtypeNumber GoalMetricBaseResourceSubtype = "number"
)

// Defines values for GoalMetricBaseUnit.
const (
	GoalMetricBaseUnitCurrency GoalMetricBaseUnit = "currency"

	GoalMetricBaseUnitNone GoalMetricBaseUnit = "none"

	GoalMetricBaseUnitPercentage GoalMetricBaseUnit = "percentage"
)

// Defines values for JobCompactStatus.
const (
	JobCompactStatusCompleted JobCompactStatus = "completed"

	JobCompactStatusFailed JobCompactStatus = "failed"

	JobCompactStatusInProgress JobCompactStatus = "in_progress"

	JobCompactStatusNotStarted JobCompactStatus = "not_started"
)

// Defines values for OrganizationExportCompactState.
const (
	OrganizationExportCompactStateError OrganizationExportCompactState = "error"

	OrganizationExportCompactStateFinished OrganizationExportCompactState = "finished"

	OrganizationExportCompactStatePending OrganizationExportCompactState = "pending"

	OrganizationExportCompactStateStarted OrganizationExportCompactState = "started"
)

// Defines values for PortfolioBaseColor.
const (
	PortfolioBaseColorDarkBlue PortfolioBaseColor = "dark-blue"

	PortfolioBaseColorDarkBrown PortfolioBaseColor = "dark-brown"

	PortfolioBaseColorDarkGreen PortfolioBaseColor = "dark-green"

	PortfolioBaseColorDarkOrange PortfolioBaseColor = "dark-orange"

	PortfolioBaseColorDarkPink PortfolioBaseColor = "dark-pink"

	PortfolioBaseColorDarkPurple PortfolioBaseColor = "dark-purple"

	PortfolioBaseColorDarkRed PortfolioBaseColor = "dark-red"

	PortfolioBaseColorDarkTeal PortfolioBaseColor = "dark-teal"

	PortfolioBaseColorDarkWarmGray PortfolioBaseColor = "dark-warm-gray"

	PortfolioBaseColorLightBlue PortfolioBaseColor = "light-blue"

	PortfolioBaseColorLightBrown PortfolioBaseColor = "light-brown"

	PortfolioBaseColorLightGreen PortfolioBaseColor = "light-green"

	PortfolioBaseColorLightOrange PortfolioBaseColor = "light-orange"

	PortfolioBaseColorLightPink PortfolioBaseColor = "light-pink"

	PortfolioBaseColorLightPurple PortfolioBaseColor = "light-purple"

	PortfolioBaseColorLightRed PortfolioBaseColor = "light-red"

	PortfolioBaseColorLightTeal PortfolioBaseColor = "light-teal"

	PortfolioBaseColorLightWarmGray PortfolioBaseColor = "light-warm-gray"
)

// Defines values for ProjectBaseColor.
const (
	ProjectBaseColorDarkBlue ProjectBaseColor = "dark-blue"

	ProjectBaseColorDarkBrown ProjectBaseColor = "dark-brown"

	ProjectBaseColorDarkGreen ProjectBaseColor = "dark-green"

	ProjectBaseColorDarkOrange ProjectBaseColor = "dark-orange"

	ProjectBaseColorDarkPink ProjectBaseColor = "dark-pink"

	ProjectBaseColorDarkPurple ProjectBaseColor = "dark-purple"

	ProjectBaseColorDarkRed ProjectBaseColor = "dark-red"

	ProjectBaseColorDarkTeal ProjectBaseColor = "dark-teal"

	ProjectBaseColorDarkWarmGray ProjectBaseColor = "dark-warm-gray"

	ProjectBaseColorLightBlue ProjectBaseColor = "light-blue"

	ProjectBaseColorLightBrown ProjectBaseColor = "light-brown"

	ProjectBaseColorLightGreen ProjectBaseColor = "light-green"

	ProjectBaseColorLightOrange ProjectBaseColor = "light-orange"

	ProjectBaseColorLightPink ProjectBaseColor = "light-pink"

	ProjectBaseColorLightPurple ProjectBaseColor = "light-purple"

	ProjectBaseColorLightRed ProjectBaseColor = "light-red"

	ProjectBaseColorLightTeal ProjectBaseColor = "light-teal"

	ProjectBaseColorLightWarmGray ProjectBaseColor = "light-warm-gray"
)

// Defines values for ProjectBaseDefaultView.
const (
	ProjectBaseDefaultViewBoard ProjectBaseDefaultView = "board"

	ProjectBaseDefaultViewCalendar ProjectBaseDefaultView = "calendar"

	ProjectBaseDefaultViewList ProjectBaseDefaultView = "list"

	ProjectBaseDefaultViewTimeline ProjectBaseDefaultView = "timeline"
)

// Defines values for ProjectDuplicateRequestInclude.
const (
	ProjectDuplicateRequestIncludeForms ProjectDuplicateRequestInclude = "forms"

	ProjectDuplicateRequestIncludeMembers ProjectDuplicateRequestInclude = "members"

	ProjectDuplicateRequestIncludeNotes ProjectDuplicateRequestInclude = "notes"

	ProjectDuplicateRequestIncludeTaskAssignee ProjectDuplicateRequestInclude = "task_assignee"

	ProjectDuplicateRequestIncludeTaskAttachments ProjectDuplicateRequestInclude = "task_attachments"

	ProjectDuplicateRequestIncludeTaskDates ProjectDuplicateRequestInclude = "task_dates"

	ProjectDuplicateRequestIncludeTaskDependencies ProjectDuplicateRequestInclude = "task_dependencies"

	ProjectDuplicateRequestIncludeTaskFollowers ProjectDuplicateRequestInclude = "task_followers"

	ProjectDuplicateRequestIncludeTaskNotes ProjectDuplicateRequestInclude = "task_notes"

	ProjectDuplicateRequestIncludeTaskProjects ProjectDuplicateRequestInclude = "task_projects"

	ProjectDuplicateRequestIncludeTaskSubtasks ProjectDuplicateRequestInclude = "task_subtasks"

	ProjectDuplicateRequestIncludeTaskTags ProjectDuplicateRequestInclude = "task_tags"
)

// Defines values for ProjectMembershipResponseWriteAccess.
const (
	ProjectMembershipResponseWriteAccessCommentOnly ProjectMembershipResponseWriteAccess = "comment_only"

	ProjectMembershipResponseWriteAccessFullWrite ProjectMembershipResponseWriteAccess = "full_write"
)

// Defines values for ProjectResponseIcon.
const (
	ProjectResponseIconBoard ProjectResponseIcon = "board"

	ProjectResponseIconBriefcase ProjectResponseIcon = "briefcase"

	ProjectResponseIconBug ProjectResponseIcon = "bug"

	ProjectResponseIconCalendar ProjectResponseIcon = "calendar"

	ProjectResponseIconChatBubbles ProjectResponseIcon = "chat_bubbles"

	ProjectResponseIconCheck ProjectResponseIcon = "check"

	ProjectResponseIconCoins ProjectResponseIcon = "coins"

	ProjectResponseIconComputer ProjectResponseIcon = "computer"

	ProjectResponseIconGear ProjectResponseIcon = "gear"

	ProjectResponseIconGlobe ProjectResponseIcon = "globe"

	ProjectResponseIconGraph ProjectResponseIcon = "graph"

	ProjectResponseIconHtml ProjectResponseIcon = "html"

	ProjectResponseIconLightBulb ProjectResponseIcon = "light_bulb"

	ProjectResponseIconLineAndSymbols ProjectResponseIcon = "line_and_symbols"

	ProjectResponseIconList ProjectResponseIcon = "list"

	ProjectResponseIconMap ProjectResponseIcon = "map"

	ProjectResponseIconMegaphone ProjectResponseIcon = "megaphone"

	ProjectResponseIconMountainFlag ProjectResponseIcon = "mountain_flag"

	ProjectResponseIconNotebook ProjectResponseIcon = "notebook"

	ProjectResponseIconPageLayout ProjectResponseIcon = "page_layout"

	ProjectResponseIconPeople ProjectResponseIcon = "people"

	ProjectResponseIconPresentation ProjectResponseIcon = "presentation"

	ProjectResponseIconPuzzle ProjectResponseIcon = "puzzle"

	ProjectResponseIconRibbon ProjectResponseIcon = "ribbon"

	ProjectResponseIconRocket ProjectResponseIcon = "rocket"

	ProjectResponseIconShoe ProjectResponseIcon = "shoe"

	ProjectResponseIconShoppingBasket ProjectResponseIcon = "shopping_basket"

	ProjectResponseIconSpeedDial ProjectResponseIcon = "speed_dial"

	ProjectResponseIconStar ProjectResponseIcon = "star"

	ProjectResponseIconTarget ProjectResponseIcon = "target"

	ProjectResponseIconTicket ProjectResponseIcon = "ticket"

	ProjectResponseIconTimeline ProjectResponseIcon = "timeline"
)

// Defines values for ProjectStatusBaseColor.
const (
	ProjectStatusBaseColorBlue ProjectStatusBaseColor = "blue"

	ProjectStatusBaseColorGreen ProjectStatusBaseColor = "green"

	ProjectStatusBaseColorRed ProjectStatusBaseColor = "red"

	ProjectStatusBaseColorYellow ProjectStatusBaseColor = "yellow"
)

// Defines values for StoryBaseStickerName.
const (
	StoryBaseStickerNameCelebratingPeople StoryBaseStickerName = "celebrating_people"

	StoryBaseStickerNameDancingUnicorn StoryBaseStickerName = "dancing_unicorn"

	StoryBaseStickerNameDeterminedClimbers StoryBaseStickerName = "determined_climbers"

	StoryBaseStickerNameGreenCheckmark StoryBaseStickerName = "green_checkmark"

	StoryBaseStickerNameHeart StoryBaseStickerName = "heart"

	StoryBaseStickerNamePartyPopper StoryBaseStickerName = "party_popper"

	StoryBaseStickerNamePeopleDancing StoryBaseStickerName = "people_dancing"

	StoryBaseStickerNamePeopleWavingFlags StoryBaseStickerName = "people_waving_flags"

	StoryBaseStickerNamePhoenixSpreadingLove StoryBaseStickerName = "phoenix_spreading_love"

	StoryBaseStickerNameSplashingNarwhal StoryBaseStickerName = "splashing_narwhal"

	StoryBaseStickerNameTrophy StoryBaseStickerName = "trophy"

	StoryBaseStickerNameYetiRidingUnicorn StoryBaseStickerName = "yeti_riding_unicorn"
)

// Defines values for StoryResponseSource.
const (
	StoryResponseSourceApi StoryResponseSource = "api"

	StoryResponseSourceEmail StoryResponseSource = "email"

	StoryResponseSourceMobile StoryResponseSource = "mobile"

	StoryResponseSourceUnknown StoryResponseSource = "unknown"

	StoryResponseSourceWeb StoryResponseSource = "web"
)

// Defines values for TagBaseColor.
const (
	TagBaseColorDarkBlue TagBaseColor = "dark-blue"

	TagBaseColorDarkBrown TagBaseColor = "dark-brown"

	TagBaseColorDarkGreen TagBaseColor = "dark-green"

	TagBaseColorDarkOrange TagBaseColor = "dark-orange"

	TagBaseColorDarkPink TagBaseColor = "dark-pink"

	TagBaseColorDarkPurple TagBaseColor = "dark-purple"

	TagBaseColorDarkRed TagBaseColor = "dark-red"

	TagBaseColorDarkTeal TagBaseColor = "dark-teal"

	TagBaseColorDarkWarmGray TagBaseColor = "dark-warm-gray"

	TagBaseColorLightBlue TagBaseColor = "light-blue"

	TagBaseColorLightBrown TagBaseColor = "light-brown"

	TagBaseColorLightGreen TagBaseColor = "light-green"

	TagBaseColorLightOrange TagBaseColor = "light-orange"

	TagBaseColorLightPink TagBaseColor = "light-pink"

	TagBaseColorLightPurple TagBaseColor = "light-purple"

	TagBaseColorLightRed TagBaseColor = "light-red"

	TagBaseColorLightTeal TagBaseColor = "light-teal"

	TagBaseColorLightWarmGray TagBaseColor = "light-warm-gray"
)

// Defines values for TaskBaseApprovalStatus.
const (
	TaskBaseApprovalStatusApproved TaskBaseApprovalStatus = "approved"

	TaskBaseApprovalStatusChangesRequested TaskBaseApprovalStatus = "changes_requested"

	TaskBaseApprovalStatusPending TaskBaseApprovalStatus = "pending"

	TaskBaseApprovalStatusRejected TaskBaseApprovalStatus = "rejected"
)

// Defines values for TaskBaseAssigneeStatus.
const (
	TaskBaseAssigneeStatusInbox TaskBaseAssigneeStatus = "inbox"

	TaskBaseAssigneeStatusLater TaskBaseAssigneeStatus = "later"

	TaskBaseAssigneeStatusNew TaskBaseAssigneeStatus = "new"

	TaskBaseAssigneeStatusToday TaskBaseAssigneeStatus = "today"

	TaskBaseAssigneeStatusUpcoming TaskBaseAssigneeStatus = "upcoming"
)

// Defines values for TaskBaseResourceSubtype.
const (
	TaskBaseResourceSubtypeApproval TaskBaseResourceSubtype = "approval"

	TaskBaseResourceSubtypeDefaultTask TaskBaseResourceSubtype = "default_task"

	TaskBaseResourceSubtypeMilestone TaskBaseResourceSubtype = "milestone"

	TaskBaseResourceSubtypeSection TaskBaseResourceSubtype = "section"
)

// Defines values for TaskDuplicateRequestInclude.
const (
	TaskDuplicateRequestIncludeAssignee TaskDuplicateRequestInclude = "assignee"

	TaskDuplicateRequestIncludeAttachments TaskDuplicateRequestInclude = "attachments"

	TaskDuplicateRequestIncludeDates TaskDuplicateRequestInclude = "dates"

	TaskDuplicateRequestIncludeDependencies TaskDuplicateRequestInclude = "dependencies"

	TaskDuplicateRequestIncludeFollowers TaskDuplicateRequestInclude = "followers"

	TaskDuplicateRequestIncludeNotes TaskDuplicateRequestInclude = "notes"

	TaskDuplicateRequestIncludeParent TaskDuplicateRequestInclude = "parent"

	TaskDuplicateRequestIncludeProjects TaskDuplicateRequestInclude = "projects"

	TaskDuplicateRequestIncludeSubtasks TaskDuplicateRequestInclude = "subtasks"

	TaskDuplicateRequestIncludeTags TaskDuplicateRequestInclude = "tags"
)

// AddCustomFieldSettingRequest defines model for AddCustomFieldSettingRequest.
type AddCustomFieldSettingRequest struct {

	// The custom field to associate with this container.
	CustomField string `json:"custom_field"`

	// A gid of a Custom Field Setting on this container, after which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified.
	InsertAfter *string `json:"insert_after,omitempty"`

	// A gid of a Custom Field Setting on this container, before which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified.
	InsertBefore *string `json:"insert_before,omitempty"`

	// Whether this field should be considered important to this container (for instance, to display in the list view of items in the container).
	IsImportant *bool `json:"is_important,omitempty"`
}

// AddFollowersRequest defines model for AddFollowersRequest.
type AddFollowersRequest struct {

	// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
	Followers string `json:"followers"`
}

// AddMembersRequest defines model for AddMembersRequest.
type AddMembersRequest struct {

	// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
	Members string `json:"members"`
}

// AsanaNamedResource defines model for AsanaNamedResource.
type AsanaNamedResource struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The name of the object.
	Name *string `json:"name,omitempty"`
}

// A generic Asana Resource, containing a globally unique identifier.
type AsanaResource struct {

	// Globally unique identifier of the resource, as a string.
	Gid *string `json:"gid,omitempty"`

	// The base type of this resource.
	ResourceType *string `json:"resource_type,omitempty"`
}

// AttachmentBase defines model for AttachmentBase.
type AttachmentBase AttachmentCompact

// AttachmentCompact defines model for AttachmentCompact.
type AttachmentCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The name of the file.
	Name *string `json:"name,omitempty"`

	// The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive`, `onedrive`, `box`, and `external`.
	// `external` attachments are a beta feature currently limited to specific integrations.
	ResourceSubtype *interface{} `json:"resource_subtype,omitempty"`
}

// AttachmentRequest defines model for AttachmentRequest.
type AttachmentRequest struct {

	// Required for file attachments.
	File *string `json:"file,omitempty"`

	// The name of the external resource being attached. Required for attachments of type 'external'.
	Name *string `json:"name,omitempty"`

	// The type of the attachment. Must be one of the given values. If not specified, a file attachment of type `asana_file_attachments` will be assumed.
	ResourceSubtype *AttachmentRequestResourceSubtype `json:"resource_subtype,omitempty"`

	// The URL of the external resource being attached. Required for attachments of type 'external'.
	Url *string `json:"url,omitempty"`
}

// The type of the attachment. Must be one of the given values. If not specified, a file attachment of type `asana_file_attachments` will be assumed.
type AttachmentRequestResourceSubtype string

// AttachmentResponse defines model for AttachmentResponse.
type AttachmentResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AttachmentBase)
	AttachmentBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The time at which this resource was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// The URL containing the content of the attachment.
	// *Note:* May be null if the attachment is hosted by [Box](https://www.box.com/). If present, this URL may only be valid for two minutes from the time of retrieval. You should avoid persisting this URL somewhere and just refresh it on demand to ensure you do not keep stale URLs.
	DownloadUrl *string `json:"download_url"`

	// The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive` and `box`.
	Host   *string `json:"host,omitempty"`
	Parent *struct {
		// Embedded struct due to allOf(#/components/schemas/TaskCompact)
		TaskCompact `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"parent,omitempty"`

	// The URL where the attachment can be viewed, which may be friendlier to users in a browser than just directing them to a raw file. May be null if no view URL exists for the service.
	ViewUrl *string `json:"view_url"`
}

// A request object for use in a batch request.
type BatchRequest struct {
	Actions *[]BatchRequestAction `json:"actions,omitempty"`
}

// An action object for use in a batch request.
type BatchRequestAction struct {

	// For `GET` requests, this should be a map of query parameters you would have normally passed in the URL. Options and pagination are not accepted here; put them in `options` instead. For `POST`, `PATCH`, and `PUT` methods, this should be the content you would have normally put in the data field of the body.
	Data *map[string]interface{} `json:"data,omitempty"`

	// The HTTP method you wish to emulate for the action.
	Method BatchRequestActionMethod `json:"method"`

	// Pagination (`limit` and `offset`) and output options (`fields` or `expand`) for the action. “Pretty” JSON output is not an available option on individual actions; if you want pretty output, specify that option on the parent request.
	Options *struct {

		// The fields to retrieve in the request.
		Fields *[]string `json:"fields,omitempty"`

		// Pagination limit for the request.
		Limit *int `json:"limit,omitempty"`

		// Pagination offset for the request.
		Offset *int `json:"offset,omitempty"`
	} `json:"options,omitempty"`

	// The path of the desired endpoint relative to the API’s base URL. Query parameters are not accepted here; put them in `data` instead.
	RelativePath string `json:"relative_path"`
}

// The HTTP method you wish to emulate for the action.
type BatchRequestActionMethod string

// A response object returned from a batch request.
type BatchResponse struct {

	// The JSON body that the invoked endpoint returned.
	Body *map[string]interface{} `json:"body,omitempty"`

	// A map of HTTP headers specific to this result. This is primarily used for returning a `Location` header to accompany a `201 Created` result.  The parent HTTP response will contain all common headers.
	Headers *map[string]interface{} `json:"headers,omitempty"`

	// The HTTP status code that the invoked endpoint returned.
	StatusCode *int `json:"status_code,omitempty"`
}

// CustomFieldBase defines model for CustomFieldBase.
type CustomFieldBase struct {
	// Embedded struct due to allOf(#/components/schemas/CustomFieldCompact)
	CustomFieldCompact `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// ISO 4217 currency code to format this custom field. This will be null if the `format` is not `currency`.
	CurrencyCode *string `json:"currency_code"`

	// This is the string that appears next to the custom field value. This will be null if the `format` is not `custom`.
	CustomLabel *string `json:"custom_label"`

	// Only relevant for custom fields with `custom` format. This depicts where to place the custom label. This will be null if the `format` is not `custom`.
	CustomLabelPosition *CustomFieldBaseCustomLabelPosition `json:"custom_label_position,omitempty"`

	// [Opt In](/docs/input-output-options). The description of the custom field.
	Description *string `json:"description,omitempty"`

	// *Conditional*. Only relevant for custom fields of type `enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).
	EnumOptions *[]EnumOption `json:"enum_options,omitempty"`

	// The format of this custom field.
	Format *CustomFieldBaseFormat `json:"format,omitempty"`

	// *Conditional*. This flag describes whether a follower of a task with this field should receive inbox notifications from changes to this field.
	HasNotificationsEnabled *bool `json:"has_notifications_enabled,omitempty"`

	// This flag describes whether this custom field is available to every container in the workspace. Before project-specific custom fields, this field was always true.
	IsGlobalToWorkspace *bool `json:"is_global_to_workspace,omitempty"`

	// Only relevant for custom fields of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive.
	// For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%.
	// The identifier format will always have a precision of 0.
	Precision *int `json:"precision,omitempty"`
}

// Only relevant for custom fields with `custom` format. This depicts where to place the custom label. This will be null if the `format` is not `custom`.
type CustomFieldBaseCustomLabelPosition string

// The format of this custom field.
type CustomFieldBaseFormat string

// CustomFieldCompact defines model for CustomFieldCompact.
type CustomFieldCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// A string representation for the value of the custom field. Integrations that don't require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.
	DisplayValue *string `json:"display_value,omitempty"`

	// *Conditional*. Determines if the custom field is enabled or not.
	Enabled *bool `json:"enabled,omitempty"`

	// *Conditional*. Only relevant for custom fields of type `enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).
	EnumOptions *[]EnumOption `json:"enum_options,omitempty"`

	// The name of the custom field.
	Name *string `json:"name,omitempty"`

	// *Conditional*. This number is the value of a number custom field.
	NumberValue *float32 `json:"number_value,omitempty"`

	// The type of the custom field. Must be one of the given values.
	ResourceSubtype *CustomFieldCompactResourceSubtype `json:"resource_subtype,omitempty"`

	// *Conditional*. This string is the value of a text custom field.
	TextValue *string `json:"text_value,omitempty"`

	// *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values.
	Type *CustomFieldCompactType `json:"type,omitempty"`
}

// The type of the custom field. Must be one of the given values.
type CustomFieldCompactResourceSubtype string

// *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values.
type CustomFieldCompactType string

// CustomFieldRequest defines model for CustomFieldRequest.
type CustomFieldRequest struct {
	// Embedded struct due to allOf(#/components/schemas/CustomFieldBase)
	CustomFieldBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// *Create-Only* The workspace to create a custom field in.
	Workspace string `json:"workspace"`
}

// CustomFieldResponse defines model for CustomFieldResponse.
type CustomFieldResponse struct {
	// Embedded struct due to allOf(#/components/schemas/CustomFieldBase)
	CustomFieldBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	CreatedBy *UserCompact `json:"created_by,omitempty"`
	EnumValue *struct {
		// Embedded struct due to allOf(#/components/schemas/EnumOption)
		EnumOption `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"enum_value,omitempty"`

	// *Conditional*. Only relevant for custom fields of type `multi_enum`. This object is the chosen values of a multi_enum custom field.
	MultiEnumValues *[]EnumOption `json:"multi_enum_values,omitempty"`
}

// CustomFieldSettingBase defines model for CustomFieldSettingBase.
type CustomFieldSettingBase CustomFieldSettingCompact

// CustomFieldSettingCompact defines model for CustomFieldSettingCompact.
type CustomFieldSettingCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema
}

// CustomFieldSettingResponse defines model for CustomFieldSettingResponse.
type CustomFieldSettingResponse struct {
	// Embedded struct due to allOf(#/components/schemas/CustomFieldSettingBase)
	CustomFieldSettingBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	CustomField *struct {
		// Embedded struct due to allOf(#/components/schemas/CustomFieldResponse)
		CustomFieldResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"custom_field,omitempty"`

	// `is_important` is used in the Asana web application to determine if this custom field is displayed in the list/grid view of a project or portfolio.
	IsImportant *bool `json:"is_important,omitempty"`
	Parent      *struct {
		// Embedded struct due to allOf(#/components/schemas/ProjectCompact)
		ProjectCompact `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"parent,omitempty"`
	Project *struct {
		// Embedded struct due to allOf(#/components/schemas/ProjectCompact)
		ProjectCompact `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"project,omitempty"`
}

// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
type EmptyResponse map[string]interface{}

// EnumOption defines model for EnumOption.
type EnumOption struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The color of the enum option. Defaults to ‘none’.
	Color *string `json:"color,omitempty"`

	// Whether or not the enum option is a selectable value for the custom field.
	Enabled *bool `json:"enabled,omitempty"`

	// The name of the enum option.
	Name *string `json:"name,omitempty"`
}

// EnumOptionBase defines model for EnumOptionBase.
type EnumOptionBase EnumOption

// EnumOptionInsertRequest defines model for EnumOptionInsertRequest.
type EnumOptionInsertRequest struct {

	// An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
	AfterEnumOption *string `json:"after_enum_option,omitempty"`

	// An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
	BeforeEnumOption *string `json:"before_enum_option,omitempty"`

	// The gid of the enum option to relocate.
	EnumOption string `json:"enum_option"`
}

// EnumOptionRequest defines model for EnumOptionRequest.
type EnumOptionRequest struct {
	// Embedded struct due to allOf(#/components/schemas/EnumOptionBase)
	EnumOptionBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
	InsertAfter *string `json:"insert_after,omitempty"`

	// An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
	InsertBefore *string `json:"insert_before,omitempty"`
}

// Error defines model for Error.
type Error struct {

	// Additional information directing developers to resources on how to address and fix the problem, if available.
	Help *string `json:"help,omitempty"`

	// Message providing more detail about the error that occurred, if available.
	Message *string `json:"message,omitempty"`

	// *500 errors only*. A unique error phrase which can be used when contacting developer support to help identify the exact occurrence of the problem in Asana’s logs.
	Phrase *string `json:"phrase,omitempty"`
}

// Sadly, sometimes requests to the API are not successful. Failures can
// occur for a wide range of reasons. In all cases, the API should return
// an HTTP Status Code that indicates the nature of the failure,
// with a response body in JSON format containing additional information.
//
//
// In the event of a server error the response body will contain an error
// phrase. These phrases are automatically generated using the
// [node-asana-phrase
// library](https://github.com/Asana/node-asana-phrase) and can be used by
// Asana support to quickly look up the incident that caused the server
// error.
type ErrorResponse struct {
	Errors *[]Error `json:"errors,omitempty"`
}

// An *event* is an object representing a change to a resource that was
// observed by an event subscription or delivered asynchronously to
// the target location of an active webhook.
//
// The event may be triggered by a different `user` than the
// subscriber. For example, if user A subscribes to a task and user B
// modified it, the event’s user will be user B. Note: Some events
// are generated by the system, and will have `null` as the user. API
// consumers should make sure to handle this case.
//
// The `resource` that triggered the event may be different from the one
// that the events were requested for or the webhook is subscribed to. For
// example, a subscription to a project will contain events for tasks
// contained within the project.
//
// **Note:** pay close attention to the relationship between the fields
// `Event.action` and `Event.change.action`.
// `Event.action` represents the action taken on the resource
// itself, and `Event.change.action` represents how the information
// within the resource's fields have been modified.
//
// For instance, consider these scenarios:
//
//
// * When at task is added to a project, `Event.action` will be
// `added`, `Event.parent` will be on object with the `id` and
// `type` of the project, and there will be no `change` field.
//
//
// * When an assignee is set on the task, `Event.parent` will be
// `null`, `Event.action` will be `changed`,
// `Event.change.action` will be `changed`, and `changed_value` will
// be an object with the user's `id` and `type`.
//
//
// * When a collaborator is added to the task, `Event.parent` will
// be `null`, `Event.action` will be `changed`,
// `Event.change.action` will be `added`, and `added_value` will be
// an object with the user's `id` and `type`.
type EventResponse struct {

	// The type of action taken on the **resource** that triggered the event.  This can be one of `changed`, `added`, `removed`, `deleted`, or `undeleted` depending on the nature of the event.
	Action *string `json:"action,omitempty"`

	// Information about the type of change that has occurred. This field is only present when the value of the property `action`, describing the action taken on the **resource**, is `changed`.
	Change *struct {

		// The type of action taken on the **field** which has been changed.  This can be one of `changed`, `added`, or `removed` depending on the nature of the change.
		Action *string `json:"action,omitempty"`

		// *Conditional.* This property is only present when the **field's** `action` is `added` and the `added_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) resource.
		AddedValue *interface{} `json:"added_value,omitempty"`

		// The name of the field that has changed in the resource.
		Field *string `json:"field,omitempty"`

		// *Conditional.* This property is only present when the **field's** `action` is `changed` and the `new_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) resource.
		NewValue *interface{} `json:"new_value,omitempty"`

		// *Conditional.* This property is only present when the **field's** `action` is `removed` and the `removed_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) resource.
		RemovedValue *interface{} `json:"removed_value,omitempty"`
	} `json:"change,omitempty"`

	// The timestamp when the event occurred.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Parent    *struct {
		// Embedded struct due to allOf(#/components/schemas/AsanaNamedResource)
		AsanaNamedResource `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"parent,omitempty"`
	Resource *struct {
		// Embedded struct due to allOf(#/components/schemas/AsanaNamedResource)
		AsanaNamedResource `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"resource,omitempty"`

	// *Deprecated: Refer to the resource_type of the resource.* The type of the resource that generated the event.
	Type *string `json:"type,omitempty"`
	User *struct {
		// Embedded struct due to allOf(#/components/schemas/UserCompact)
		UserCompact `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"user,omitempty"`
}

// GoalAddSubgoalRequest defines model for GoalAddSubgoalRequest.
type GoalAddSubgoalRequest struct {

	// An id of a subgoal of this parent goal. The new subgoal will be added after the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.
	InsertAfter *string `json:"insert_after,omitempty"`

	// An id of a subgoal of this parent goal. The new subgoal will be added before the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.
	InsertBefore *string `json:"insert_before,omitempty"`

	// The goal gid to add as subgoal to a parent goal
	Subgoal string `json:"subgoal"`
}

// GoalAddSupportingWorkRequest defines model for GoalAddSupportingWorkRequest.
type GoalAddSupportingWorkRequest struct {

	// The project/portfolio gid to add as supporting work for a goal
	SupportingWork string `json:"supporting_work"`
}

// GoalBase defines model for GoalBase.
type GoalBase struct {
	// Embedded struct due to allOf(#/components/schemas/GoalCompact)
	GoalCompact `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The localized day on which this goal is due. This takes a date with format `YYYY-MM-DD`.
	DueOn *string `json:"due_on"`

	// Array of users following this goal.
	Followers *[]UserCompact `json:"followers,omitempty"`

	// The notes of the goal with formatting as HTML.
	HtmlNotes *string `json:"html_notes,omitempty"`

	// Whether the goal belongs to the workspace (and is listed as part of the workspace’s goals) or not. If it isn’t a workspace-level goal, it is a team-level goal, and is associated with the goal’s team.
	IsWorkspaceLevel *bool `json:"is_workspace_level,omitempty"`

	// True if the goal is liked by the authorized user, false if not.
	Liked  *bool `json:"liked,omitempty"`
	Metric *struct {
		// Embedded struct due to allOf(#/components/schemas/GoalMetricBase)
		GoalMetricBase `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"metric,omitempty"`

	// Free-form textual information associated with the goal (i.e. its description).
	Notes *string `json:"notes,omitempty"`

	// The day on which work for this goal begins, or null if the goal has no start date. This takes a date with `YYYY-MM-DD` format, and cannot be set unless there is an accompanying due date.
	StartOn *string `json:"start_on"`

	// The current status of this goal. When the goal is open, its status can be `green`, `yellow`, and `red` to reflect "On Track", "At Risk", and "Off Track", respectively. When the goal is closed, the value can be `missed`, `achieved`, `partial`, or `dropped`.
	Status *string `json:"status"`
	Team   *struct {
		// Embedded struct due to allOf(#/components/schemas/TeamCompact)
		TeamCompact `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"team,omitempty"`
	Workspace *struct {
		// Embedded struct due to allOf(#/components/schemas/WorkspaceCompact)
		WorkspaceCompact `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"workspace,omitempty"`
}

// GoalCompact defines model for GoalCompact.
type GoalCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The name of the goal.
	Name  *string `json:"name,omitempty"`
	Owner *struct {
		// Embedded struct due to allOf(#/components/schemas/UserCompact)
		UserCompact `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"owner,omitempty"`
}

// GoalMetricBase defines model for GoalMetricBase.
type GoalMetricBase struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// ISO 4217 currency code to format this custom field. This will be null if the `format` is not `currency`.
	CurrencyCode *string `json:"currency_code"`

	// *Conditional*. This string is the current value of a goal metric of type string.
	CurrentDisplayValue *string `json:"current_display_value,omitempty"`

	// *Conditional*. This number is the current value of a goal metric of type number.
	CurrentNumberValue *float32 `json:"current_number_value,omitempty"`

	// *Conditional*. This number is the start value of a goal metric of type number.
	InitialNumberValue *float32 `json:"initial_number_value,omitempty"`

	// Only relevant for goal metrics of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive.
	// For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%.
	Precision *int `json:"precision,omitempty"`

	// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
	ResourceSubtype *GoalMetricBaseResourceSubtype `json:"resource_subtype,omitempty"`

	// *Conditional*. This number is the end value of a goal metric of type number.
	TargetNumberValue *float32 `json:"target_number_value,omitempty"`

	// A supported unit of measure for the goal metric, or none.
	Unit *GoalMetricBaseUnit `json:"unit,omitempty"`
}

// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
type GoalMetricBaseResourceSubtype string

// A supported unit of measure for the goal metric, or none.
type GoalMetricBaseUnit string

// GoalMetricCurrentValueRequest defines model for GoalMetricCurrentValueRequest.
type GoalMetricCurrentValueRequest struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// *Conditional*. This number is the current value of a goal metric of type number.
	CurrentNumberValue *float32 `json:"current_number_value,omitempty"`
}

// GoalMetricRequest defines model for GoalMetricRequest.
type GoalMetricRequest GoalMetricBase

// GoalRemoveSubgoalRequest defines model for GoalRemoveSubgoalRequest.
type GoalRemoveSubgoalRequest struct {

	// The goal gid to remove as subgoal from the parent goal
	Subgoal string `json:"subgoal"`
}

// GoalRequest defines model for GoalRequest.
type GoalRequest GoalBase

// GoalResponse defines model for GoalResponse.
type GoalResponse struct {
	// Embedded struct due to allOf(#/components/schemas/GoalBase)
	GoalBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// Array of likes for users who have liked this goal.
	Likes *[]Like `json:"likes,omitempty"`

	// The number of users who have liked this goal.
	NumLikes *int `json:"num_likes,omitempty"`
}

// JobBase defines model for JobBase.
type JobBase JobCompact

// JobCompact defines model for JobCompact.
type JobCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	NewProject *ProjectCompact `json:"new_project,omitempty"`
	NewTask    *TaskCompact    `json:"new_task,omitempty"`

	// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
	ResourceSubtype *string           `json:"resource_subtype,omitempty"`
	Status          *JobCompactStatus `json:"status,omitempty"`
}

// JobCompactStatus defines model for JobCompact.Status.
type JobCompactStatus string

// JobResponse defines model for JobResponse.
type JobResponse JobBase

// An object to represent a user's like.
type Like struct {

	// Globally unique identifier of the object, as a string.
	Gid  *string      `json:"gid,omitempty"`
	User *UserCompact `json:"user,omitempty"`
}

// ModifyDependenciesRequest defines model for ModifyDependenciesRequest.
type ModifyDependenciesRequest struct {

	// An array of task gids that a task depends on.
	Dependencies *[]string `json:"dependencies,omitempty"`
}

// A set of dependent tasks.
type ModifyDependentsRequest struct {

	// An array of task gids that are dependents of the given task.
	Dependents *[]string `json:"dependents,omitempty"`
}

// OrganizationExportBase defines model for OrganizationExportBase.
type OrganizationExportBase OrganizationExportCompact

// OrganizationExportCompact defines model for OrganizationExportCompact.
type OrganizationExportCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The time at which this resource was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Download this URL to retreive the full export of the organization
	// in JSON format. It will be compressed in a gzip (.gz) container.
	//
	// *Note: May be null if the export is still in progress or
	// failed.  If present, this URL may only be valid for 1 hour from
	// the time of retrieval. You should avoid persisting this URL
	// somewhere and rather refresh on demand to ensure you do not keep
	// stale URLs.*
	DownloadUrl  *string           `json:"download_url"`
	Organization *WorkspaceCompact `json:"organization,omitempty"`

	// The current state of the export.
	State *OrganizationExportCompactState `json:"state,omitempty"`
}

// The current state of the export.
type OrganizationExportCompactState string

// An *organization_export* request starts a job to export the complete data of the given Organization.
type OrganizationExportRequest struct {

	// Globally unique identifier for the workspace or organization.
	Organization *string `json:"organization,omitempty"`
}

// OrganizationExportResponse defines model for OrganizationExportResponse.
type OrganizationExportResponse OrganizationExportBase

// PortfolioAddItemRequest defines model for PortfolioAddItemRequest.
type PortfolioAddItemRequest struct {

	// An id of an item in this portfolio. The new item will be added after the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.
	InsertAfter *string `json:"insert_after,omitempty"`

	// An id of an item in this portfolio. The new item will be added before the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.
	InsertBefore *string `json:"insert_before,omitempty"`

	// The item to add to the portfolio.
	Item string `json:"item"`
}

// PortfolioBase defines model for PortfolioBase.
type PortfolioBase struct {
	// Embedded struct due to allOf(#/components/schemas/PortfolioCompact)
	PortfolioCompact `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// Color of the portfolio.
	Color *PortfolioBaseColor `json:"color,omitempty"`
}

// Color of the portfolio.
type PortfolioBaseColor string

// PortfolioCompact defines model for PortfolioCompact.
type PortfolioCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The name of the portfolio.
	Name *string `json:"name,omitempty"`
}

// PortfolioMembershipBase defines model for PortfolioMembershipBase.
type PortfolioMembershipBase PortfolioMembershipCompact

// PortfolioMembershipCompact defines model for PortfolioMembershipCompact.
type PortfolioMembershipCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Portfolio *PortfolioCompact `json:"portfolio,omitempty"`
	User      *UserCompact      `json:"user,omitempty"`
}

// PortfolioMembershipResponse defines model for PortfolioMembershipResponse.
type PortfolioMembershipResponse PortfolioMembershipBase

// PortfolioRemoveItemRequest defines model for PortfolioRemoveItemRequest.
type PortfolioRemoveItemRequest struct {

	// The item to remove from the portfolio.
	Item string `json:"item"`
}

// PortfolioRequest defines model for PortfolioRequest.
type PortfolioRequest struct {
	// Embedded struct due to allOf(#/components/schemas/PortfolioBase)
	PortfolioBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
	Members *[]string `json:"members,omitempty"`

	// Gid of an object.
	Workspace *string `json:"workspace,omitempty"`
}

// PortfolioResponse defines model for PortfolioResponse.
type PortfolioResponse struct {
	// Embedded struct due to allOf(#/components/schemas/PortfolioBase)
	PortfolioBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The time at which this resource was created.
	CreatedAt *time.Time   `json:"created_at,omitempty"`
	CreatedBy *UserCompact `json:"created_by,omitempty"`

	// Array of custom field settings applied to the portfolio.
	CustomFieldSettings *[]CustomFieldSettingResponse `json:"custom_field_settings,omitempty"`

	// The localized day on which this portfolio is due. This takes a date with format YYYY-MM-DD.
	DueOn   *time.Time     `json:"due_on"`
	Members *[]UserCompact `json:"members,omitempty"`
	Owner   *UserCompact   `json:"owner,omitempty"`

	// A url that points directly to the object within Asana.
	PermalinkUrl *string `json:"permalink_url,omitempty"`

	// The day on which work for this portfolio begins, or null if the portfolio has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, start_on and due_on cannot be the same date.*
	StartOn   *openapi_types.Date `json:"start_on"`
	Workspace *struct {
		// Embedded struct due to allOf(#/components/schemas/WorkspaceCompact)
		WorkspaceCompact `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"workspace,omitempty"`
}

// A collection of rich text that will be displayed as a preview to another app.
//
// This is read-only except for a small group of whitelisted apps.
type Preview struct {

	// Some fallback text to display if unable to display the full preview.
	Fallback *string `json:"fallback,omitempty"`

	// Text to display in the footer.
	Footer *string `json:"footer,omitempty"`

	// Text to display in the header.
	Header *string `json:"header,omitempty"`

	// Where the header will link to.
	HeaderLink *string `json:"header_link,omitempty"`

	// HTML formatted text for the body of the preview.
	HtmlText *string `json:"html_text,omitempty"`

	// Text for the body of the preview.
	Text *string `json:"text,omitempty"`

	// Text to display as the title.
	Title *string `json:"title,omitempty"`

	// Where to title will link to.
	TitleLink *string `json:"title_link,omitempty"`
}

// ProjectBase defines model for ProjectBase.
type ProjectBase struct {
	// Embedded struct due to allOf(#/components/schemas/ProjectCompact)
	ProjectCompact `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.
	Archived *bool `json:"archived,omitempty"`

	// Color of the project.
	Color *ProjectBaseColor `json:"color"`

	// The time at which this resource was created.
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	CurrentStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/ProjectStatusResponse)
		ProjectStatusResponse `yaml:",inline"`
	} `json:"current_status"`

	// Array of Custom Field Settings (in compact form).
	CustomFieldSettings *[]CustomFieldSettingCompact `json:"custom_field_settings,omitempty"`

	// The default view (list, board, calendar, or timeline) of a project.
	DefaultView *ProjectBaseDefaultView `json:"default_view,omitempty"`

	// *Deprecated: new integrations should prefer the due_on field.*
	DueDate *time.Time `json:"due_date"`

	// The day on which this project is due. This takes a date with format YYYY-MM-DD.
	DueOn *time.Time `json:"due_on"`

	// [Opt In](/docs/input-output-options). The notes of the project with formatting as HTML.
	HtmlNotes *string `json:"html_notes,omitempty"`

	// [Opt In](/docs/input-output-options). Determines if the project is a template.
	IsTemplate *bool `json:"is_template,omitempty"`

	// Array of users who are members of this project.
	Members *[]UserCompact `json:"members,omitempty"`

	// The time at which this project was last modified.
	// *Note: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.*
	ModifiedAt *time.Time `json:"modified_at,omitempty"`

	// Free-form textual information associated with the project (ie., its description).
	Notes *string `json:"notes,omitempty"`

	// True if the project is public to the organization. If false, do not share this project with other users in this organization without explicitly checking to see if they have access.
	Public *bool `json:"public,omitempty"`

	// The day on which work for this project begins, or null if the project has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, start_on and due_on cannot be the same date.*
	StartOn   *openapi_types.Date `json:"start_on"`
	Workspace *struct {
		// Embedded struct due to allOf(#/components/schemas/WorkspaceCompact)
		WorkspaceCompact `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"workspace,omitempty"`
}

// Color of the project.
type ProjectBaseColor string

// The default view (list, board, calendar, or timeline) of a project.
type ProjectBaseDefaultView string

// ProjectCompact defines model for ProjectCompact.
type ProjectCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
	Name *string `json:"name,omitempty"`
}

// ProjectDuplicateRequest defines model for ProjectDuplicateRequest.
type ProjectDuplicateRequest struct {

	// The elements that will be duplicated to the new project. Tasks are always included.
	Include *ProjectDuplicateRequestInclude `json:"include,omitempty"`

	// The name of the new project.
	Name string `json:"name"`

	// A dictionary of options to auto-shift dates. `task_dates` must be included to use this option. Requires either `start_on` or `due_on`, but not both.
	ScheduleDates *struct {

		// Sets the last due date in the duplicated project to the given date. The rest of the due dates will be offset by the same amount as the due dates in the original project.
		DueOn *string `json:"due_on,omitempty"`

		// Determines if the auto-shifted dates should skip weekends.
		ShouldSkipWeekends bool `json:"should_skip_weekends"`

		// Sets the first start date in the duplicated project to the given date. The rest of the start dates will be offset by the same amount as the start dates in the original project.
		StartOn *string `json:"start_on,omitempty"`
	} `json:"schedule_dates,omitempty"`

	// Sets the team of the new project. If team is not defined, the new project will be in the same team as the the original project.
	Team *string `json:"team,omitempty"`
}

// The elements that will be duplicated to the new project. Tasks are always included.
type ProjectDuplicateRequestInclude string

// ProjectMembershipBase defines model for ProjectMembershipBase.
type ProjectMembershipBase ProjectMembershipCompact

// ProjectMembershipCompact defines model for ProjectMembershipCompact.
type ProjectMembershipCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	User *UserCompact `json:"user,omitempty"`
}

// ProjectMembershipResponse defines model for ProjectMembershipResponse.
type ProjectMembershipResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ProjectMembershipBase)
	ProjectMembershipBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Project *ProjectCompact `json:"project,omitempty"`

	// Whether the user has full access to the project or has comment-only access.
	WriteAccess *ProjectMembershipResponseWriteAccess `json:"write_access,omitempty"`
}

// Whether the user has full access to the project or has comment-only access.
type ProjectMembershipResponseWriteAccess string

// ProjectRequest defines model for ProjectRequest.
type ProjectRequest struct {
	// Embedded struct due to allOf(#/components/schemas/ProjectBase)
	ProjectBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// An object where each key is a Custom Field gid and each value is an enum gid, string, or number.
	CustomFields *ProjectRequest_CustomFields `json:"custom_fields,omitempty"`

	// *Create-only*. Comma separated string of users. Followers are a subset of members who receive all notifications for a project, the default notification setting when adding members to a project in-product.
	Followers *string `json:"followers,omitempty"`

	// The current owner of the project, may be null.
	Owner *string `json:"owner"`

	// *Create-only*. The team that this project is shared with. This field only exists for projects in organizations.
	Team *string `json:"team,omitempty"`
}

// An object where each key is a Custom Field gid and each value is an enum gid, string, or number.
type ProjectRequest_CustomFields struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ProjectResponse defines model for ProjectResponse.
type ProjectResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ProjectBase)
	ProjectBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// Array of Custom Fields.
	CustomFields *[]CustomFieldCompact `json:"custom_fields,omitempty"`

	// Array of users following this project. Followers are a subset of members who receive all notifications for a project, the default notification setting when adding members to a project in-product.
	Followers *[]UserCompact `json:"followers,omitempty"`

	// The icon for a project.
	Icon *ProjectResponseIcon `json:"icon"`

	// The current owner of the project, may be null.
	Owner *struct {
		// Embedded struct due to allOf(#/components/schemas/UserCompact)
		UserCompact `yaml:",inline"`
	} `json:"owner"`

	// A url that points directly to the object within Asana.
	PermalinkUrl *string `json:"permalink_url,omitempty"`
	Team         *struct {
		// Embedded struct due to allOf(#/components/schemas/TeamCompact)
		TeamCompact `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"team,omitempty"`
}

// The icon for a project.
type ProjectResponseIcon string

// ProjectSectionInsertRequest defines model for ProjectSectionInsertRequest.
type ProjectSectionInsertRequest struct {

	// Insert the given section immediately after the section specified by this parameter.
	AfterSection *string `json:"after_section,omitempty"`

	// Insert the given section immediately before the section specified by this parameter.
	BeforeSection *string `json:"before_section,omitempty"`

	// The project in which to reorder the given section.
	Project string `json:"project"`

	// The section to reorder.
	Section string `json:"section"`
}

// ProjectStatusBase defines model for ProjectStatusBase.
type ProjectStatusBase struct {
	// Embedded struct due to allOf(#/components/schemas/ProjectStatusCompact)
	ProjectStatusCompact `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The color associated with the status update.
	Color ProjectStatusBaseColor `json:"color"`

	// [Opt In](/docs/input-output-options). The text content of the status update with formatting as HTML.
	HtmlText *string `json:"html_text,omitempty"`

	// The text content of the status update.
	Text string `json:"text"`
}

// The color associated with the status update.
type ProjectStatusBaseColor string

// ProjectStatusCompact defines model for ProjectStatusCompact.
type ProjectStatusCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The title of the project status update.
	Title *string `json:"title,omitempty"`
}

// ProjectStatusRequest defines model for ProjectStatusRequest.
type ProjectStatusRequest ProjectStatusBase

// ProjectStatusResponse defines model for ProjectStatusResponse.
type ProjectStatusResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ProjectStatusBase)
	ProjectStatusBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Author *UserCompact `json:"author,omitempty"`

	// The time at which this resource was created.
	CreatedAt *time.Time   `json:"created_at,omitempty"`
	CreatedBy *UserCompact `json:"created_by,omitempty"`

	// The time at which this project status was last modified.
	// *Note: This does not currently reflect any changes in associations such as comments that may have been added or removed from the project status.*
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
}

// RemoveCustomFieldSettingRequest defines model for RemoveCustomFieldSettingRequest.
type RemoveCustomFieldSettingRequest struct {

	// The custom field to remove from this portfolio.
	CustomField string `json:"custom_field"`
}

// RemoveFollowersRequest defines model for RemoveFollowersRequest.
type RemoveFollowersRequest struct {

	// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
	Followers string `json:"followers"`
}

// RemoveMembersRequest defines model for RemoveMembersRequest.
type RemoveMembersRequest struct {

	// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
	Members string `json:"members"`
}

// SectionBase defines model for SectionBase.
type SectionBase SectionCompact

// SectionCompact defines model for SectionCompact.
type SectionCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The name of the section (i.e. the text displayed as the section header).
	Name *string `json:"name,omitempty"`
}

// SectionRequest defines model for SectionRequest.
type SectionRequest struct {

	// An existing section within this project after which the added section should be inserted. Cannot be provided together with insert_before.
	InsertAfter *string `json:"insert_after,omitempty"`

	// An existing section within this project before which the added section should be inserted. Cannot be provided together with insert_after.
	InsertBefore *string `json:"insert_before,omitempty"`

	// The text to be displayed as the section name. This cannot be an empty string.
	Name string `json:"name"`

	// *Create-Only* The project to create the section in
	Project string `json:"project"`
}

// SectionResponse defines model for SectionResponse.
type SectionResponse struct {
	// Embedded struct due to allOf(#/components/schemas/SectionBase)
	SectionBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The time at which this resource was created.
	CreatedAt *time.Time      `json:"created_at,omitempty"`
	Project   *ProjectCompact `json:"project,omitempty"`

	// *Deprecated - please use project instead*
	Projects *[]ProjectCompact `json:"projects,omitempty"`
}

// SectionTaskInsertRequest defines model for SectionTaskInsertRequest.
type SectionTaskInsertRequest struct {

	// An existing task within this section after which the added task should be inserted. Cannot be provided together with insert_before.
	InsertAfter *string `json:"insert_after,omitempty"`

	// An existing task within this section before which the added task should be inserted. Cannot be provided together with insert_after.
	InsertBefore *string `json:"insert_before,omitempty"`

	// The task to add to this section.
	Task string `json:"task"`
}

// StoryBase defines model for StoryBase.
type StoryBase struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The time at which this resource was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// [Opt In](/docs/input-output-options). HTML formatted text for a comment. This will not include the name of the creator.
	HtmlText *string `json:"html_text,omitempty"`

	// *Conditional*. Whether the story should be pinned on the resource.
	IsPinned *bool `json:"is_pinned,omitempty"`

	// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
	ResourceSubtype *string `json:"resource_subtype,omitempty"`

	// The name of the sticker in this story. `null` if there is no sticker.
	StickerName *StoryBaseStickerName `json:"sticker_name,omitempty"`

	// The plain text of the comment to add. Cannot be used with html_text.
	Text *string `json:"text,omitempty"`
}

// The name of the sticker in this story. `null` if there is no sticker.
type StoryBaseStickerName string

// StoryCompact defines model for StoryCompact.
type StoryCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The time at which this resource was created.
	CreatedAt *time.Time   `json:"created_at,omitempty"`
	CreatedBy *UserCompact `json:"created_by,omitempty"`

	// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
	ResourceSubtype *string `json:"resource_subtype,omitempty"`

	// *Create-only*. Human-readable text for the story or comment.
	// This will not include the name of the creator.
	// *Note: This is not guaranteed to be stable for a given type of story. For example, text for a reassignment may not always say “assigned to …” as the text for a story can both be edited and change based on the language settings of the user making the request.*
	// Use the `resource_subtype` property to discover the action that created the story.
	Text *string `json:"text,omitempty"`
}

// StoryRequest defines model for StoryRequest.
type StoryRequest StoryBase

// StoryResponse defines model for StoryResponse.
type StoryResponse struct {
	// Embedded struct due to allOf(#/components/schemas/StoryBase)
	StoryBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Assignee       *UserCompact        `json:"assignee,omitempty"`
	CreatedBy      *UserCompact        `json:"created_by,omitempty"`
	CustomField    *CustomFieldCompact `json:"custom_field,omitempty"`
	Dependency     *TaskCompact        `json:"dependency,omitempty"`
	DuplicateOf    *TaskCompact        `json:"duplicate_of,omitempty"`
	DuplicatedFrom *TaskCompact        `json:"duplicated_from,omitempty"`
	Follower       *UserCompact        `json:"follower,omitempty"`

	// *Deprecated - please use likes instead*
	// *Conditional*. True if the story is hearted by the authorized user, false if not.
	Hearted *bool `json:"hearted,omitempty"`

	// *Deprecated - please use likes instead*
	//
	// *Conditional*. Array of likes for users who have hearted this story.
	Hearts *[]Like `json:"hearts,omitempty"`

	// *Conditional*. Whether the text of the story has been edited after creation.
	IsEdited *bool `json:"is_edited,omitempty"`

	// *Conditional*. True if the story is liked by the authorized user, false if not.
	Liked *bool `json:"liked,omitempty"`

	// *Conditional*. Array of likes for users who have liked this story.
	Likes *[]Like `json:"likes,omitempty"`

	// *Conditional*
	NewApprovalStatus *string `json:"new_approval_status,omitempty"`

	// *Conditional*
	NewDates     *StoryResponseDates `json:"new_dates,omitempty"`
	NewEnumValue *EnumOption         `json:"new_enum_value,omitempty"`

	// *Conditional*
	NewMultiEnumValues *[]EnumOption `json:"new_multi_enum_values,omitempty"`

	// *Conditional*
	NewName *string `json:"new_name,omitempty"`

	// *Conditional*
	NewNumberValue *int `json:"new_number_value,omitempty"`

	// *Conditional*
	NewResourceSubtype *string         `json:"new_resource_subtype,omitempty"`
	NewSection         *SectionCompact `json:"new_section,omitempty"`

	// *Conditional*
	NewTextValue *string `json:"new_text_value,omitempty"`

	// *Deprecated - please use likes instead*
	//
	// *Conditional*. The number of users who have hearted this story.
	NumHearts *int `json:"num_hearts,omitempty"`

	// *Conditional*. The number of users who have liked this story.
	NumLikes *int `json:"num_likes,omitempty"`

	// *Conditional*
	OldApprovalStatus *string `json:"old_approval_status,omitempty"`

	// *Conditional*
	OldDates     *StoryResponseDates `json:"old_dates,omitempty"`
	OldEnumValue *EnumOption         `json:"old_enum_value,omitempty"`

	// *Conditional*
	OldMultiEnumValues *[]EnumOption `json:"old_multi_enum_values,omitempty"`

	// *Conditional*'
	OldName *string `json:"old_name,omitempty"`

	// *Conditional*
	OldNumberValue *int `json:"old_number_value,omitempty"`

	// *Conditional*
	OldResourceSubtype *string         `json:"old_resource_subtype,omitempty"`
	OldSection         *SectionCompact `json:"old_section,omitempty"`

	// *Conditional*
	OldTextValue *string `json:"old_text_value,omitempty"`

	// *Conditional*. A collection of previews to be displayed in the story.
	//
	// *Note: This property only exists for comment stories.*
	Previews *[]Preview      `json:"previews,omitempty"`
	Project  *ProjectCompact `json:"project,omitempty"`

	// The component of the Asana product the user used to trigger the story.
	Source *StoryResponseSource `json:"source,omitempty"`
	Story  *StoryCompact        `json:"story,omitempty"`
	Tag    *TagCompact          `json:"tag,omitempty"`

	// The object this story is associated with. Currently may only be a task.
	Target *struct {
		Gid  *string `json:"gid,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"target,omitempty"`
	Task *TaskCompact `json:"task,omitempty"`
}

// The component of the Asana product the user used to trigger the story.
type StoryResponseSource string

// *Conditional*
type StoryResponseDates struct {
	DueAt   *time.Time          `json:"due_at,omitempty"`
	DueOn   *openapi_types.Date `json:"due_on,omitempty"`
	StartOn *openapi_types.Date `json:"start_on,omitempty"`
}

// TagBase defines model for TagBase.
type TagBase struct {
	// Embedded struct due to allOf(#/components/schemas/TagCompact)
	TagCompact `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// Color of the tag.
	Color *TagBaseColor `json:"color,omitempty"`
}

// Color of the tag.
type TagBaseColor string

// TagCompact defines model for TagCompact.
type TagCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// Name of the tag. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
	Name *string `json:"name,omitempty"`
}

// TagRequest defines model for TagRequest.
type TagRequest struct {
	// Embedded struct due to allOf(#/components/schemas/TagBase)
	TagBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
	Followers *[]string `json:"followers,omitempty"`

	// Gid of an object.
	Workspace *string `json:"workspace,omitempty"`
}

// TagResponse defines model for TagResponse.
type TagResponse struct {
	// Embedded struct due to allOf(#/components/schemas/TagBase)
	TagBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// Array of users following this tag.
	Followers *[]UserCompact `json:"followers,omitempty"`

	// A url that points directly to the object within Asana.
	PermalinkUrl *string           `json:"permalink_url,omitempty"`
	Workspace    *WorkspaceCompact `json:"workspace,omitempty"`
}

// TaskAddFollowersRequest defines model for TaskAddFollowersRequest.
type TaskAddFollowersRequest struct {

	// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
	Followers []string `json:"followers"`
}

// TaskAddProjectRequest defines model for TaskAddProjectRequest.
type TaskAddProjectRequest struct {

	// A task in the project to insert the task after, or `null` to insert at the beginning of the list.
	InsertAfter *string `json:"insert_after"`

	// A task in the project to insert the task before, or `null` to insert at the end of the list.
	InsertBefore *string `json:"insert_before"`

	// The project to add the task to.
	Project string `json:"project"`

	// A section in the project to insert the task into. The task will be inserted at the bottom of the section.
	Section *string `json:"section"`
}

// TaskAddTagRequest defines model for TaskAddTagRequest.
type TaskAddTagRequest struct {

	// The tag to add to the task.
	Tag string `json:"tag"`
}

// TaskBase defines model for TaskBase.
type TaskBase struct {
	// Embedded struct due to allOf(#/components/schemas/TaskCompact)
	TaskCompact `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// *Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.
	ApprovalStatus *TaskBaseApprovalStatus `json:"approval_status,omitempty"`

	// *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to "inbox" or "upcoming" inserts it at the top of the section, while the other options will insert at the bottom.
	AssigneeStatus *TaskBaseAssigneeStatus `json:"assignee_status,omitempty"`

	// True if the task is currently marked complete, false if not.
	Completed *bool `json:"completed,omitempty"`

	// The time at which this task was completed, or null if the task is incomplete.
	CompletedAt *time.Time   `json:"completed_at"`
	CompletedBy *UserCompact `json:"completed_by,omitempty"`

	// The time at which this resource was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// [Opt In](/docs/input-output-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.
	Dependencies *[]AsanaResource `json:"dependencies,omitempty"`

	// [Opt In](/docs/input-output-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.
	Dependents *[]AsanaResource `json:"dependents,omitempty"`

	// The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.
	DueAt *openapi_types.Date `json:"due_at"`

	// The localized date on which this task is due, or null if the task has no due date. This takes a date with `YYYY-MM-DD` format and should not be used together with due_at.
	DueOn *openapi_types.Date `json:"due_on"`

	// *OAuth Required*. *Conditional*. This field is returned only if external values are set or included by using [Opt In] (/docs/input-output-options).
	// The external field allows you to store app-specific metadata on tasks, including a gid that can be used to retrieve tasks and a data blob that can store app-specific character strings. Note that you will need to authenticate with Oauth to access or modify this data. Once an external gid is set, you can use the notation `external:custom_gid` to reference your object anywhere in the API where you may use the original object gid. See the page on Custom External Data for more details.
	External *struct {
		Data *string `json:"data,omitempty"`
		Gid  *string `json:"gid,omitempty"`
	} `json:"external,omitempty"`

	// *Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.
	Hearted *bool `json:"hearted,omitempty"`

	// *Deprecated - please use likes instead* Array of likes for users who have hearted this task.
	Hearts *[]Like `json:"hearts,omitempty"`

	// [Opt In](/docs/input-output-options). The notes of the text with formatting as HTML.
	HtmlNotes *string `json:"html_notes,omitempty"`

	// [Opt In](/docs/input-output-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/docs/asana-sections) without being true `section` objects. If a `task` object is rendered this way in any context it will have the property `is_rendered_as_separator` set to `true`.
	IsRenderedAsSeparator *bool `json:"is_rendered_as_separator,omitempty"`

	// True if the task is liked by the authorized user, false if not.
	Liked *bool `json:"liked,omitempty"`

	// Array of likes for users who have liked this task.
	Likes *[]Like `json:"likes,omitempty"`

	// *Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the `addProject` and `removeProject` endpoints. Note that over time, more types of memberships may be added to this property.
	Memberships *[]struct {
		Project *ProjectCompact `json:"project,omitempty"`
		Section *SectionCompact `json:"section,omitempty"`
	} `json:"memberships,omitempty"`

	// The time at which this task was last modified.
	//
	// *Note: This does not currently reflect any changes in
	// associations such as projects or comments that may have been
	// added or removed from the task.*
	ModifiedAt *time.Time `json:"modified_at,omitempty"`

	// Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
	Name *string `json:"name,omitempty"`

	// Free-form textual information associated with the task (i.e. its description).
	Notes *string `json:"notes,omitempty"`

	// *Deprecated - please use likes instead* The number of users who have hearted this task.
	NumHearts *int `json:"num_hearts,omitempty"`

	// The number of users who have liked this task.
	NumLikes *int `json:"num_likes,omitempty"`

	// [Opt In](/docs/input-output-options). The number of subtasks on this task.
	NumSubtasks *int `json:"num_subtasks,omitempty"`

	// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
	// The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.
	ResourceSubtype *TaskBaseResourceSubtype `json:"resource_subtype,omitempty"`

	// The day on which work begins for the task , or null if the task has no start date. This takes a date with `YYYY-MM-DD` format.
	// *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter.*
	StartOn *openapi_types.Date `json:"start_on"`
}

// *Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.
type TaskBaseApprovalStatus string

// *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to "inbox" or "upcoming" inserts it at the top of the section, while the other options will insert at the bottom.
type TaskBaseAssigneeStatus string

// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
// The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.
type TaskBaseResourceSubtype string

// TaskCompact defines model for TaskCompact.
type TaskCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The name of the task.
	Name *string `json:"name,omitempty"`
}

// A response object returned from the task count endpoint.
type TaskCountResponse struct {

	// The number of completed milestones in a project.
	NumCompletedMilestones *int `json:"num_completed_milestones,omitempty"`

	// The number of completed tasks in a project.
	NumCompletedTasks *int `json:"num_completed_tasks,omitempty"`

	// The number of incomplete milestones in a project.
	NumIncompleteMilestones *int `json:"num_incomplete_milestones,omitempty"`

	// The number of incomplete tasks in a project.
	NumIncompleteTasks *int `json:"num_incomplete_tasks,omitempty"`

	// The number of milestones in a project.
	NumMilestones *int `json:"num_milestones,omitempty"`

	// The number of tasks in a project.
	NumTasks *int `json:"num_tasks,omitempty"`
}

// TaskDuplicateRequest defines model for TaskDuplicateRequest.
type TaskDuplicateRequest struct {

	// The fields that will be duplicated to the new task.
	Include *TaskDuplicateRequestInclude `json:"include,omitempty"`

	// The name of the new task.
	Name *string `json:"name,omitempty"`
}

// The fields that will be duplicated to the new task.
type TaskDuplicateRequestInclude string

// TaskRemoveFollowersRequest defines model for TaskRemoveFollowersRequest.
type TaskRemoveFollowersRequest struct {

	// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
	Followers []string `json:"followers"`
}

// TaskRemoveProjectRequest defines model for TaskRemoveProjectRequest.
type TaskRemoveProjectRequest struct {

	// The project to remove the task from.
	Project string `json:"project"`
}

// TaskRemoveTagRequest defines model for TaskRemoveTagRequest.
type TaskRemoveTagRequest struct {

	// The tag to remove from the task.
	Tag string `json:"tag"`
}

// TaskRequest defines model for TaskRequest.
type TaskRequest struct {
	// Embedded struct due to allOf(#/components/schemas/TaskBase)
	TaskBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// Gid of a user.
	Assignee        *string `json:"assignee"`
	AssigneeSection *struct {
		// Embedded struct due to allOf(#/components/schemas/SectionCompact)
		SectionCompact `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		// Embedded fields due to inline allOf schema
	} `json:"assignee_section"`

	// An object where each key is a Custom Field gid and each value is an enum gid, string, or number.
	CustomFields *TaskRequest_CustomFields `json:"custom_fields,omitempty"`

	// *Create-Only* An array of strings identifying users. These can either be the string "me", an email, or the gid of a user. In order to change followers on an existing task use `addFollowers` and `removeFollowers`.
	Followers *[]string `json:"followers,omitempty"`

	// Gid of a task.
	Parent *string `json:"parent"`

	// *Create-Only* Array of project gids. In order to change projects on an existing task use `addProject` and `removeProject`.
	Projects *[]string `json:"projects,omitempty"`

	// *Create-Only* Array of tag gids. In order to change tags on an existing task use `addTag` and `removeTag`.
	Tags *[]string `json:"tags,omitempty"`

	// Gid of a workspace.
	Workspace *string `json:"workspace,omitempty"`
}

// An object where each key is a Custom Field gid and each value is an enum gid, string, or number.
type TaskRequest_CustomFields struct {
	AdditionalProperties map[string]string `json:"-"`
}

// TaskResponse defines model for TaskResponse.
type TaskResponse struct {
	// Embedded struct due to allOf(#/components/schemas/TaskBase)
	TaskBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Assignee *struct {
		// Embedded struct due to allOf(#/components/schemas/UserCompact)
		UserCompact `yaml:",inline"`
	} `json:"assignee"`
	AssigneeSection *struct {
		// Embedded struct due to allOf(#/components/schemas/SectionCompact)
		SectionCompact `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"assignee_section"`

	// Array of custom field values applied to the task. These represent the custom field values recorded on this project for a particular custom field. For example, these custom field values will contain an `enum_value` property for custom fields of type `enum`, a `text_value` property for custom fields of type `text`, and so on. Please note that the `gid` returned on each custom field value *is identical* to the `gid` of the custom field, which allows referencing the custom field metadata through the `/custom_fields/custom_field-gid` endpoint.
	CustomFields *[]CustomFieldResponse `json:"custom_fields,omitempty"`

	// Array of users following this task.
	Followers *[]UserCompact `json:"followers,omitempty"`
	Parent    *struct {
		// Embedded struct due to allOf(#/components/schemas/TaskCompact)
		TaskCompact `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"parent,omitempty"`

	// A url that points directly to the object within Asana.
	PermalinkUrl *string `json:"permalink_url,omitempty"`

	// *Create-only.* Array of projects this task is associated with. At task creation time, this array can be used to add the task to many projects at once. After task creation, these associations can be modified using the addProject and removeProject endpoints.
	Projects *[]ProjectCompact `json:"projects,omitempty"`

	// Array of tags associated with this task. In order to change tags on an existing task use `addTag` and `removeTag`.
	Tags      *[]TagCompact `json:"tags,omitempty"`
	Workspace *struct {
		// Embedded struct due to allOf(#/components/schemas/WorkspaceCompact)
		WorkspaceCompact `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"workspace,omitempty"`
}

// TaskSetParentRequest defines model for TaskSetParentRequest.
type TaskSetParentRequest struct {

	// A subtask of the parent to insert the task after, or `null` to insert at the beginning of the list.
	InsertAfter *string `json:"insert_after,omitempty"`

	// A subtask of the parent to insert the task before, or `null` to insert at the end of the list.
	InsertBefore *string `json:"insert_before,omitempty"`

	// The new parent of the task, or `null` for no parent.
	Parent string `json:"parent"`
}

// A user identification object for specification with the addUser/removeUser endpoints.
type TeamAddUserRequest struct {

	// A string identifying a user. This can either be the string "me", an email, or the gid of a user.
	User *string `json:"user,omitempty"`
}

// TeamBase defines model for TeamBase.
type TeamBase TeamCompact

// TeamCompact defines model for TeamCompact.
type TeamCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The name of the team.
	Name *string `json:"name,omitempty"`
}

// TeamMembershipBase defines model for TeamMembershipBase.
type TeamMembershipBase TeamMembershipCompact

// TeamMembershipCompact defines model for TeamMembershipCompact.
type TeamMembershipCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// Describes if the user is a guest in the team.
	IsGuest *bool        `json:"is_guest,omitempty"`
	Team    *TeamCompact `json:"team,omitempty"`
	User    *UserCompact `json:"user,omitempty"`
}

// TeamMembershipResponse defines model for TeamMembershipResponse.
type TeamMembershipResponse TeamMembershipBase

// A user identification object for specification with the addUser/removeUser endpoints.
type TeamRemoveUserRequest struct {

	// A string identifying a user. This can either be the string "me", an email, or the gid of a user.
	User *string `json:"user,omitempty"`
}

// TeamRequest defines model for TeamRequest.
type TeamRequest struct {
	// Embedded struct due to allOf(#/components/schemas/TeamBase)
	TeamBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The description of the team.
	Description *string `json:"description,omitempty"`

	// The description of the team with formatting as HTML.
	HtmlDescription *string `json:"html_description,omitempty"`

	// The organization/workspace the team belongs to.
	Organization *string `json:"organization,omitempty"`
}

// TeamResponse defines model for TeamResponse.
type TeamResponse struct {
	// Embedded struct due to allOf(#/components/schemas/TeamBase)
	TeamBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// [Opt In](/docs/input-output-options). The description of the team.
	Description *string `json:"description,omitempty"`

	// [Opt In](/docs/input-output-options). The description of the team with formatting as HTML.
	HtmlDescription *string `json:"html_description,omitempty"`
	Organization    *struct {
		// Embedded struct due to allOf(#/components/schemas/WorkspaceCompact)
		WorkspaceCompact `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"organization,omitempty"`

	// A url that points directly to the object within Asana.
	PermalinkUrl *string `json:"permalink_url,omitempty"`
}

// UserBase defines model for UserBase.
type UserBase UserCompact

// UserCompact defines model for UserCompact.
type UserCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// *Read-only except when same user as requester*. The user’s name.
	Name *string `json:"name,omitempty"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	// Embedded struct due to allOf(#/components/schemas/UserBase)
	UserBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The user's email address.
	Email *openapi_types.Email `json:"email,omitempty"`

	// A map of the user’s profile photo in various sizes, or null if no photo is set. Sizes provided are 21, 27, 36, 60, and 128. Images are in PNG format.
	Photo *struct {
		Image128x128 *string `json:"image_128x128,omitempty"`
		Image21x21   *string `json:"image_21x21,omitempty"`
		Image27x27   *string `json:"image_27x27,omitempty"`
		Image36x36   *string `json:"image_36x36,omitempty"`
		Image60x60   *string `json:"image_60x60,omitempty"`
	} `json:"photo"`

	// Workspaces and organizations this user may access.
	// Note\: The API will only return workspaces and organizations that also contain the authenticated user.
	Workspaces *[]WorkspaceCompact `json:"workspaces,omitempty"`
}

// UserTaskListBase defines model for UserTaskListBase.
type UserTaskListBase UserTaskListCompact

// UserTaskListCompact defines model for UserTaskListCompact.
type UserTaskListCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The name of the user task list.
	Name *string `json:"name,omitempty"`

	// The owner of the user task list, i.e. the person whose My Tasks is represented by this resource.
	Owner *struct {
		// Embedded struct due to allOf(#/components/schemas/UserCompact)
		UserCompact `yaml:",inline"`
	} `json:"owner,omitempty"`

	// The workspace in which the user task list is located.
	Workspace *struct {
		// Embedded struct due to allOf(#/components/schemas/WorkspaceCompact)
		WorkspaceCompact `yaml:",inline"`
	} `json:"workspace,omitempty"`
}

// UserTaskListResponse defines model for UserTaskListResponse.
type UserTaskListResponse UserTaskListBase

// WebhookCompact defines model for WebhookCompact.
type WebhookCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// If true, the webhook will send events - if false it is considered inactive and will not generate events.
	Active   *bool               `json:"active,omitempty"`
	Resource *AsanaNamedResource `json:"resource,omitempty"`

	// The URL to receive the HTTP POST.
	Target *string `json:"target,omitempty"`
}

// A WebhookFilter can be passed on creation of a webhook in order to filter the types of actions that trigger delivery of an [Event](/docs/tocS_Event)
type WebhookFilter struct {

	// The type of change on the **resource** to pass through the filter. For more information refer to `Event.action` in the [Event](/docs/tocS_Event) schema. This can be one of `changed`, `added`, `removed`, `deleted`, and `undeleted` depending on the nature of what has occurred on the resource.
	Action *string `json:"action,omitempty"`

	// *Conditional.* A whitelist of fields for events which will pass the filter when the resource is changed. These can be any combination of the fields on the resources themselves. This field is only valid for `action` of type `changed`
	Fields *[]string `json:"fields,omitempty"`

	// The resource subtype of the resource that the filter applies to. This should be set to the same value as is returned on the `resource_subtype` field on the resources themselves.
	ResourceSubtype *string `json:"resource_subtype,omitempty"`

	// The type of the resource which created the event when modified; for example, to filter to changes on regular tasks this field should be set to `task`.
	ResourceType *string `json:"resource_type,omitempty"`
}

// WebhookRequest defines model for WebhookRequest.
type WebhookRequest struct {

	// An array of WebhookFilter objects to specify a whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server.
	Filters *[]struct {
		// Embedded struct due to allOf(#/components/schemas/WebhookFilter)
		WebhookFilter `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		// Embedded fields due to inline allOf schema
	} `json:"filters,omitempty"`

	// A resource ID to subscribe to. Many Asana resources are valid to create webhooks on, but higher-level resources require filters.
	Resource string `json:"resource"`

	// The URL to receive the HTTP POST. The full URL will be used to deliver events from this webhook (including parameters) which allows encoding of application-specific state when the webhook is created.
	Target string `json:"target"`
}

// WebhookResponse defines model for WebhookResponse.
type WebhookResponse struct {
	// Embedded struct due to allOf(#/components/schemas/WebhookCompact)
	WebhookCompact `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The time at which this resource was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server.
	Filters *[]struct {
		// Embedded struct due to allOf(#/components/schemas/WebhookFilter)
		WebhookFilter `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		// Embedded fields due to inline allOf schema
	} `json:"filters,omitempty"`

	// The timestamp when the webhook last received an error when sending an event to the target.
	LastFailureAt *time.Time `json:"last_failure_at,omitempty"`

	// The contents of the last error response sent to the webhook when attempting to deliver events to the target.
	LastFailureContent *string `json:"last_failure_content,omitempty"`

	// The timestamp when the webhook last successfully sent an event to the target.
	LastSuccessAt *time.Time `json:"last_success_at,omitempty"`
}

// A user identification object for specification with the addUser/removeUser endpoints.
type WorkspaceAddUserRequest struct {

	// A string identifying a user. This can either be the string "me", an email, or the gid of a user.
	User *string `json:"user,omitempty"`
}

// WorkspaceBase defines model for WorkspaceBase.
type WorkspaceBase WorkspaceCompact

// WorkspaceCompact defines model for WorkspaceCompact.
type WorkspaceCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The name of the workspace.
	Name *string `json:"name,omitempty"`
}

// WorkspaceMembershipBase defines model for WorkspaceMembershipBase.
type WorkspaceMembershipBase WorkspaceMembershipCompact

// WorkspaceMembershipCompact defines model for WorkspaceMembershipCompact.
type WorkspaceMembershipCompact struct {
	// Embedded struct due to allOf(#/components/schemas/AsanaResource)
	AsanaResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	User      *UserCompact      `json:"user,omitempty"`
	Workspace *WorkspaceCompact `json:"workspace,omitempty"`
}

// WorkspaceMembershipResponse defines model for WorkspaceMembershipResponse.
type WorkspaceMembershipResponse struct {
	// Embedded struct due to allOf(#/components/schemas/WorkspaceMembershipBase)
	WorkspaceMembershipBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// Reflects if this user still a member of the workspace.
	IsActive *bool `json:"is_active,omitempty"`

	// Reflects if this user is an admin of the workspace.
	IsAdmin *bool `json:"is_admin,omitempty"`

	// Reflects if this user is a guest of the workspace.
	IsGuest      *bool                 `json:"is_guest,omitempty"`
	UserTaskList *UserTaskListResponse `json:"user_task_list,omitempty"`
}

// A user identification object for specification with the addUser/removeUser endpoints.
type WorkspaceRemoveUserRequest struct {

	// A string identifying a user. This can either be the string "me", an email, or the gid of a user.
	User *string `json:"user,omitempty"`
}

// WorkspaceRequest defines model for WorkspaceRequest.
type WorkspaceRequest WorkspaceBase

// WorkspaceResponse defines model for WorkspaceResponse.
type WorkspaceResponse struct {
	// Embedded struct due to allOf(#/components/schemas/WorkspaceBase)
	WorkspaceBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The email domains that are associated with this workspace.
	EmailDomains *[]string `json:"email_domains,omitempty"`

	// Whether the workspace is an *organization*.
	IsOrganization *bool `json:"is_organization,omitempty"`
}

// ArchivedQueryParam defines model for archived_query_param.
type ArchivedQueryParam bool

// AttachmentPathGid defines model for attachment_path_gid.
type AttachmentPathGid string

// CustomFieldPathGid defines model for custom_field_path_gid.
type CustomFieldPathGid string

// Fields defines model for fields.
type Fields []string

// GoalPathGid defines model for goal_path_gid.
type GoalPathGid string

// JobPathGid defines model for job_path_gid.
type JobPathGid string

// Limit defines model for limit.
type Limit int

// Offset defines model for offset.
type Offset string

// OrganizationExportPathGid defines model for organization_export_path_gid.
type OrganizationExportPathGid string

// PortfolioMembershipPathGid defines model for portfolio_membership_path_gid.
type PortfolioMembershipPathGid string

// PortfolioPathGid defines model for portfolio_path_gid.
type PortfolioPathGid string

// PortfolioQueryParam defines model for portfolio_query_param.
type PortfolioQueryParam string

// Pretty defines model for pretty.
type Pretty bool

// ProjectMembershipPathGid defines model for project_membership_path_gid.
type ProjectMembershipPathGid string

// ProjectPathGid defines model for project_path_gid.
type ProjectPathGid string

// ProjectStatusPathGid defines model for project_status_path_gid.
type ProjectStatusPathGid string

// SectionPathGid defines model for section_path_gid.
type SectionPathGid string

// StoryPathGid defines model for story_path_gid.
type StoryPathGid string

// TagPathGid defines model for tag_path_gid.
type TagPathGid string

// TaskPathGid defines model for task_path_gid.
type TaskPathGid string

// TeamMembershipPathGid defines model for team_membership_path_gid.
type TeamMembershipPathGid string

// TeamPathGid defines model for team_path_gid.
type TeamPathGid string

// UserPathGid defines model for user_path_gid.
type UserPathGid string

// UserQueryParam defines model for user_query_param.
type UserQueryParam string

// UserTaskListPathGid defines model for user_task_list_path_gid.
type UserTaskListPathGid string

// WebhookPathGid defines model for webhook_path_gid.
type WebhookPathGid string

// WorkspaceMembershipPathGid defines model for workspace_membership_path_gid.
type WorkspaceMembershipPathGid string

// WorkspacePathGid defines model for workspace_path_gid.
type WorkspacePathGid string

// WorkspaceQueryParam defines model for workspace_query_param.
type WorkspaceQueryParam string

// Sadly, sometimes requests to the API are not successful. Failures can
// occur for a wide range of reasons. In all cases, the API should return
// an HTTP Status Code that indicates the nature of the failure,
// with a response body in JSON format containing additional information.
//
//
// In the event of a server error the response body will contain an error
// phrase. These phrases are automatically generated using the
// [node-asana-phrase
// library](https://github.com/Asana/node-asana-phrase) and can be used by
// Asana support to quickly look up the incident that caused the server
// error.
type BadGateway ErrorResponse

// Sadly, sometimes requests to the API are not successful. Failures can
// occur for a wide range of reasons. In all cases, the API should return
// an HTTP Status Code that indicates the nature of the failure,
// with a response body in JSON format containing additional information.
//
//
// In the event of a server error the response body will contain an error
// phrase. These phrases are automatically generated using the
// [node-asana-phrase
// library](https://github.com/Asana/node-asana-phrase) and can be used by
// Asana support to quickly look up the incident that caused the server
// error.
type BadRequest ErrorResponse

// Sadly, sometimes requests to the API are not successful. Failures can
// occur for a wide range of reasons. In all cases, the API should return
// an HTTP Status Code that indicates the nature of the failure,
// with a response body in JSON format containing additional information.
//
//
// In the event of a server error the response body will contain an error
// phrase. These phrases are automatically generated using the
// [node-asana-phrase
// library](https://github.com/Asana/node-asana-phrase) and can be used by
// Asana support to quickly look up the incident that caused the server
// error.
type Forbidden ErrorResponse

// Sadly, sometimes requests to the API are not successful. Failures can
// occur for a wide range of reasons. In all cases, the API should return
// an HTTP Status Code that indicates the nature of the failure,
// with a response body in JSON format containing additional information.
//
//
// In the event of a server error the response body will contain an error
// phrase. These phrases are automatically generated using the
// [node-asana-phrase
// library](https://github.com/Asana/node-asana-phrase) and can be used by
// Asana support to quickly look up the incident that caused the server
// error.
type GatewayTimeout ErrorResponse

// Sadly, sometimes requests to the API are not successful. Failures can
// occur for a wide range of reasons. In all cases, the API should return
// an HTTP Status Code that indicates the nature of the failure,
// with a response body in JSON format containing additional information.
//
//
// In the event of a server error the response body will contain an error
// phrase. These phrases are automatically generated using the
// [node-asana-phrase
// library](https://github.com/Asana/node-asana-phrase) and can be used by
// Asana support to quickly look up the incident that caused the server
// error.
type InternalServerError ErrorResponse

// Sadly, sometimes requests to the API are not successful. Failures can
// occur for a wide range of reasons. In all cases, the API should return
// an HTTP Status Code that indicates the nature of the failure,
// with a response body in JSON format containing additional information.
//
//
// In the event of a server error the response body will contain an error
// phrase. These phrases are automatically generated using the
// [node-asana-phrase
// library](https://github.com/Asana/node-asana-phrase) and can be used by
// Asana support to quickly look up the incident that caused the server
// error.
type NotFound ErrorResponse

// Sadly, sometimes requests to the API are not successful. Failures can
// occur for a wide range of reasons. In all cases, the API should return
// an HTTP Status Code that indicates the nature of the failure,
// with a response body in JSON format containing additional information.
//
//
// In the event of a server error the response body will contain an error
// phrase. These phrases are automatically generated using the
// [node-asana-phrase
// library](https://github.com/Asana/node-asana-phrase) and can be used by
// Asana support to quickly look up the incident that caused the server
// error.
type PaymentRequired ErrorResponse

// Sadly, sometimes requests to the API are not successful. Failures can
// occur for a wide range of reasons. In all cases, the API should return
// an HTTP Status Code that indicates the nature of the failure,
// with a response body in JSON format containing additional information.
//
//
// In the event of a server error the response body will contain an error
// phrase. These phrases are automatically generated using the
// [node-asana-phrase
// library](https://github.com/Asana/node-asana-phrase) and can be used by
// Asana support to quickly look up the incident that caused the server
// error.
type ServiceUnavailable ErrorResponse

// Sadly, sometimes requests to the API are not successful. Failures can
// occur for a wide range of reasons. In all cases, the API should return
// an HTTP Status Code that indicates the nature of the failure,
// with a response body in JSON format containing additional information.
//
//
// In the event of a server error the response body will contain an error
// phrase. These phrases are automatically generated using the
// [node-asana-phrase
// library](https://github.com/Asana/node-asana-phrase) and can be used by
// Asana support to quickly look up the incident that caused the server
// error.
type TooManyRequests ErrorResponse

// Sadly, sometimes requests to the API are not successful. Failures can
// occur for a wide range of reasons. In all cases, the API should return
// an HTTP Status Code that indicates the nature of the failure,
// with a response body in JSON format containing additional information.
//
//
// In the event of a server error the response body will contain an error
// phrase. These phrases are automatically generated using the
// [node-asana-phrase
// library](https://github.com/Asana/node-asana-phrase) and can be used by
// Asana support to quickly look up the incident that caused the server
// error.
type Unauthorized ErrorResponse

// DeleteAttachmentParams defines parameters for DeleteAttachment.
type DeleteAttachmentParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetAttachmentParams defines parameters for GetAttachment.
type GetAttachmentParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// CreateBatchRequestJSONBody defines parameters for CreateBatchRequest.
type CreateBatchRequestJSONBody struct {

	// A request object for use in a batch request.
	Data *BatchRequest `json:"data,omitempty"`
}

// CreateBatchRequestParams defines parameters for CreateBatchRequest.
type CreateBatchRequestParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// CreateCustomFieldJSONBody defines parameters for CreateCustomField.
type CreateCustomFieldJSONBody struct {
	Data *CustomFieldRequest `json:"data,omitempty"`
}

// CreateCustomFieldParams defines parameters for CreateCustomField.
type CreateCustomFieldParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// DeleteCustomFieldParams defines parameters for DeleteCustomField.
type DeleteCustomFieldParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetCustomFieldParams defines parameters for GetCustomField.
type GetCustomFieldParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// UpdateCustomFieldJSONBody defines parameters for UpdateCustomField.
type UpdateCustomFieldJSONBody struct {
	Data *CustomFieldRequest `json:"data,omitempty"`
}

// UpdateCustomFieldParams defines parameters for UpdateCustomField.
type UpdateCustomFieldParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// CreateEnumOptionForCustomFieldJSONBody defines parameters for CreateEnumOptionForCustomField.
type CreateEnumOptionForCustomFieldJSONBody struct {
	Data *EnumOptionRequest `json:"data,omitempty"`
}

// CreateEnumOptionForCustomFieldParams defines parameters for CreateEnumOptionForCustomField.
type CreateEnumOptionForCustomFieldParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// InsertEnumOptionForCustomFieldJSONBody defines parameters for InsertEnumOptionForCustomField.
type InsertEnumOptionForCustomFieldJSONBody struct {
	Data *EnumOptionInsertRequest `json:"data,omitempty"`
}

// InsertEnumOptionForCustomFieldParams defines parameters for InsertEnumOptionForCustomField.
type InsertEnumOptionForCustomFieldParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// UpdateEnumOptionJSONBody defines parameters for UpdateEnumOption.
type UpdateEnumOptionJSONBody struct {
	Data *EnumOptionRequest `json:"data,omitempty"`
}

// UpdateEnumOptionParams defines parameters for UpdateEnumOption.
type UpdateEnumOptionParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {

	// A resource ID to subscribe to. The resource can be a task or project.
	Resource string `json:"resource"`

	// A sync token received from the last request, or none on first sync. Events will be returned from the point in time that the sync token was generated.
	// *Note: On your first request, omit the sync token. The response will be the same as for an expired sync token, and will include a new valid sync token.If the sync token is too old (which may happen from time to time) the API will return a `412 Precondition Failed` error, and include a fresh sync token in the response.*
	Sync *string `json:"sync,omitempty"`

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetGoalsParams defines parameters for GetGoals.
type GetGoalsParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`

	// Globally unique identifier for supporting portfolio.
	Portfolio *string `json:"portfolio,omitempty"`

	// Globally unique identifier for supporting project.
	Project *string `json:"project,omitempty"`

	// Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter.
	IsWorkspaceLevel *bool `json:"is_workspace_level,omitempty"`

	// Globally unique identifier for the team.
	Team *string `json:"team,omitempty"`

	// Globally unique identifier for the workspace.
	Workspace *string `json:"workspace,omitempty"`
}

// DeleteGoalParams defines parameters for DeleteGoal.
type DeleteGoalParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetGoalParams defines parameters for GetGoal.
type GetGoalParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// UpdateGoalJSONBody defines parameters for UpdateGoal.
type UpdateGoalJSONBody struct {
	Data *GoalRequest `json:"data,omitempty"`
}

// UpdateGoalParams defines parameters for UpdateGoal.
type UpdateGoalParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// AddFollowersJSONBody defines parameters for AddFollowers.
type AddFollowersJSONBody struct {
	Data *TaskAddFollowersRequest `json:"data,omitempty"`
}

// AddFollowersParams defines parameters for AddFollowers.
type AddFollowersParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// AddSubgoalJSONBody defines parameters for AddSubgoal.
type AddSubgoalJSONBody struct {
	Data *GoalAddSubgoalRequest `json:"data,omitempty"`
}

// AddSubgoalParams defines parameters for AddSubgoal.
type AddSubgoalParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// AddSupportingWorkForGoalJSONBody defines parameters for AddSupportingWorkForGoal.
type AddSupportingWorkForGoalJSONBody struct {
	Data *GoalAddSupportingWorkRequest `json:"data,omitempty"`
}

// AddSupportingWorkForGoalParams defines parameters for AddSupportingWorkForGoal.
type AddSupportingWorkForGoalParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetParentGoalsForGoalParams defines parameters for GetParentGoalsForGoal.
type GetParentGoalsForGoalParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// RemoveFollowersJSONBody defines parameters for RemoveFollowers.
type RemoveFollowersJSONBody struct {
	Data *TaskAddFollowersRequest `json:"data,omitempty"`
}

// RemoveFollowersParams defines parameters for RemoveFollowers.
type RemoveFollowersParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// RemoveSubgoalJSONBody defines parameters for RemoveSubgoal.
type RemoveSubgoalJSONBody struct {
	Data *GoalRemoveSubgoalRequest `json:"data,omitempty"`
}

// RemoveSubgoalParams defines parameters for RemoveSubgoal.
type RemoveSubgoalParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// RemoveSupportingWorkForGoalJSONBody defines parameters for RemoveSupportingWorkForGoal.
type RemoveSupportingWorkForGoalJSONBody struct {
	Data *GoalAddSupportingWorkRequest `json:"data,omitempty"`
}

// RemoveSupportingWorkForGoalParams defines parameters for RemoveSupportingWorkForGoal.
type RemoveSupportingWorkForGoalParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// CreateGoalMetricJSONBody defines parameters for CreateGoalMetric.
type CreateGoalMetricJSONBody struct {
	Data *GoalMetricRequest `json:"data,omitempty"`
}

// CreateGoalMetricParams defines parameters for CreateGoalMetric.
type CreateGoalMetricParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// UpdateGoalMetricJSONBody defines parameters for UpdateGoalMetric.
type UpdateGoalMetricJSONBody struct {
	Data *GoalMetricCurrentValueRequest `json:"data,omitempty"`
}

// UpdateGoalMetricParams defines parameters for UpdateGoalMetric.
type UpdateGoalMetricParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetSubgoalsForGoalParams defines parameters for GetSubgoalsForGoal.
type GetSubgoalsForGoalParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// SupportingWorkParams defines parameters for SupportingWork.
type SupportingWorkParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetJobParams defines parameters for GetJob.
type GetJobParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// CreateOrganizationExportJSONBody defines parameters for CreateOrganizationExport.
type CreateOrganizationExportJSONBody struct {

	// An *organization_export* request starts a job to export the complete data of the given Organization.
	Data *OrganizationExportRequest `json:"data,omitempty"`
}

// CreateOrganizationExportParams defines parameters for CreateOrganizationExport.
type CreateOrganizationExportParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetOrganizationExportParams defines parameters for GetOrganizationExport.
type GetOrganizationExportParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetTeamsForOrganizationParams defines parameters for GetTeamsForOrganization.
type GetTeamsForOrganizationParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetPortfolioMembershipsParams defines parameters for GetPortfolioMemberships.
type GetPortfolioMembershipsParams struct {

	// The portfolio to filter results on.
	Portfolio *PortfolioQueryParam `json:"portfolio,omitempty"`

	// The workspace to filter results on.
	Workspace *WorkspaceQueryParam `json:"workspace,omitempty"`

	// A string identifying a user. This can either be the string "me", an email, or the gid of a user.
	User *UserQueryParam `json:"user,omitempty"`

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetPortfolioMembershipParams defines parameters for GetPortfolioMembership.
type GetPortfolioMembershipParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetPortfoliosParams defines parameters for GetPortfolios.
type GetPortfoliosParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`

	// The workspace or organization to filter portfolios on.
	Workspace string `json:"workspace"`

	// The user who owns the portfolio. Currently, API users can only get a list of portfolios that they themselves own.
	Owner string `json:"owner"`
}

// CreatePortfolioJSONBody defines parameters for CreatePortfolio.
type CreatePortfolioJSONBody struct {
	Data *PortfolioRequest `json:"data,omitempty"`
}

// CreatePortfolioParams defines parameters for CreatePortfolio.
type CreatePortfolioParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// DeletePortfolioParams defines parameters for DeletePortfolio.
type DeletePortfolioParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetPortfolioParams defines parameters for GetPortfolio.
type GetPortfolioParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// UpdatePortfolioJSONBody defines parameters for UpdatePortfolio.
type UpdatePortfolioJSONBody struct {
	Data *PortfolioRequest `json:"data,omitempty"`
}

// UpdatePortfolioParams defines parameters for UpdatePortfolio.
type UpdatePortfolioParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// AddCustomFieldSettingForPortfolioJSONBody defines parameters for AddCustomFieldSettingForPortfolio.
type AddCustomFieldSettingForPortfolioJSONBody struct {
	Data *AddCustomFieldSettingRequest `json:"data,omitempty"`
}

// AddCustomFieldSettingForPortfolioParams defines parameters for AddCustomFieldSettingForPortfolio.
type AddCustomFieldSettingForPortfolioParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`
}

// AddItemForPortfolioJSONBody defines parameters for AddItemForPortfolio.
type AddItemForPortfolioJSONBody struct {
	Data *PortfolioAddItemRequest `json:"data,omitempty"`
}

// AddItemForPortfolioParams defines parameters for AddItemForPortfolio.
type AddItemForPortfolioParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// AddMembersForPortfolioJSONBody defines parameters for AddMembersForPortfolio.
type AddMembersForPortfolioJSONBody struct {
	Data *AddMembersRequest `json:"data,omitempty"`
}

// AddMembersForPortfolioParams defines parameters for AddMembersForPortfolio.
type AddMembersForPortfolioParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetCustomFieldSettingsForPortfolioParams defines parameters for GetCustomFieldSettingsForPortfolio.
type GetCustomFieldSettingsForPortfolioParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetItemsForPortfolioParams defines parameters for GetItemsForPortfolio.
type GetItemsForPortfolioParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetPortfolioMembershipsForPortfolioParams defines parameters for GetPortfolioMembershipsForPortfolio.
type GetPortfolioMembershipsForPortfolioParams struct {

	// A string identifying a user. This can either be the string "me", an email, or the gid of a user.
	User *UserQueryParam `json:"user,omitempty"`

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// RemoveCustomFieldSettingForPortfolioJSONBody defines parameters for RemoveCustomFieldSettingForPortfolio.
type RemoveCustomFieldSettingForPortfolioJSONBody struct {
	Data *RemoveCustomFieldSettingRequest `json:"data,omitempty"`
}

// RemoveCustomFieldSettingForPortfolioParams defines parameters for RemoveCustomFieldSettingForPortfolio.
type RemoveCustomFieldSettingForPortfolioParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`
}

// RemoveItemForPortfolioJSONBody defines parameters for RemoveItemForPortfolio.
type RemoveItemForPortfolioJSONBody struct {
	Data *PortfolioRemoveItemRequest `json:"data,omitempty"`
}

// RemoveItemForPortfolioParams defines parameters for RemoveItemForPortfolio.
type RemoveItemForPortfolioParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// RemoveMembersForPortfolioJSONBody defines parameters for RemoveMembersForPortfolio.
type RemoveMembersForPortfolioJSONBody struct {
	Data *RemoveMembersRequest `json:"data,omitempty"`
}

// RemoveMembersForPortfolioParams defines parameters for RemoveMembersForPortfolio.
type RemoveMembersForPortfolioParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetProjectMembershipParams defines parameters for GetProjectMembership.
type GetProjectMembershipParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// DeleteProjectStatusParams defines parameters for DeleteProjectStatus.
type DeleteProjectStatusParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetProjectStatusParams defines parameters for GetProjectStatus.
type GetProjectStatusParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetProjectsParams defines parameters for GetProjects.
type GetProjectsParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`

	// The workspace or organization to filter projects on.
	Workspace *string `json:"workspace,omitempty"`

	// The team to filter projects on.
	Team *string `json:"team,omitempty"`

	// Only return projects whose `archived` field takes on the value of this parameter.
	Archived *ArchivedQueryParam `json:"archived,omitempty"`
}

// CreateProjectJSONBody defines parameters for CreateProject.
type CreateProjectJSONBody struct {
	Data *ProjectRequest `json:"data,omitempty"`
}

// CreateProjectParams defines parameters for CreateProject.
type CreateProjectParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// DeleteProjectParams defines parameters for DeleteProject.
type DeleteProjectParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetProjectParams defines parameters for GetProject.
type GetProjectParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// UpdateProjectJSONBody defines parameters for UpdateProject.
type UpdateProjectJSONBody struct {
	Data *ProjectRequest `json:"data,omitempty"`
}

// UpdateProjectParams defines parameters for UpdateProject.
type UpdateProjectParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// AddCustomFieldSettingForProjectJSONBody defines parameters for AddCustomFieldSettingForProject.
type AddCustomFieldSettingForProjectJSONBody struct {
	Data *AddCustomFieldSettingRequest `json:"data,omitempty"`
}

// AddCustomFieldSettingForProjectParams defines parameters for AddCustomFieldSettingForProject.
type AddCustomFieldSettingForProjectParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`
}

// AddFollowersForProjectJSONBody defines parameters for AddFollowersForProject.
type AddFollowersForProjectJSONBody struct {
	Data *AddFollowersRequest `json:"data,omitempty"`
}

// AddFollowersForProjectParams defines parameters for AddFollowersForProject.
type AddFollowersForProjectParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// AddMembersForProjectJSONBody defines parameters for AddMembersForProject.
type AddMembersForProjectJSONBody struct {
	Data *AddMembersRequest `json:"data,omitempty"`
}

// AddMembersForProjectParams defines parameters for AddMembersForProject.
type AddMembersForProjectParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetCustomFieldSettingsForProjectParams defines parameters for GetCustomFieldSettingsForProject.
type GetCustomFieldSettingsForProjectParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// DuplicateProjectJSONBody defines parameters for DuplicateProject.
type DuplicateProjectJSONBody struct {
	Data *ProjectDuplicateRequest `json:"data,omitempty"`
}

// DuplicateProjectParams defines parameters for DuplicateProject.
type DuplicateProjectParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetProjectMembershipsForProjectParams defines parameters for GetProjectMembershipsForProject.
type GetProjectMembershipsForProjectParams struct {

	// A string identifying a user. This can either be the string "me", an email, or the gid of a user.
	User *UserQueryParam `json:"user,omitempty"`

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetProjectStatusesForProjectParams defines parameters for GetProjectStatusesForProject.
type GetProjectStatusesForProjectParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// CreateProjectStatusForProjectJSONBody defines parameters for CreateProjectStatusForProject.
type CreateProjectStatusForProjectJSONBody struct {
	Data *ProjectStatusRequest `json:"data,omitempty"`
}

// CreateProjectStatusForProjectParams defines parameters for CreateProjectStatusForProject.
type CreateProjectStatusForProjectParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// RemoveCustomFieldSettingForProjectJSONBody defines parameters for RemoveCustomFieldSettingForProject.
type RemoveCustomFieldSettingForProjectJSONBody struct {
	Data *RemoveCustomFieldSettingRequest `json:"data,omitempty"`
}

// RemoveCustomFieldSettingForProjectParams defines parameters for RemoveCustomFieldSettingForProject.
type RemoveCustomFieldSettingForProjectParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`
}

// RemoveFollowersForProjectJSONBody defines parameters for RemoveFollowersForProject.
type RemoveFollowersForProjectJSONBody struct {
	Data *RemoveFollowersRequest `json:"data,omitempty"`
}

// RemoveFollowersForProjectParams defines parameters for RemoveFollowersForProject.
type RemoveFollowersForProjectParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// RemoveMembersForProjectJSONBody defines parameters for RemoveMembersForProject.
type RemoveMembersForProjectJSONBody struct {
	Data *RemoveMembersRequest `json:"data,omitempty"`
}

// RemoveMembersForProjectParams defines parameters for RemoveMembersForProject.
type RemoveMembersForProjectParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetSectionsForProjectParams defines parameters for GetSectionsForProject.
type GetSectionsForProjectParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// CreateSectionForProjectJSONBody defines parameters for CreateSectionForProject.
type CreateSectionForProjectJSONBody struct {
	Data *SectionRequest `json:"data,omitempty"`
}

// CreateSectionForProjectParams defines parameters for CreateSectionForProject.
type CreateSectionForProjectParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// InsertSectionForProjectJSONBody defines parameters for InsertSectionForProject.
type InsertSectionForProjectJSONBody struct {
	Data *ProjectSectionInsertRequest `json:"data,omitempty"`
}

// InsertSectionForProjectParams defines parameters for InsertSectionForProject.
type InsertSectionForProjectParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetTaskCountsForProjectParams defines parameters for GetTaskCountsForProject.
type GetTaskCountsForProjectParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetTasksForProjectParams defines parameters for GetTasksForProject.
type GetTasksForProjectParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// DeleteSectionParams defines parameters for DeleteSection.
type DeleteSectionParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetSectionParams defines parameters for GetSection.
type GetSectionParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// UpdateSectionJSONBody defines parameters for UpdateSection.
type UpdateSectionJSONBody struct {
	Data *SectionRequest `json:"data,omitempty"`
}

// UpdateSectionParams defines parameters for UpdateSection.
type UpdateSectionParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// AddTaskForSectionJSONBody defines parameters for AddTaskForSection.
type AddTaskForSectionJSONBody struct {
	Data *SectionTaskInsertRequest `json:"data,omitempty"`
}

// AddTaskForSectionParams defines parameters for AddTaskForSection.
type AddTaskForSectionParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetTasksForSectionParams defines parameters for GetTasksForSection.
type GetTasksForSectionParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// DeleteStoryParams defines parameters for DeleteStory.
type DeleteStoryParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetStoryParams defines parameters for GetStory.
type GetStoryParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// UpdateStoryJSONBody defines parameters for UpdateStory.
type UpdateStoryJSONBody struct {
	Data *StoryRequest `json:"data,omitempty"`
}

// UpdateStoryParams defines parameters for UpdateStory.
type UpdateStoryParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetTagsParams defines parameters for GetTags.
type GetTagsParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`

	// The workspace to filter tags on.
	Workspace *string `json:"workspace,omitempty"`
}

// CreateTagJSONBody defines parameters for CreateTag.
type CreateTagJSONBody struct {
	Data *TagRequest `json:"data,omitempty"`
}

// CreateTagParams defines parameters for CreateTag.
type CreateTagParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// DeleteTagParams defines parameters for DeleteTag.
type DeleteTagParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetTagParams defines parameters for GetTag.
type GetTagParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// UpdateTagParams defines parameters for UpdateTag.
type UpdateTagParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetTasksForTagParams defines parameters for GetTasksForTag.
type GetTasksForTagParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetTasksParams defines parameters for GetTasks.
type GetTasksParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`

	// The assignee to filter tasks on.
	// *Note: If you specify `assignee`, you must also specify the `workspace` to filter on.*
	Assignee *string `json:"assignee,omitempty"`

	// The project to filter tasks on.
	Project *string `json:"project,omitempty"`

	// The section to filter tasks on.
	// *Note: Currently, this is only supported in board views.*
	Section *string `json:"section,omitempty"`

	// The workspace to filter tasks on.
	// *Note: If you specify `workspace`, you must also specify the `assignee` to filter on.*
	Workspace *string `json:"workspace,omitempty"`

	// Only return tasks that are either incomplete or that have been completed since this time.
	CompletedSince *time.Time `json:"completed_since,omitempty"`

	// Only return tasks that have been modified since the given time.
	//
	// *Note: A task is considered “modified” if any of its properties
	// change, or associations between it and other objects are modified
	// (e.g.  a task being added to a project). A task is not considered
	// modified just because another object it is associated with (e.g. a
	// subtask) is modified. Actions that count as modifying the task
	// include assigning, renaming, completing, and adding stories.*
	ModifiedSince *time.Time `json:"modified_since,omitempty"`
}

// CreateTaskJSONBody defines parameters for CreateTask.
type CreateTaskJSONBody struct {
	Data *TaskRequest `json:"data,omitempty"`
}

// CreateTaskParams defines parameters for CreateTask.
type CreateTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// DeleteTaskParams defines parameters for DeleteTask.
type DeleteTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetTaskParams defines parameters for GetTask.
type GetTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// UpdateTaskJSONBody defines parameters for UpdateTask.
type UpdateTaskJSONBody struct {
	Data *TaskRequest `json:"data,omitempty"`
}

// UpdateTaskParams defines parameters for UpdateTask.
type UpdateTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// AddDependenciesForTaskJSONBody defines parameters for AddDependenciesForTask.
type AddDependenciesForTaskJSONBody struct {
	Data *ModifyDependenciesRequest `json:"data,omitempty"`
}

// AddDependenciesForTaskParams defines parameters for AddDependenciesForTask.
type AddDependenciesForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// AddDependentsForTaskJSONBody defines parameters for AddDependentsForTask.
type AddDependentsForTaskJSONBody struct {

	// A set of dependent tasks.
	Data *ModifyDependentsRequest `json:"data,omitempty"`
}

// AddDependentsForTaskParams defines parameters for AddDependentsForTask.
type AddDependentsForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// AddFollowersForTaskJSONBody defines parameters for AddFollowersForTask.
type AddFollowersForTaskJSONBody struct {
	Data *TaskAddFollowersRequest `json:"data,omitempty"`
}

// AddFollowersForTaskParams defines parameters for AddFollowersForTask.
type AddFollowersForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// AddProjectForTaskJSONBody defines parameters for AddProjectForTask.
type AddProjectForTaskJSONBody struct {
	Data *TaskAddProjectRequest `json:"data,omitempty"`
}

// AddProjectForTaskParams defines parameters for AddProjectForTask.
type AddProjectForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// AddTagForTaskJSONBody defines parameters for AddTagForTask.
type AddTagForTaskJSONBody struct {
	Data *TaskAddTagRequest `json:"data,omitempty"`
}

// AddTagForTaskParams defines parameters for AddTagForTask.
type AddTagForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetAttachmentsForTaskParams defines parameters for GetAttachmentsForTask.
type GetAttachmentsForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// CreateAttachmentForTaskParams defines parameters for CreateAttachmentForTask.
type CreateAttachmentForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetDependenciesForTaskParams defines parameters for GetDependenciesForTask.
type GetDependenciesForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetDependentsForTaskParams defines parameters for GetDependentsForTask.
type GetDependentsForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// DuplicateTaskJSONBody defines parameters for DuplicateTask.
type DuplicateTaskJSONBody struct {
	Data *TaskDuplicateRequest `json:"data,omitempty"`
}

// DuplicateTaskParams defines parameters for DuplicateTask.
type DuplicateTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetProjectsForTaskParams defines parameters for GetProjectsForTask.
type GetProjectsForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// RemoveDependenciesForTaskJSONBody defines parameters for RemoveDependenciesForTask.
type RemoveDependenciesForTaskJSONBody struct {
	Data *ModifyDependenciesRequest `json:"data,omitempty"`
}

// RemoveDependenciesForTaskParams defines parameters for RemoveDependenciesForTask.
type RemoveDependenciesForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// RemoveDependentsForTaskJSONBody defines parameters for RemoveDependentsForTask.
type RemoveDependentsForTaskJSONBody struct {

	// A set of dependent tasks.
	Data *ModifyDependentsRequest `json:"data,omitempty"`
}

// RemoveDependentsForTaskParams defines parameters for RemoveDependentsForTask.
type RemoveDependentsForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// RemoveFollowerForTaskJSONBody defines parameters for RemoveFollowerForTask.
type RemoveFollowerForTaskJSONBody struct {
	Data *TaskRemoveFollowersRequest `json:"data,omitempty"`
}

// RemoveFollowerForTaskParams defines parameters for RemoveFollowerForTask.
type RemoveFollowerForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// RemoveProjectForTaskJSONBody defines parameters for RemoveProjectForTask.
type RemoveProjectForTaskJSONBody struct {
	Data *TaskRemoveProjectRequest `json:"data,omitempty"`
}

// RemoveProjectForTaskParams defines parameters for RemoveProjectForTask.
type RemoveProjectForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// RemoveTagForTaskJSONBody defines parameters for RemoveTagForTask.
type RemoveTagForTaskJSONBody struct {
	Data *TaskRemoveTagRequest `json:"data,omitempty"`
}

// RemoveTagForTaskParams defines parameters for RemoveTagForTask.
type RemoveTagForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// SetParentForTaskJSONBody defines parameters for SetParentForTask.
type SetParentForTaskJSONBody struct {
	Data *TaskSetParentRequest `json:"data,omitempty"`
}

// SetParentForTaskParams defines parameters for SetParentForTask.
type SetParentForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetStoriesForTaskParams defines parameters for GetStoriesForTask.
type GetStoriesForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// CreateStoryForTaskJSONBody defines parameters for CreateStoryForTask.
type CreateStoryForTaskJSONBody struct {
	Data *StoryRequest `json:"data,omitempty"`
}

// CreateStoryForTaskParams defines parameters for CreateStoryForTask.
type CreateStoryForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetSubtasksForTaskParams defines parameters for GetSubtasksForTask.
type GetSubtasksForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// CreateSubtaskForTaskJSONBody defines parameters for CreateSubtaskForTask.
type CreateSubtaskForTaskJSONBody struct {
	Data *TaskRequest `json:"data,omitempty"`
}

// CreateSubtaskForTaskParams defines parameters for CreateSubtaskForTask.
type CreateSubtaskForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetTagsForTaskParams defines parameters for GetTagsForTask.
type GetTagsForTaskParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetTeamMembershipsParams defines parameters for GetTeamMemberships.
type GetTeamMembershipsParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`

	// Globally unique identifier for the team.
	Team *string `json:"team,omitempty"`

	// A string identifying a user. This can either be the string "me", an email, or the gid of a user. This parameter must be used with the workspace parameter.
	User *string `json:"user,omitempty"`

	// Globally unique identifier for the workspace. This parameter must be used with the user parameter.
	Workspace *string `json:"workspace,omitempty"`
}

// GetTeamMembershipParams defines parameters for GetTeamMembership.
type GetTeamMembershipParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// CreateTeamJSONBody defines parameters for CreateTeam.
type CreateTeamJSONBody struct {
	Data *TeamRequest `json:"data,omitempty"`
}

// CreateTeamParams defines parameters for CreateTeam.
type CreateTeamParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetTeamParams defines parameters for GetTeam.
type GetTeamParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// AddUserForTeamJSONBody defines parameters for AddUserForTeam.
type AddUserForTeamJSONBody struct {

	// A user identification object for specification with the addUser/removeUser endpoints.
	Data *TeamAddUserRequest `json:"data,omitempty"`
}

// AddUserForTeamParams defines parameters for AddUserForTeam.
type AddUserForTeamParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetProjectsForTeamParams defines parameters for GetProjectsForTeam.
type GetProjectsForTeamParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`

	// Only return projects whose `archived` field takes on the value of this parameter.
	Archived *ArchivedQueryParam `json:"archived,omitempty"`
}

// CreateProjectForTeamJSONBody defines parameters for CreateProjectForTeam.
type CreateProjectForTeamJSONBody struct {
	Data *ProjectRequest `json:"data,omitempty"`
}

// CreateProjectForTeamParams defines parameters for CreateProjectForTeam.
type CreateProjectForTeamParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// RemoveUserForTeamJSONBody defines parameters for RemoveUserForTeam.
type RemoveUserForTeamJSONBody struct {

	// A user identification object for specification with the addUser/removeUser endpoints.
	Data *TeamRemoveUserRequest `json:"data,omitempty"`
}

// RemoveUserForTeamParams defines parameters for RemoveUserForTeam.
type RemoveUserForTeamParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetTeamMembershipsForTeamParams defines parameters for GetTeamMembershipsForTeam.
type GetTeamMembershipsForTeamParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetUsersForTeamParams defines parameters for GetUsersForTeam.
type GetUsersForTeamParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetUserTaskListParams defines parameters for GetUserTaskList.
type GetUserTaskListParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetTasksForUserTaskListParams defines parameters for GetTasksForUserTaskList.
type GetTasksForUserTaskListParams struct {

	// Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.
	CompletedSince *string `json:"completed_since,omitempty"`

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {

	// The workspace or organization ID to filter users on.
	Workspace *string `json:"workspace,omitempty"`

	// The team ID to filter users on.
	Team *string `json:"team,omitempty"`

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetUserParams defines parameters for GetUser.
type GetUserParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetFavoritesForUserParams defines parameters for GetFavoritesForUser.
type GetFavoritesForUserParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// The resource type of favorites to be returned.
	ResourceType string `json:"resource_type"`

	// The workspace in which to get favorites.
	Workspace string `json:"workspace"`
}

// GetTeamMembershipsForUserParams defines parameters for GetTeamMembershipsForUser.
type GetTeamMembershipsForUserParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`

	// Globally unique identifier for the workspace.
	Workspace string `json:"workspace"`
}

// GetTeamsForUserParams defines parameters for GetTeamsForUser.
type GetTeamsForUserParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`

	// The workspace or organization to filter teams on.
	Organization string `json:"organization"`
}

// GetUserTaskListForUserParams defines parameters for GetUserTaskListForUser.
type GetUserTaskListForUserParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// The workspace in which to get the user task list.
	Workspace string `json:"workspace"`
}

// GetWorkspaceMembershipsForUserParams defines parameters for GetWorkspaceMembershipsForUser.
type GetWorkspaceMembershipsForUserParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetWebhooksParams defines parameters for GetWebhooks.
type GetWebhooksParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`

	// The workspace to query for webhooks in.
	Workspace string `json:"workspace"`

	// Only return webhooks for the given resource.
	Resource *string `json:"resource,omitempty"`
}

// CreateWebhookJSONBody defines parameters for CreateWebhook.
type CreateWebhookJSONBody struct {
	Data *WebhookRequest `json:"data,omitempty"`
}

// CreateWebhookParams defines parameters for CreateWebhook.
type CreateWebhookParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// DeleteWebhookParams defines parameters for DeleteWebhook.
type DeleteWebhookParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetWebhookParams defines parameters for GetWebhook.
type GetWebhookParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetWorkspaceMembershipParams defines parameters for GetWorkspaceMembership.
type GetWorkspaceMembershipParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetWorkspacesParams defines parameters for GetWorkspaces.
type GetWorkspacesParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetWorkspaceParams defines parameters for GetWorkspace.
type GetWorkspaceParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// UpdateWorkspaceJSONBody defines parameters for UpdateWorkspace.
type UpdateWorkspaceJSONBody struct {
	Data *WorkspaceRequest `json:"data,omitempty"`
}

// UpdateWorkspaceParams defines parameters for UpdateWorkspace.
type UpdateWorkspaceParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// AddUserForWorkspaceJSONBody defines parameters for AddUserForWorkspace.
type AddUserForWorkspaceJSONBody struct {

	// A user identification object for specification with the addUser/removeUser endpoints.
	Data *WorkspaceAddUserRequest `json:"data,omitempty"`
}

// AddUserForWorkspaceParams defines parameters for AddUserForWorkspace.
type AddUserForWorkspaceParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetCustomFieldsForWorkspaceParams defines parameters for GetCustomFieldsForWorkspace.
type GetCustomFieldsForWorkspaceParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetProjectsForWorkspaceParams defines parameters for GetProjectsForWorkspace.
type GetProjectsForWorkspaceParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`

	// Only return projects whose `archived` field takes on the value of this parameter.
	Archived *ArchivedQueryParam `json:"archived,omitempty"`
}

// CreateProjectForWorkspaceJSONBody defines parameters for CreateProjectForWorkspace.
type CreateProjectForWorkspaceJSONBody struct {
	Data *ProjectRequest `json:"data,omitempty"`
}

// CreateProjectForWorkspaceParams defines parameters for CreateProjectForWorkspace.
type CreateProjectForWorkspaceParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// RemoveUserForWorkspaceJSONBody defines parameters for RemoveUserForWorkspace.
type RemoveUserForWorkspaceJSONBody struct {

	// A user identification object for specification with the addUser/removeUser endpoints.
	Data *WorkspaceRemoveUserRequest `json:"data,omitempty"`
}

// RemoveUserForWorkspaceParams defines parameters for RemoveUserForWorkspace.
type RemoveUserForWorkspaceParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetTagsForWorkspaceParams defines parameters for GetTagsForWorkspace.
type GetTagsForWorkspaceParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// CreateTagForWorkspaceJSONBody defines parameters for CreateTagForWorkspace.
type CreateTagForWorkspaceJSONBody struct {
	Data *TagResponse `json:"data,omitempty"`
}

// CreateTagForWorkspaceParams defines parameters for CreateTagForWorkspace.
type CreateTagForWorkspaceParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// SearchTasksForWorkspaceParams defines parameters for SearchTasksForWorkspace.
type SearchTasksForWorkspaceParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Performs full-text search on both task name and description
	Text *string `json:"text,omitempty"`

	// Filters results by the task's resource_subtype
	ResourceSubtype *string `json:"resource_subtype,omitempty"`

	// Comma-separated list of user identifiers
	AssigneeAny *string `json:"assignee.any,omitempty"`

	// Comma-separated list of user identifiers
	AssigneeNot *string `json:"assignee.not,omitempty"`

	// Comma-separated list of portfolio IDs
	PortfoliosAny *string `json:"portfolios.any,omitempty"`

	// Comma-separated list of project IDs
	ProjectsAny *string `json:"projects.any,omitempty"`

	// Comma-separated list of project IDs
	ProjectsNot *string `json:"projects.not,omitempty"`

	// Comma-separated list of project IDs
	ProjectsAll *string `json:"projects.all,omitempty"`

	// Comma-separated list of section or column IDs
	SectionsAny *string `json:"sections.any,omitempty"`

	// Comma-separated list of section or column IDs
	SectionsNot *string `json:"sections.not,omitempty"`

	// Comma-separated list of section or column IDs
	SectionsAll *string `json:"sections.all,omitempty"`

	// Comma-separated list of tag IDs
	TagsAny *string `json:"tags.any,omitempty"`

	// Comma-separated list of tag IDs
	TagsNot *string `json:"tags.not,omitempty"`

	// Comma-separated list of tag IDs
	TagsAll *string `json:"tags.all,omitempty"`

	// Comma-separated list of team IDs
	TeamsAny *string `json:"teams.any,omitempty"`

	// Comma-separated list of user identifiers
	FollowersAny *string `json:"followers.any,omitempty"`

	// Comma-separated list of user identifiers
	FollowersNot *string `json:"followers.not,omitempty"`

	// Comma-separated list of user identifiers
	CreatedByAny *string `json:"created_by.any,omitempty"`

	// Comma-separated list of user identifiers
	CreatedByNot *string `json:"created_by.not,omitempty"`

	// Comma-separated list of user identifiers
	AssignedByAny *string `json:"assigned_by.any,omitempty"`

	// Comma-separated list of user identifiers
	AssignedByNot *string `json:"assigned_by.not,omitempty"`

	// Comma-separated list of user identifiers
	LikedByAny *string `json:"liked_by.any,omitempty"`

	// Comma-separated list of user identifiers
	LikedByNot *string `json:"liked_by.not,omitempty"`

	// Comma-separated list of user identifiers
	CommentedOnByAny *string `json:"commented_on_by.any,omitempty"`

	// Comma-separated list of user identifiers
	CommentedOnByNot *string `json:"commented_on_by.not,omitempty"`

	// ISO 8601 date string
	DueOnBefore *openapi_types.Date `json:"due_on.before,omitempty"`

	// ISO 8601 date string
	DueOnAfter *openapi_types.Date `json:"due_on.after,omitempty"`

	// ISO 8601 date string or `null`
	DueOn *openapi_types.Date `json:"due_on,omitempty"`

	// ISO 8601 datetime string
	DueAtBefore *time.Time `json:"due_at.before,omitempty"`

	// ISO 8601 datetime string
	DueAtAfter *time.Time `json:"due_at.after,omitempty"`

	// ISO 8601 date string
	StartOnBefore *openapi_types.Date `json:"start_on.before,omitempty"`

	// ISO 8601 date string
	StartOnAfter *openapi_types.Date `json:"start_on.after,omitempty"`

	// ISO 8601 date string or `null`
	StartOn *openapi_types.Date `json:"start_on,omitempty"`

	// ISO 8601 date string
	CreatedOnBefore *openapi_types.Date `json:"created_on.before,omitempty"`

	// ISO 8601 date string
	CreatedOnAfter *openapi_types.Date `json:"created_on.after,omitempty"`

	// ISO 8601 date string or `null`
	CreatedOn *openapi_types.Date `json:"created_on,omitempty"`

	// ISO 8601 datetime string
	CreatedAtBefore *time.Time `json:"created_at.before,omitempty"`

	// ISO 8601 datetime string
	CreatedAtAfter *time.Time `json:"created_at.after,omitempty"`

	// ISO 8601 date string
	CompletedOnBefore *openapi_types.Date `json:"completed_on.before,omitempty"`

	// ISO 8601 date string
	CompletedOnAfter *openapi_types.Date `json:"completed_on.after,omitempty"`

	// ISO 8601 date string or `null`
	CompletedOn *openapi_types.Date `json:"completed_on,omitempty"`

	// ISO 8601 datetime string
	CompletedAtBefore *time.Time `json:"completed_at.before,omitempty"`

	// ISO 8601 datetime string
	CompletedAtAfter *time.Time `json:"completed_at.after,omitempty"`

	// ISO 8601 date string
	ModifiedOnBefore *openapi_types.Date `json:"modified_on.before,omitempty"`

	// ISO 8601 date string
	ModifiedOnAfter *openapi_types.Date `json:"modified_on.after,omitempty"`

	// ISO 8601 date string or `null`
	ModifiedOn *openapi_types.Date `json:"modified_on,omitempty"`

	// ISO 8601 datetime string
	ModifiedAtBefore *time.Time `json:"modified_at.before,omitempty"`

	// ISO 8601 datetime string
	ModifiedAtAfter *time.Time `json:"modified_at.after,omitempty"`

	// Filter to incomplete tasks with dependents
	IsBlocking *bool `json:"is_blocking,omitempty"`

	// Filter to tasks with incomplete dependencies
	IsBlocked *bool `json:"is_blocked,omitempty"`

	// Filter to tasks with attachments
	HasAttachment *bool `json:"has_attachment,omitempty"`

	// Filter to completed tasks
	Completed *bool `json:"completed,omitempty"`

	// Filter to subtasks
	IsSubtask *bool `json:"is_subtask,omitempty"`

	// One of `due_date`, `created_at`, `completed_at`, `likes`, or `modified_at`, defaults to `modified_at`
	SortBy *string `json:"sort_by,omitempty"`

	// Default `false`
	SortAscending *bool `json:"sort_ascending,omitempty"`
}

// TypeaheadForWorkspaceParams defines parameters for TypeaheadForWorkspace.
type TypeaheadForWorkspaceParams struct {

	// The type of values the typeahead should return. You can choose from one of the following: `custom_field`, `project`, `portfolio`, `tag`, `task`, and `user`. Note that unlike in the names of endpoints, the types listed here are in singular form (e.g. `task`). Using multiple types is not yet supported.
	ResourceType string `json:"resource_type"`

	// *Deprecated: new integrations should prefer the resource_type field.*
	Type *string `json:"type,omitempty"`

	// The string that will be used to search for relevant objects. If an empty string is passed in, the API will currently return an empty result set.
	Query *string `json:"query,omitempty"`

	// The number of results to return. The default is 20 if this parameter is omitted, with a minimum of 1 and a maximum of 100. If there are fewer results found than requested, all will be returned.
	Count *int `json:"count,omitempty"`

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`
}

// GetUsersForWorkspaceParams defines parameters for GetUsersForWorkspace.
type GetUsersForWorkspaceParams struct {

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// GetWorkspaceMembershipsForWorkspaceParams defines parameters for GetWorkspaceMembershipsForWorkspace.
type GetWorkspaceMembershipsForWorkspaceParams struct {

	// A string identifying a user. This can either be the string "me", an email, or the gid of a user.
	User *UserQueryParam `json:"user,omitempty"`

	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *Pretty `json:"opt_pretty,omitempty"`

	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields *Fields `json:"opt_fields,omitempty"`

	// Results per page.
	// The number of objects to return per page. The value must be between 1 and 100.
	Limit *Limit `json:"limit,omitempty"`

	// Offset token.
	// An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
	// 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
	Offset *Offset `json:"offset,omitempty"`
}

// CreateBatchRequestJSONRequestBody defines body for CreateBatchRequest for application/json ContentType.
type CreateBatchRequestJSONRequestBody CreateBatchRequestJSONBody

// CreateCustomFieldJSONRequestBody defines body for CreateCustomField for application/json ContentType.
type CreateCustomFieldJSONRequestBody CreateCustomFieldJSONBody

// UpdateCustomFieldJSONRequestBody defines body for UpdateCustomField for application/json ContentType.
type UpdateCustomFieldJSONRequestBody UpdateCustomFieldJSONBody

// CreateEnumOptionForCustomFieldJSONRequestBody defines body for CreateEnumOptionForCustomField for application/json ContentType.
type CreateEnumOptionForCustomFieldJSONRequestBody CreateEnumOptionForCustomFieldJSONBody

// InsertEnumOptionForCustomFieldJSONRequestBody defines body for InsertEnumOptionForCustomField for application/json ContentType.
type InsertEnumOptionForCustomFieldJSONRequestBody InsertEnumOptionForCustomFieldJSONBody

// UpdateEnumOptionJSONRequestBody defines body for UpdateEnumOption for application/json ContentType.
type UpdateEnumOptionJSONRequestBody UpdateEnumOptionJSONBody

// UpdateGoalJSONRequestBody defines body for UpdateGoal for application/json ContentType.
type UpdateGoalJSONRequestBody UpdateGoalJSONBody

// AddFollowersJSONRequestBody defines body for AddFollowers for application/json ContentType.
type AddFollowersJSONRequestBody AddFollowersJSONBody

// AddSubgoalJSONRequestBody defines body for AddSubgoal for application/json ContentType.
type AddSubgoalJSONRequestBody AddSubgoalJSONBody

// AddSupportingWorkForGoalJSONRequestBody defines body for AddSupportingWorkForGoal for application/json ContentType.
type AddSupportingWorkForGoalJSONRequestBody AddSupportingWorkForGoalJSONBody

// RemoveFollowersJSONRequestBody defines body for RemoveFollowers for application/json ContentType.
type RemoveFollowersJSONRequestBody RemoveFollowersJSONBody

// RemoveSubgoalJSONRequestBody defines body for RemoveSubgoal for application/json ContentType.
type RemoveSubgoalJSONRequestBody RemoveSubgoalJSONBody

// RemoveSupportingWorkForGoalJSONRequestBody defines body for RemoveSupportingWorkForGoal for application/json ContentType.
type RemoveSupportingWorkForGoalJSONRequestBody RemoveSupportingWorkForGoalJSONBody

// CreateGoalMetricJSONRequestBody defines body for CreateGoalMetric for application/json ContentType.
type CreateGoalMetricJSONRequestBody CreateGoalMetricJSONBody

// UpdateGoalMetricJSONRequestBody defines body for UpdateGoalMetric for application/json ContentType.
type UpdateGoalMetricJSONRequestBody UpdateGoalMetricJSONBody

// CreateOrganizationExportJSONRequestBody defines body for CreateOrganizationExport for application/json ContentType.
type CreateOrganizationExportJSONRequestBody CreateOrganizationExportJSONBody

// CreatePortfolioJSONRequestBody defines body for CreatePortfolio for application/json ContentType.
type CreatePortfolioJSONRequestBody CreatePortfolioJSONBody

// UpdatePortfolioJSONRequestBody defines body for UpdatePortfolio for application/json ContentType.
type UpdatePortfolioJSONRequestBody UpdatePortfolioJSONBody

// AddCustomFieldSettingForPortfolioJSONRequestBody defines body for AddCustomFieldSettingForPortfolio for application/json ContentType.
type AddCustomFieldSettingForPortfolioJSONRequestBody AddCustomFieldSettingForPortfolioJSONBody

// AddItemForPortfolioJSONRequestBody defines body for AddItemForPortfolio for application/json ContentType.
type AddItemForPortfolioJSONRequestBody AddItemForPortfolioJSONBody

// AddMembersForPortfolioJSONRequestBody defines body for AddMembersForPortfolio for application/json ContentType.
type AddMembersForPortfolioJSONRequestBody AddMembersForPortfolioJSONBody

// RemoveCustomFieldSettingForPortfolioJSONRequestBody defines body for RemoveCustomFieldSettingForPortfolio for application/json ContentType.
type RemoveCustomFieldSettingForPortfolioJSONRequestBody RemoveCustomFieldSettingForPortfolioJSONBody

// RemoveItemForPortfolioJSONRequestBody defines body for RemoveItemForPortfolio for application/json ContentType.
type RemoveItemForPortfolioJSONRequestBody RemoveItemForPortfolioJSONBody

// RemoveMembersForPortfolioJSONRequestBody defines body for RemoveMembersForPortfolio for application/json ContentType.
type RemoveMembersForPortfolioJSONRequestBody RemoveMembersForPortfolioJSONBody

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody CreateProjectJSONBody

// UpdateProjectJSONRequestBody defines body for UpdateProject for application/json ContentType.
type UpdateProjectJSONRequestBody UpdateProjectJSONBody

// AddCustomFieldSettingForProjectJSONRequestBody defines body for AddCustomFieldSettingForProject for application/json ContentType.
type AddCustomFieldSettingForProjectJSONRequestBody AddCustomFieldSettingForProjectJSONBody

// AddFollowersForProjectJSONRequestBody defines body for AddFollowersForProject for application/json ContentType.
type AddFollowersForProjectJSONRequestBody AddFollowersForProjectJSONBody

// AddMembersForProjectJSONRequestBody defines body for AddMembersForProject for application/json ContentType.
type AddMembersForProjectJSONRequestBody AddMembersForProjectJSONBody

// DuplicateProjectJSONRequestBody defines body for DuplicateProject for application/json ContentType.
type DuplicateProjectJSONRequestBody DuplicateProjectJSONBody

// CreateProjectStatusForProjectJSONRequestBody defines body for CreateProjectStatusForProject for application/json ContentType.
type CreateProjectStatusForProjectJSONRequestBody CreateProjectStatusForProjectJSONBody

// RemoveCustomFieldSettingForProjectJSONRequestBody defines body for RemoveCustomFieldSettingForProject for application/json ContentType.
type RemoveCustomFieldSettingForProjectJSONRequestBody RemoveCustomFieldSettingForProjectJSONBody

// RemoveFollowersForProjectJSONRequestBody defines body for RemoveFollowersForProject for application/json ContentType.
type RemoveFollowersForProjectJSONRequestBody RemoveFollowersForProjectJSONBody

// RemoveMembersForProjectJSONRequestBody defines body for RemoveMembersForProject for application/json ContentType.
type RemoveMembersForProjectJSONRequestBody RemoveMembersForProjectJSONBody

// CreateSectionForProjectJSONRequestBody defines body for CreateSectionForProject for application/json ContentType.
type CreateSectionForProjectJSONRequestBody CreateSectionForProjectJSONBody

// InsertSectionForProjectJSONRequestBody defines body for InsertSectionForProject for application/json ContentType.
type InsertSectionForProjectJSONRequestBody InsertSectionForProjectJSONBody

// UpdateSectionJSONRequestBody defines body for UpdateSection for application/json ContentType.
type UpdateSectionJSONRequestBody UpdateSectionJSONBody

// AddTaskForSectionJSONRequestBody defines body for AddTaskForSection for application/json ContentType.
type AddTaskForSectionJSONRequestBody AddTaskForSectionJSONBody

// UpdateStoryJSONRequestBody defines body for UpdateStory for application/json ContentType.
type UpdateStoryJSONRequestBody UpdateStoryJSONBody

// CreateTagJSONRequestBody defines body for CreateTag for application/json ContentType.
type CreateTagJSONRequestBody CreateTagJSONBody

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody CreateTaskJSONBody

// UpdateTaskJSONRequestBody defines body for UpdateTask for application/json ContentType.
type UpdateTaskJSONRequestBody UpdateTaskJSONBody

// AddDependenciesForTaskJSONRequestBody defines body for AddDependenciesForTask for application/json ContentType.
type AddDependenciesForTaskJSONRequestBody AddDependenciesForTaskJSONBody

// AddDependentsForTaskJSONRequestBody defines body for AddDependentsForTask for application/json ContentType.
type AddDependentsForTaskJSONRequestBody AddDependentsForTaskJSONBody

// AddFollowersForTaskJSONRequestBody defines body for AddFollowersForTask for application/json ContentType.
type AddFollowersForTaskJSONRequestBody AddFollowersForTaskJSONBody

// AddProjectForTaskJSONRequestBody defines body for AddProjectForTask for application/json ContentType.
type AddProjectForTaskJSONRequestBody AddProjectForTaskJSONBody

// AddTagForTaskJSONRequestBody defines body for AddTagForTask for application/json ContentType.
type AddTagForTaskJSONRequestBody AddTagForTaskJSONBody

// DuplicateTaskJSONRequestBody defines body for DuplicateTask for application/json ContentType.
type DuplicateTaskJSONRequestBody DuplicateTaskJSONBody

// RemoveDependenciesForTaskJSONRequestBody defines body for RemoveDependenciesForTask for application/json ContentType.
type RemoveDependenciesForTaskJSONRequestBody RemoveDependenciesForTaskJSONBody

// RemoveDependentsForTaskJSONRequestBody defines body for RemoveDependentsForTask for application/json ContentType.
type RemoveDependentsForTaskJSONRequestBody RemoveDependentsForTaskJSONBody

// RemoveFollowerForTaskJSONRequestBody defines body for RemoveFollowerForTask for application/json ContentType.
type RemoveFollowerForTaskJSONRequestBody RemoveFollowerForTaskJSONBody

// RemoveProjectForTaskJSONRequestBody defines body for RemoveProjectForTask for application/json ContentType.
type RemoveProjectForTaskJSONRequestBody RemoveProjectForTaskJSONBody

// RemoveTagForTaskJSONRequestBody defines body for RemoveTagForTask for application/json ContentType.
type RemoveTagForTaskJSONRequestBody RemoveTagForTaskJSONBody

// SetParentForTaskJSONRequestBody defines body for SetParentForTask for application/json ContentType.
type SetParentForTaskJSONRequestBody SetParentForTaskJSONBody

// CreateStoryForTaskJSONRequestBody defines body for CreateStoryForTask for application/json ContentType.
type CreateStoryForTaskJSONRequestBody CreateStoryForTaskJSONBody

// CreateSubtaskForTaskJSONRequestBody defines body for CreateSubtaskForTask for application/json ContentType.
type CreateSubtaskForTaskJSONRequestBody CreateSubtaskForTaskJSONBody

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody CreateTeamJSONBody

// AddUserForTeamJSONRequestBody defines body for AddUserForTeam for application/json ContentType.
type AddUserForTeamJSONRequestBody AddUserForTeamJSONBody

// CreateProjectForTeamJSONRequestBody defines body for CreateProjectForTeam for application/json ContentType.
type CreateProjectForTeamJSONRequestBody CreateProjectForTeamJSONBody

// RemoveUserForTeamJSONRequestBody defines body for RemoveUserForTeam for application/json ContentType.
type RemoveUserForTeamJSONRequestBody RemoveUserForTeamJSONBody

// CreateWebhookJSONRequestBody defines body for CreateWebhook for application/json ContentType.
type CreateWebhookJSONRequestBody CreateWebhookJSONBody

// UpdateWorkspaceJSONRequestBody defines body for UpdateWorkspace for application/json ContentType.
type UpdateWorkspaceJSONRequestBody UpdateWorkspaceJSONBody

// AddUserForWorkspaceJSONRequestBody defines body for AddUserForWorkspace for application/json ContentType.
type AddUserForWorkspaceJSONRequestBody AddUserForWorkspaceJSONBody

// CreateProjectForWorkspaceJSONRequestBody defines body for CreateProjectForWorkspace for application/json ContentType.
type CreateProjectForWorkspaceJSONRequestBody CreateProjectForWorkspaceJSONBody

// RemoveUserForWorkspaceJSONRequestBody defines body for RemoveUserForWorkspace for application/json ContentType.
type RemoveUserForWorkspaceJSONRequestBody RemoveUserForWorkspaceJSONBody

// CreateTagForWorkspaceJSONRequestBody defines body for CreateTagForWorkspace for application/json ContentType.
type CreateTagForWorkspaceJSONRequestBody CreateTagForWorkspaceJSONBody

// Getter for additional properties for ProjectRequest_CustomFields. Returns the specified
// element and whether it was found
func (a ProjectRequest_CustomFields) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProjectRequest_CustomFields
func (a *ProjectRequest_CustomFields) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProjectRequest_CustomFields to handle AdditionalProperties
func (a *ProjectRequest_CustomFields) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProjectRequest_CustomFields to handle AdditionalProperties
func (a ProjectRequest_CustomFields) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TaskRequest_CustomFields. Returns the specified
// element and whether it was found
func (a TaskRequest_CustomFields) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TaskRequest_CustomFields
func (a *TaskRequest_CustomFields) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TaskRequest_CustomFields to handle AdditionalProperties
func (a *TaskRequest_CustomFields) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TaskRequest_CustomFields to handle AdditionalProperties
func (a TaskRequest_CustomFields) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
