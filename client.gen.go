// Package oasana provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package oasana

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteAttachment request
	DeleteAttachment(ctx context.Context, attachmentGid AttachmentPathGid, params *DeleteAttachmentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAttachment request
	GetAttachment(ctx context.Context, attachmentGid AttachmentPathGid, params *GetAttachmentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBatchRequest request  with any body
	CreateBatchRequestWithBody(ctx context.Context, params *CreateBatchRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBatchRequest(ctx context.Context, params *CreateBatchRequestParams, body CreateBatchRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomField request  with any body
	CreateCustomFieldWithBody(ctx context.Context, params *CreateCustomFieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCustomField(ctx context.Context, params *CreateCustomFieldParams, body CreateCustomFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomField request
	DeleteCustomField(ctx context.Context, customFieldGid CustomFieldPathGid, params *DeleteCustomFieldParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomField request
	GetCustomField(ctx context.Context, customFieldGid CustomFieldPathGid, params *GetCustomFieldParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomField request  with any body
	UpdateCustomFieldWithBody(ctx context.Context, customFieldGid CustomFieldPathGid, params *UpdateCustomFieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCustomField(ctx context.Context, customFieldGid CustomFieldPathGid, params *UpdateCustomFieldParams, body UpdateCustomFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnumOptionForCustomField request  with any body
	CreateEnumOptionForCustomFieldWithBody(ctx context.Context, customFieldGid CustomFieldPathGid, params *CreateEnumOptionForCustomFieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEnumOptionForCustomField(ctx context.Context, customFieldGid CustomFieldPathGid, params *CreateEnumOptionForCustomFieldParams, body CreateEnumOptionForCustomFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsertEnumOptionForCustomField request  with any body
	InsertEnumOptionForCustomFieldWithBody(ctx context.Context, customFieldGid CustomFieldPathGid, params *InsertEnumOptionForCustomFieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsertEnumOptionForCustomField(ctx context.Context, customFieldGid CustomFieldPathGid, params *InsertEnumOptionForCustomFieldParams, body InsertEnumOptionForCustomFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEnumOption request  with any body
	UpdateEnumOptionWithBody(ctx context.Context, enumOptionGid string, params *UpdateEnumOptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEnumOption(ctx context.Context, enumOptionGid string, params *UpdateEnumOptionParams, body UpdateEnumOptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEvents request
	GetEvents(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGoals request
	GetGoals(ctx context.Context, params *GetGoalsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGoal request
	DeleteGoal(ctx context.Context, goalGid GoalPathGid, params *DeleteGoalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGoal request
	GetGoal(ctx context.Context, goalGid GoalPathGid, params *GetGoalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateGoal request  with any body
	UpdateGoalWithBody(ctx context.Context, goalGid GoalPathGid, params *UpdateGoalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateGoal(ctx context.Context, goalGid GoalPathGid, params *UpdateGoalParams, body UpdateGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddFollowers request  with any body
	AddFollowersWithBody(ctx context.Context, goalGid GoalPathGid, params *AddFollowersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddFollowers(ctx context.Context, goalGid GoalPathGid, params *AddFollowersParams, body AddFollowersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddSubgoal request  with any body
	AddSubgoalWithBody(ctx context.Context, goalGid GoalPathGid, params *AddSubgoalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddSubgoal(ctx context.Context, goalGid GoalPathGid, params *AddSubgoalParams, body AddSubgoalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddSupportingWorkForGoal request  with any body
	AddSupportingWorkForGoalWithBody(ctx context.Context, goalGid GoalPathGid, params *AddSupportingWorkForGoalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddSupportingWorkForGoal(ctx context.Context, goalGid GoalPathGid, params *AddSupportingWorkForGoalParams, body AddSupportingWorkForGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetParentGoalsForGoal request
	GetParentGoalsForGoal(ctx context.Context, goalGid GoalPathGid, params *GetParentGoalsForGoalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveFollowers request  with any body
	RemoveFollowersWithBody(ctx context.Context, goalGid GoalPathGid, params *RemoveFollowersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveFollowers(ctx context.Context, goalGid GoalPathGid, params *RemoveFollowersParams, body RemoveFollowersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveSubgoal request  with any body
	RemoveSubgoalWithBody(ctx context.Context, goalGid GoalPathGid, params *RemoveSubgoalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveSubgoal(ctx context.Context, goalGid GoalPathGid, params *RemoveSubgoalParams, body RemoveSubgoalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveSupportingWorkForGoal request  with any body
	RemoveSupportingWorkForGoalWithBody(ctx context.Context, goalGid GoalPathGid, params *RemoveSupportingWorkForGoalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveSupportingWorkForGoal(ctx context.Context, goalGid GoalPathGid, params *RemoveSupportingWorkForGoalParams, body RemoveSupportingWorkForGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGoalMetric request  with any body
	CreateGoalMetricWithBody(ctx context.Context, goalGid GoalPathGid, params *CreateGoalMetricParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGoalMetric(ctx context.Context, goalGid GoalPathGid, params *CreateGoalMetricParams, body CreateGoalMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateGoalMetric request  with any body
	UpdateGoalMetricWithBody(ctx context.Context, goalGid GoalPathGid, params *UpdateGoalMetricParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateGoalMetric(ctx context.Context, goalGid GoalPathGid, params *UpdateGoalMetricParams, body UpdateGoalMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubgoalsForGoal request
	GetSubgoalsForGoal(ctx context.Context, goalGid GoalPathGid, params *GetSubgoalsForGoalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SupportingWork request
	SupportingWork(ctx context.Context, goalGid GoalPathGid, params *SupportingWorkParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJob request
	GetJob(ctx context.Context, jobGid JobPathGid, params *GetJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationExport request  with any body
	CreateOrganizationExportWithBody(ctx context.Context, params *CreateOrganizationExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganizationExport(ctx context.Context, params *CreateOrganizationExportParams, body CreateOrganizationExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationExport request
	GetOrganizationExport(ctx context.Context, organizationExportGid OrganizationExportPathGid, params *GetOrganizationExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamsForOrganization request
	GetTeamsForOrganization(ctx context.Context, workspaceGid WorkspacePathGid, params *GetTeamsForOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPortfolioMemberships request
	GetPortfolioMemberships(ctx context.Context, params *GetPortfolioMembershipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPortfolioMembership request
	GetPortfolioMembership(ctx context.Context, portfolioMembershipGid PortfolioMembershipPathGid, params *GetPortfolioMembershipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPortfolios request
	GetPortfolios(ctx context.Context, params *GetPortfoliosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePortfolio request  with any body
	CreatePortfolioWithBody(ctx context.Context, params *CreatePortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePortfolio(ctx context.Context, params *CreatePortfolioParams, body CreatePortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePortfolio request
	DeletePortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *DeletePortfolioParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPortfolio request
	GetPortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *GetPortfolioParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePortfolio request  with any body
	UpdatePortfolioWithBody(ctx context.Context, portfolioGid PortfolioPathGid, params *UpdatePortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *UpdatePortfolioParams, body UpdatePortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCustomFieldSettingForPortfolio request  with any body
	AddCustomFieldSettingForPortfolioWithBody(ctx context.Context, portfolioGid PortfolioPathGid, params *AddCustomFieldSettingForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCustomFieldSettingForPortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *AddCustomFieldSettingForPortfolioParams, body AddCustomFieldSettingForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddItemForPortfolio request  with any body
	AddItemForPortfolioWithBody(ctx context.Context, portfolioGid PortfolioPathGid, params *AddItemForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddItemForPortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *AddItemForPortfolioParams, body AddItemForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddMembersForPortfolio request  with any body
	AddMembersForPortfolioWithBody(ctx context.Context, portfolioGid PortfolioPathGid, params *AddMembersForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddMembersForPortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *AddMembersForPortfolioParams, body AddMembersForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomFieldSettingsForPortfolio request
	GetCustomFieldSettingsForPortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *GetCustomFieldSettingsForPortfolioParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetItemsForPortfolio request
	GetItemsForPortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *GetItemsForPortfolioParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPortfolioMembershipsForPortfolio request
	GetPortfolioMembershipsForPortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *GetPortfolioMembershipsForPortfolioParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveCustomFieldSettingForPortfolio request  with any body
	RemoveCustomFieldSettingForPortfolioWithBody(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveCustomFieldSettingForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveCustomFieldSettingForPortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveCustomFieldSettingForPortfolioParams, body RemoveCustomFieldSettingForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveItemForPortfolio request  with any body
	RemoveItemForPortfolioWithBody(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveItemForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveItemForPortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveItemForPortfolioParams, body RemoveItemForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveMembersForPortfolio request  with any body
	RemoveMembersForPortfolioWithBody(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveMembersForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveMembersForPortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveMembersForPortfolioParams, body RemoveMembersForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectMembership request
	GetProjectMembership(ctx context.Context, projectMembershipGid ProjectMembershipPathGid, params *GetProjectMembershipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProjectStatus request
	DeleteProjectStatus(ctx context.Context, projectStatusGid ProjectStatusPathGid, params *DeleteProjectStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectStatus request
	GetProjectStatus(ctx context.Context, projectStatusGid ProjectStatusPathGid, params *GetProjectStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjects request
	GetProjects(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProject request  with any body
	CreateProjectWithBody(ctx context.Context, params *CreateProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProject(ctx context.Context, params *CreateProjectParams, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProject request
	DeleteProject(ctx context.Context, projectGid ProjectPathGid, params *DeleteProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProject request
	GetProject(ctx context.Context, projectGid ProjectPathGid, params *GetProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProject request  with any body
	UpdateProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *UpdateProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProject(ctx context.Context, projectGid ProjectPathGid, params *UpdateProjectParams, body UpdateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCustomFieldSettingForProject request  with any body
	AddCustomFieldSettingForProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *AddCustomFieldSettingForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCustomFieldSettingForProject(ctx context.Context, projectGid ProjectPathGid, params *AddCustomFieldSettingForProjectParams, body AddCustomFieldSettingForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddFollowersForProject request  with any body
	AddFollowersForProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *AddFollowersForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddFollowersForProject(ctx context.Context, projectGid ProjectPathGid, params *AddFollowersForProjectParams, body AddFollowersForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddMembersForProject request  with any body
	AddMembersForProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *AddMembersForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddMembersForProject(ctx context.Context, projectGid ProjectPathGid, params *AddMembersForProjectParams, body AddMembersForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomFieldSettingsForProject request
	GetCustomFieldSettingsForProject(ctx context.Context, projectGid ProjectPathGid, params *GetCustomFieldSettingsForProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DuplicateProject request  with any body
	DuplicateProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *DuplicateProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DuplicateProject(ctx context.Context, projectGid ProjectPathGid, params *DuplicateProjectParams, body DuplicateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectMembershipsForProject request
	GetProjectMembershipsForProject(ctx context.Context, projectGid ProjectPathGid, params *GetProjectMembershipsForProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectStatusesForProject request
	GetProjectStatusesForProject(ctx context.Context, projectGid ProjectPathGid, params *GetProjectStatusesForProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProjectStatusForProject request  with any body
	CreateProjectStatusForProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *CreateProjectStatusForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProjectStatusForProject(ctx context.Context, projectGid ProjectPathGid, params *CreateProjectStatusForProjectParams, body CreateProjectStatusForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveCustomFieldSettingForProject request  with any body
	RemoveCustomFieldSettingForProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *RemoveCustomFieldSettingForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveCustomFieldSettingForProject(ctx context.Context, projectGid ProjectPathGid, params *RemoveCustomFieldSettingForProjectParams, body RemoveCustomFieldSettingForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveFollowersForProject request  with any body
	RemoveFollowersForProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *RemoveFollowersForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveFollowersForProject(ctx context.Context, projectGid ProjectPathGid, params *RemoveFollowersForProjectParams, body RemoveFollowersForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveMembersForProject request  with any body
	RemoveMembersForProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *RemoveMembersForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveMembersForProject(ctx context.Context, projectGid ProjectPathGid, params *RemoveMembersForProjectParams, body RemoveMembersForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSectionsForProject request
	GetSectionsForProject(ctx context.Context, projectGid ProjectPathGid, params *GetSectionsForProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSectionForProject request  with any body
	CreateSectionForProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *CreateSectionForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSectionForProject(ctx context.Context, projectGid ProjectPathGid, params *CreateSectionForProjectParams, body CreateSectionForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsertSectionForProject request  with any body
	InsertSectionForProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *InsertSectionForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsertSectionForProject(ctx context.Context, projectGid ProjectPathGid, params *InsertSectionForProjectParams, body InsertSectionForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskCountsForProject request
	GetTaskCountsForProject(ctx context.Context, projectGid ProjectPathGid, params *GetTaskCountsForProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTasksForProject request
	GetTasksForProject(ctx context.Context, projectGid ProjectPathGid, params *GetTasksForProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSection request
	DeleteSection(ctx context.Context, sectionGid SectionPathGid, params *DeleteSectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSection request
	GetSection(ctx context.Context, sectionGid SectionPathGid, params *GetSectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSection request  with any body
	UpdateSectionWithBody(ctx context.Context, sectionGid SectionPathGid, params *UpdateSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSection(ctx context.Context, sectionGid SectionPathGid, params *UpdateSectionParams, body UpdateSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddTaskForSection request  with any body
	AddTaskForSectionWithBody(ctx context.Context, sectionGid SectionPathGid, params *AddTaskForSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddTaskForSection(ctx context.Context, sectionGid SectionPathGid, params *AddTaskForSectionParams, body AddTaskForSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTasksForSection request
	GetTasksForSection(ctx context.Context, sectionGid SectionPathGid, params *GetTasksForSectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStory request
	DeleteStory(ctx context.Context, storyGid StoryPathGid, params *DeleteStoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStory request
	GetStory(ctx context.Context, storyGid StoryPathGid, params *GetStoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStory request  with any body
	UpdateStoryWithBody(ctx context.Context, storyGid StoryPathGid, params *UpdateStoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateStory(ctx context.Context, storyGid StoryPathGid, params *UpdateStoryParams, body UpdateStoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTags request
	GetTags(ctx context.Context, params *GetTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTag request  with any body
	CreateTagWithBody(ctx context.Context, params *CreateTagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTag(ctx context.Context, params *CreateTagParams, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTag request
	DeleteTag(ctx context.Context, tagGid TagPathGid, params *DeleteTagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTag request
	GetTag(ctx context.Context, tagGid TagPathGid, params *GetTagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTag request
	UpdateTag(ctx context.Context, tagGid TagPathGid, params *UpdateTagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTasksForTag request
	GetTasksForTag(ctx context.Context, tagGid TagPathGid, params *GetTasksForTagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTasks request
	GetTasks(ctx context.Context, params *GetTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTask request  with any body
	CreateTaskWithBody(ctx context.Context, params *CreateTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTask(ctx context.Context, params *CreateTaskParams, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTask request
	DeleteTask(ctx context.Context, taskGid TaskPathGid, params *DeleteTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTask request
	GetTask(ctx context.Context, taskGid TaskPathGid, params *GetTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTask request  with any body
	UpdateTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *UpdateTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTask(ctx context.Context, taskGid TaskPathGid, params *UpdateTaskParams, body UpdateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddDependenciesForTask request  with any body
	AddDependenciesForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *AddDependenciesForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddDependenciesForTask(ctx context.Context, taskGid TaskPathGid, params *AddDependenciesForTaskParams, body AddDependenciesForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddDependentsForTask request  with any body
	AddDependentsForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *AddDependentsForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddDependentsForTask(ctx context.Context, taskGid TaskPathGid, params *AddDependentsForTaskParams, body AddDependentsForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddFollowersForTask request  with any body
	AddFollowersForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *AddFollowersForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddFollowersForTask(ctx context.Context, taskGid TaskPathGid, params *AddFollowersForTaskParams, body AddFollowersForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddProjectForTask request  with any body
	AddProjectForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *AddProjectForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddProjectForTask(ctx context.Context, taskGid TaskPathGid, params *AddProjectForTaskParams, body AddProjectForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddTagForTask request  with any body
	AddTagForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *AddTagForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddTagForTask(ctx context.Context, taskGid TaskPathGid, params *AddTagForTaskParams, body AddTagForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAttachmentsForTask request
	GetAttachmentsForTask(ctx context.Context, taskGid TaskPathGid, params *GetAttachmentsForTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAttachmentForTask request  with any body
	CreateAttachmentForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *CreateAttachmentForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDependenciesForTask request
	GetDependenciesForTask(ctx context.Context, taskGid TaskPathGid, params *GetDependenciesForTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDependentsForTask request
	GetDependentsForTask(ctx context.Context, taskGid TaskPathGid, params *GetDependentsForTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DuplicateTask request  with any body
	DuplicateTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *DuplicateTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DuplicateTask(ctx context.Context, taskGid TaskPathGid, params *DuplicateTaskParams, body DuplicateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectsForTask request
	GetProjectsForTask(ctx context.Context, taskGid TaskPathGid, params *GetProjectsForTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveDependenciesForTask request  with any body
	RemoveDependenciesForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *RemoveDependenciesForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveDependenciesForTask(ctx context.Context, taskGid TaskPathGid, params *RemoveDependenciesForTaskParams, body RemoveDependenciesForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveDependentsForTask request  with any body
	RemoveDependentsForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *RemoveDependentsForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveDependentsForTask(ctx context.Context, taskGid TaskPathGid, params *RemoveDependentsForTaskParams, body RemoveDependentsForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveFollowerForTask request  with any body
	RemoveFollowerForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *RemoveFollowerForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveFollowerForTask(ctx context.Context, taskGid TaskPathGid, params *RemoveFollowerForTaskParams, body RemoveFollowerForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveProjectForTask request  with any body
	RemoveProjectForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *RemoveProjectForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveProjectForTask(ctx context.Context, taskGid TaskPathGid, params *RemoveProjectForTaskParams, body RemoveProjectForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveTagForTask request  with any body
	RemoveTagForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *RemoveTagForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveTagForTask(ctx context.Context, taskGid TaskPathGid, params *RemoveTagForTaskParams, body RemoveTagForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetParentForTask request  with any body
	SetParentForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *SetParentForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetParentForTask(ctx context.Context, taskGid TaskPathGid, params *SetParentForTaskParams, body SetParentForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStoriesForTask request
	GetStoriesForTask(ctx context.Context, taskGid TaskPathGid, params *GetStoriesForTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStoryForTask request  with any body
	CreateStoryForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *CreateStoryForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateStoryForTask(ctx context.Context, taskGid TaskPathGid, params *CreateStoryForTaskParams, body CreateStoryForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubtasksForTask request
	GetSubtasksForTask(ctx context.Context, taskGid TaskPathGid, params *GetSubtasksForTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSubtaskForTask request  with any body
	CreateSubtaskForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *CreateSubtaskForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSubtaskForTask(ctx context.Context, taskGid TaskPathGid, params *CreateSubtaskForTaskParams, body CreateSubtaskForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagsForTask request
	GetTagsForTask(ctx context.Context, taskGid TaskPathGid, params *GetTagsForTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamMemberships request
	GetTeamMemberships(ctx context.Context, params *GetTeamMembershipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamMembership request
	GetTeamMembership(ctx context.Context, teamMembershipGid TeamMembershipPathGid, params *GetTeamMembershipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeam request  with any body
	CreateTeamWithBody(ctx context.Context, params *CreateTeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTeam(ctx context.Context, params *CreateTeamParams, body CreateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeam request
	GetTeam(ctx context.Context, teamGid TeamPathGid, params *GetTeamParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddUserForTeam request  with any body
	AddUserForTeamWithBody(ctx context.Context, teamGid TeamPathGid, params *AddUserForTeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddUserForTeam(ctx context.Context, teamGid TeamPathGid, params *AddUserForTeamParams, body AddUserForTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectsForTeam request
	GetProjectsForTeam(ctx context.Context, teamGid TeamPathGid, params *GetProjectsForTeamParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProjectForTeam request  with any body
	CreateProjectForTeamWithBody(ctx context.Context, teamGid TeamPathGid, params *CreateProjectForTeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProjectForTeam(ctx context.Context, teamGid TeamPathGid, params *CreateProjectForTeamParams, body CreateProjectForTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveUserForTeam request  with any body
	RemoveUserForTeamWithBody(ctx context.Context, teamGid TeamPathGid, params *RemoveUserForTeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveUserForTeam(ctx context.Context, teamGid TeamPathGid, params *RemoveUserForTeamParams, body RemoveUserForTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamMembershipsForTeam request
	GetTeamMembershipsForTeam(ctx context.Context, teamGid TeamPathGid, params *GetTeamMembershipsForTeamParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersForTeam request
	GetUsersForTeam(ctx context.Context, teamGid TeamPathGid, params *GetUsersForTeamParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserTaskList request
	GetUserTaskList(ctx context.Context, userTaskListGid UserTaskListPathGid, params *GetUserTaskListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTasksForUserTaskList request
	GetTasksForUserTaskList(ctx context.Context, userTaskListGid UserTaskListPathGid, params *GetTasksForUserTaskListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, userGid UserPathGid, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFavoritesForUser request
	GetFavoritesForUser(ctx context.Context, userGid UserPathGid, params *GetFavoritesForUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamMembershipsForUser request
	GetTeamMembershipsForUser(ctx context.Context, userGid UserPathGid, params *GetTeamMembershipsForUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamsForUser request
	GetTeamsForUser(ctx context.Context, userGid UserPathGid, params *GetTeamsForUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserTaskListForUser request
	GetUserTaskListForUser(ctx context.Context, userGid UserPathGid, params *GetUserTaskListForUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspaceMembershipsForUser request
	GetWorkspaceMembershipsForUser(ctx context.Context, userGid UserPathGid, params *GetWorkspaceMembershipsForUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebhooks request
	GetWebhooks(ctx context.Context, params *GetWebhooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWebhook request  with any body
	CreateWebhookWithBody(ctx context.Context, params *CreateWebhookParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWebhook(ctx context.Context, params *CreateWebhookParams, body CreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWebhook request
	DeleteWebhook(ctx context.Context, webhookGid WebhookPathGid, params *DeleteWebhookParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebhook request
	GetWebhook(ctx context.Context, webhookGid WebhookPathGid, params *GetWebhookParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspaceMembership request
	GetWorkspaceMembership(ctx context.Context, workspaceMembershipGid WorkspaceMembershipPathGid, params *GetWorkspaceMembershipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspaces request
	GetWorkspaces(ctx context.Context, params *GetWorkspacesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspace request
	GetWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *GetWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkspace request  with any body
	UpdateWorkspaceWithBody(ctx context.Context, workspaceGid WorkspacePathGid, params *UpdateWorkspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *UpdateWorkspaceParams, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddUserForWorkspace request  with any body
	AddUserForWorkspaceWithBody(ctx context.Context, workspaceGid WorkspacePathGid, params *AddUserForWorkspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddUserForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *AddUserForWorkspaceParams, body AddUserForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomFieldsForWorkspace request
	GetCustomFieldsForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *GetCustomFieldsForWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectsForWorkspace request
	GetProjectsForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *GetProjectsForWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProjectForWorkspace request  with any body
	CreateProjectForWorkspaceWithBody(ctx context.Context, workspaceGid WorkspacePathGid, params *CreateProjectForWorkspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProjectForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *CreateProjectForWorkspaceParams, body CreateProjectForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveUserForWorkspace request  with any body
	RemoveUserForWorkspaceWithBody(ctx context.Context, workspaceGid WorkspacePathGid, params *RemoveUserForWorkspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveUserForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *RemoveUserForWorkspaceParams, body RemoveUserForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagsForWorkspace request
	GetTagsForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *GetTagsForWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTagForWorkspace request  with any body
	CreateTagForWorkspaceWithBody(ctx context.Context, workspaceGid WorkspacePathGid, params *CreateTagForWorkspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTagForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *CreateTagForWorkspaceParams, body CreateTagForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchTasksForWorkspace request
	SearchTasksForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *SearchTasksForWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TypeaheadForWorkspace request
	TypeaheadForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *TypeaheadForWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersForWorkspace request
	GetUsersForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *GetUsersForWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspaceMembershipsForWorkspace request
	GetWorkspaceMembershipsForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *GetWorkspaceMembershipsForWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteAttachment(ctx context.Context, attachmentGid AttachmentPathGid, params *DeleteAttachmentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAttachmentRequest(c.Server, attachmentGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAttachment(ctx context.Context, attachmentGid AttachmentPathGid, params *GetAttachmentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAttachmentRequest(c.Server, attachmentGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBatchRequestWithBody(ctx context.Context, params *CreateBatchRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBatchRequestRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBatchRequest(ctx context.Context, params *CreateBatchRequestParams, body CreateBatchRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBatchRequestRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomFieldWithBody(ctx context.Context, params *CreateCustomFieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomFieldRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomField(ctx context.Context, params *CreateCustomFieldParams, body CreateCustomFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomFieldRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomField(ctx context.Context, customFieldGid CustomFieldPathGid, params *DeleteCustomFieldParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomFieldRequest(c.Server, customFieldGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomField(ctx context.Context, customFieldGid CustomFieldPathGid, params *GetCustomFieldParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomFieldRequest(c.Server, customFieldGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomFieldWithBody(ctx context.Context, customFieldGid CustomFieldPathGid, params *UpdateCustomFieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomFieldRequestWithBody(c.Server, customFieldGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomField(ctx context.Context, customFieldGid CustomFieldPathGid, params *UpdateCustomFieldParams, body UpdateCustomFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomFieldRequest(c.Server, customFieldGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnumOptionForCustomFieldWithBody(ctx context.Context, customFieldGid CustomFieldPathGid, params *CreateEnumOptionForCustomFieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnumOptionForCustomFieldRequestWithBody(c.Server, customFieldGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnumOptionForCustomField(ctx context.Context, customFieldGid CustomFieldPathGid, params *CreateEnumOptionForCustomFieldParams, body CreateEnumOptionForCustomFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnumOptionForCustomFieldRequest(c.Server, customFieldGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsertEnumOptionForCustomFieldWithBody(ctx context.Context, customFieldGid CustomFieldPathGid, params *InsertEnumOptionForCustomFieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsertEnumOptionForCustomFieldRequestWithBody(c.Server, customFieldGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsertEnumOptionForCustomField(ctx context.Context, customFieldGid CustomFieldPathGid, params *InsertEnumOptionForCustomFieldParams, body InsertEnumOptionForCustomFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsertEnumOptionForCustomFieldRequest(c.Server, customFieldGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnumOptionWithBody(ctx context.Context, enumOptionGid string, params *UpdateEnumOptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnumOptionRequestWithBody(c.Server, enumOptionGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnumOption(ctx context.Context, enumOptionGid string, params *UpdateEnumOptionParams, body UpdateEnumOptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnumOptionRequest(c.Server, enumOptionGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEvents(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGoals(ctx context.Context, params *GetGoalsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGoalsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGoal(ctx context.Context, goalGid GoalPathGid, params *DeleteGoalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGoalRequest(c.Server, goalGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGoal(ctx context.Context, goalGid GoalPathGid, params *GetGoalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGoalRequest(c.Server, goalGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGoalWithBody(ctx context.Context, goalGid GoalPathGid, params *UpdateGoalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGoalRequestWithBody(c.Server, goalGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGoal(ctx context.Context, goalGid GoalPathGid, params *UpdateGoalParams, body UpdateGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGoalRequest(c.Server, goalGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddFollowersWithBody(ctx context.Context, goalGid GoalPathGid, params *AddFollowersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddFollowersRequestWithBody(c.Server, goalGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddFollowers(ctx context.Context, goalGid GoalPathGid, params *AddFollowersParams, body AddFollowersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddFollowersRequest(c.Server, goalGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddSubgoalWithBody(ctx context.Context, goalGid GoalPathGid, params *AddSubgoalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddSubgoalRequestWithBody(c.Server, goalGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddSubgoal(ctx context.Context, goalGid GoalPathGid, params *AddSubgoalParams, body AddSubgoalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddSubgoalRequest(c.Server, goalGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddSupportingWorkForGoalWithBody(ctx context.Context, goalGid GoalPathGid, params *AddSupportingWorkForGoalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddSupportingWorkForGoalRequestWithBody(c.Server, goalGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddSupportingWorkForGoal(ctx context.Context, goalGid GoalPathGid, params *AddSupportingWorkForGoalParams, body AddSupportingWorkForGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddSupportingWorkForGoalRequest(c.Server, goalGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetParentGoalsForGoal(ctx context.Context, goalGid GoalPathGid, params *GetParentGoalsForGoalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetParentGoalsForGoalRequest(c.Server, goalGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveFollowersWithBody(ctx context.Context, goalGid GoalPathGid, params *RemoveFollowersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveFollowersRequestWithBody(c.Server, goalGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveFollowers(ctx context.Context, goalGid GoalPathGid, params *RemoveFollowersParams, body RemoveFollowersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveFollowersRequest(c.Server, goalGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveSubgoalWithBody(ctx context.Context, goalGid GoalPathGid, params *RemoveSubgoalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveSubgoalRequestWithBody(c.Server, goalGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveSubgoal(ctx context.Context, goalGid GoalPathGid, params *RemoveSubgoalParams, body RemoveSubgoalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveSubgoalRequest(c.Server, goalGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveSupportingWorkForGoalWithBody(ctx context.Context, goalGid GoalPathGid, params *RemoveSupportingWorkForGoalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveSupportingWorkForGoalRequestWithBody(c.Server, goalGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveSupportingWorkForGoal(ctx context.Context, goalGid GoalPathGid, params *RemoveSupportingWorkForGoalParams, body RemoveSupportingWorkForGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveSupportingWorkForGoalRequest(c.Server, goalGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGoalMetricWithBody(ctx context.Context, goalGid GoalPathGid, params *CreateGoalMetricParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGoalMetricRequestWithBody(c.Server, goalGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGoalMetric(ctx context.Context, goalGid GoalPathGid, params *CreateGoalMetricParams, body CreateGoalMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGoalMetricRequest(c.Server, goalGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGoalMetricWithBody(ctx context.Context, goalGid GoalPathGid, params *UpdateGoalMetricParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGoalMetricRequestWithBody(c.Server, goalGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGoalMetric(ctx context.Context, goalGid GoalPathGid, params *UpdateGoalMetricParams, body UpdateGoalMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGoalMetricRequest(c.Server, goalGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubgoalsForGoal(ctx context.Context, goalGid GoalPathGid, params *GetSubgoalsForGoalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubgoalsForGoalRequest(c.Server, goalGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SupportingWork(ctx context.Context, goalGid GoalPathGid, params *SupportingWorkParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSupportingWorkRequest(c.Server, goalGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJob(ctx context.Context, jobGid JobPathGid, params *GetJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobRequest(c.Server, jobGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationExportWithBody(ctx context.Context, params *CreateOrganizationExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationExportRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationExport(ctx context.Context, params *CreateOrganizationExportParams, body CreateOrganizationExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationExportRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationExport(ctx context.Context, organizationExportGid OrganizationExportPathGid, params *GetOrganizationExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationExportRequest(c.Server, organizationExportGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamsForOrganization(ctx context.Context, workspaceGid WorkspacePathGid, params *GetTeamsForOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsForOrganizationRequest(c.Server, workspaceGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPortfolioMemberships(ctx context.Context, params *GetPortfolioMembershipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPortfolioMembershipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPortfolioMembership(ctx context.Context, portfolioMembershipGid PortfolioMembershipPathGid, params *GetPortfolioMembershipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPortfolioMembershipRequest(c.Server, portfolioMembershipGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPortfolios(ctx context.Context, params *GetPortfoliosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPortfoliosRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePortfolioWithBody(ctx context.Context, params *CreatePortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePortfolioRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePortfolio(ctx context.Context, params *CreatePortfolioParams, body CreatePortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePortfolioRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *DeletePortfolioParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePortfolioRequest(c.Server, portfolioGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *GetPortfolioParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPortfolioRequest(c.Server, portfolioGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePortfolioWithBody(ctx context.Context, portfolioGid PortfolioPathGid, params *UpdatePortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePortfolioRequestWithBody(c.Server, portfolioGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *UpdatePortfolioParams, body UpdatePortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePortfolioRequest(c.Server, portfolioGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCustomFieldSettingForPortfolioWithBody(ctx context.Context, portfolioGid PortfolioPathGid, params *AddCustomFieldSettingForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCustomFieldSettingForPortfolioRequestWithBody(c.Server, portfolioGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCustomFieldSettingForPortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *AddCustomFieldSettingForPortfolioParams, body AddCustomFieldSettingForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCustomFieldSettingForPortfolioRequest(c.Server, portfolioGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddItemForPortfolioWithBody(ctx context.Context, portfolioGid PortfolioPathGid, params *AddItemForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddItemForPortfolioRequestWithBody(c.Server, portfolioGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddItemForPortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *AddItemForPortfolioParams, body AddItemForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddItemForPortfolioRequest(c.Server, portfolioGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMembersForPortfolioWithBody(ctx context.Context, portfolioGid PortfolioPathGid, params *AddMembersForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMembersForPortfolioRequestWithBody(c.Server, portfolioGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMembersForPortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *AddMembersForPortfolioParams, body AddMembersForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMembersForPortfolioRequest(c.Server, portfolioGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomFieldSettingsForPortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *GetCustomFieldSettingsForPortfolioParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomFieldSettingsForPortfolioRequest(c.Server, portfolioGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetItemsForPortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *GetItemsForPortfolioParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetItemsForPortfolioRequest(c.Server, portfolioGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPortfolioMembershipsForPortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *GetPortfolioMembershipsForPortfolioParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPortfolioMembershipsForPortfolioRequest(c.Server, portfolioGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveCustomFieldSettingForPortfolioWithBody(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveCustomFieldSettingForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveCustomFieldSettingForPortfolioRequestWithBody(c.Server, portfolioGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveCustomFieldSettingForPortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveCustomFieldSettingForPortfolioParams, body RemoveCustomFieldSettingForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveCustomFieldSettingForPortfolioRequest(c.Server, portfolioGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveItemForPortfolioWithBody(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveItemForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveItemForPortfolioRequestWithBody(c.Server, portfolioGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveItemForPortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveItemForPortfolioParams, body RemoveItemForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveItemForPortfolioRequest(c.Server, portfolioGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMembersForPortfolioWithBody(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveMembersForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMembersForPortfolioRequestWithBody(c.Server, portfolioGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMembersForPortfolio(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveMembersForPortfolioParams, body RemoveMembersForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMembersForPortfolioRequest(c.Server, portfolioGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectMembership(ctx context.Context, projectMembershipGid ProjectMembershipPathGid, params *GetProjectMembershipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectMembershipRequest(c.Server, projectMembershipGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectStatus(ctx context.Context, projectStatusGid ProjectStatusPathGid, params *DeleteProjectStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectStatusRequest(c.Server, projectStatusGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectStatus(ctx context.Context, projectStatusGid ProjectStatusPathGid, params *GetProjectStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectStatusRequest(c.Server, projectStatusGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjects(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectWithBody(ctx context.Context, params *CreateProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProject(ctx context.Context, params *CreateProjectParams, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProject(ctx context.Context, projectGid ProjectPathGid, params *DeleteProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectRequest(c.Server, projectGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProject(ctx context.Context, projectGid ProjectPathGid, params *GetProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectRequest(c.Server, projectGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *UpdateProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProjectRequestWithBody(c.Server, projectGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProject(ctx context.Context, projectGid ProjectPathGid, params *UpdateProjectParams, body UpdateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProjectRequest(c.Server, projectGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCustomFieldSettingForProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *AddCustomFieldSettingForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCustomFieldSettingForProjectRequestWithBody(c.Server, projectGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCustomFieldSettingForProject(ctx context.Context, projectGid ProjectPathGid, params *AddCustomFieldSettingForProjectParams, body AddCustomFieldSettingForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCustomFieldSettingForProjectRequest(c.Server, projectGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddFollowersForProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *AddFollowersForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddFollowersForProjectRequestWithBody(c.Server, projectGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddFollowersForProject(ctx context.Context, projectGid ProjectPathGid, params *AddFollowersForProjectParams, body AddFollowersForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddFollowersForProjectRequest(c.Server, projectGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMembersForProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *AddMembersForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMembersForProjectRequestWithBody(c.Server, projectGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMembersForProject(ctx context.Context, projectGid ProjectPathGid, params *AddMembersForProjectParams, body AddMembersForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMembersForProjectRequest(c.Server, projectGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomFieldSettingsForProject(ctx context.Context, projectGid ProjectPathGid, params *GetCustomFieldSettingsForProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomFieldSettingsForProjectRequest(c.Server, projectGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DuplicateProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *DuplicateProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDuplicateProjectRequestWithBody(c.Server, projectGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DuplicateProject(ctx context.Context, projectGid ProjectPathGid, params *DuplicateProjectParams, body DuplicateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDuplicateProjectRequest(c.Server, projectGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectMembershipsForProject(ctx context.Context, projectGid ProjectPathGid, params *GetProjectMembershipsForProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectMembershipsForProjectRequest(c.Server, projectGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectStatusesForProject(ctx context.Context, projectGid ProjectPathGid, params *GetProjectStatusesForProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectStatusesForProjectRequest(c.Server, projectGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectStatusForProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *CreateProjectStatusForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectStatusForProjectRequestWithBody(c.Server, projectGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectStatusForProject(ctx context.Context, projectGid ProjectPathGid, params *CreateProjectStatusForProjectParams, body CreateProjectStatusForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectStatusForProjectRequest(c.Server, projectGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveCustomFieldSettingForProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *RemoveCustomFieldSettingForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveCustomFieldSettingForProjectRequestWithBody(c.Server, projectGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveCustomFieldSettingForProject(ctx context.Context, projectGid ProjectPathGid, params *RemoveCustomFieldSettingForProjectParams, body RemoveCustomFieldSettingForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveCustomFieldSettingForProjectRequest(c.Server, projectGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveFollowersForProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *RemoveFollowersForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveFollowersForProjectRequestWithBody(c.Server, projectGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveFollowersForProject(ctx context.Context, projectGid ProjectPathGid, params *RemoveFollowersForProjectParams, body RemoveFollowersForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveFollowersForProjectRequest(c.Server, projectGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMembersForProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *RemoveMembersForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMembersForProjectRequestWithBody(c.Server, projectGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMembersForProject(ctx context.Context, projectGid ProjectPathGid, params *RemoveMembersForProjectParams, body RemoveMembersForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMembersForProjectRequest(c.Server, projectGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSectionsForProject(ctx context.Context, projectGid ProjectPathGid, params *GetSectionsForProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSectionsForProjectRequest(c.Server, projectGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSectionForProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *CreateSectionForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSectionForProjectRequestWithBody(c.Server, projectGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSectionForProject(ctx context.Context, projectGid ProjectPathGid, params *CreateSectionForProjectParams, body CreateSectionForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSectionForProjectRequest(c.Server, projectGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsertSectionForProjectWithBody(ctx context.Context, projectGid ProjectPathGid, params *InsertSectionForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsertSectionForProjectRequestWithBody(c.Server, projectGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsertSectionForProject(ctx context.Context, projectGid ProjectPathGid, params *InsertSectionForProjectParams, body InsertSectionForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsertSectionForProjectRequest(c.Server, projectGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskCountsForProject(ctx context.Context, projectGid ProjectPathGid, params *GetTaskCountsForProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskCountsForProjectRequest(c.Server, projectGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTasksForProject(ctx context.Context, projectGid ProjectPathGid, params *GetTasksForProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTasksForProjectRequest(c.Server, projectGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSection(ctx context.Context, sectionGid SectionPathGid, params *DeleteSectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSectionRequest(c.Server, sectionGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSection(ctx context.Context, sectionGid SectionPathGid, params *GetSectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSectionRequest(c.Server, sectionGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSectionWithBody(ctx context.Context, sectionGid SectionPathGid, params *UpdateSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSectionRequestWithBody(c.Server, sectionGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSection(ctx context.Context, sectionGid SectionPathGid, params *UpdateSectionParams, body UpdateSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSectionRequest(c.Server, sectionGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTaskForSectionWithBody(ctx context.Context, sectionGid SectionPathGid, params *AddTaskForSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTaskForSectionRequestWithBody(c.Server, sectionGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTaskForSection(ctx context.Context, sectionGid SectionPathGid, params *AddTaskForSectionParams, body AddTaskForSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTaskForSectionRequest(c.Server, sectionGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTasksForSection(ctx context.Context, sectionGid SectionPathGid, params *GetTasksForSectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTasksForSectionRequest(c.Server, sectionGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStory(ctx context.Context, storyGid StoryPathGid, params *DeleteStoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStoryRequest(c.Server, storyGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStory(ctx context.Context, storyGid StoryPathGid, params *GetStoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStoryRequest(c.Server, storyGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStoryWithBody(ctx context.Context, storyGid StoryPathGid, params *UpdateStoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStoryRequestWithBody(c.Server, storyGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStory(ctx context.Context, storyGid StoryPathGid, params *UpdateStoryParams, body UpdateStoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStoryRequest(c.Server, storyGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTags(ctx context.Context, params *GetTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagWithBody(ctx context.Context, params *CreateTagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTag(ctx context.Context, params *CreateTagParams, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTag(ctx context.Context, tagGid TagPathGid, params *DeleteTagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagRequest(c.Server, tagGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTag(ctx context.Context, tagGid TagPathGid, params *GetTagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagRequest(c.Server, tagGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTag(ctx context.Context, tagGid TagPathGid, params *UpdateTagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTagRequest(c.Server, tagGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTasksForTag(ctx context.Context, tagGid TagPathGid, params *GetTasksForTagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTasksForTagRequest(c.Server, tagGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTasks(ctx context.Context, params *GetTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTasksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTaskWithBody(ctx context.Context, params *CreateTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTaskRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTask(ctx context.Context, params *CreateTaskParams, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTaskRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTask(ctx context.Context, taskGid TaskPathGid, params *DeleteTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTaskRequest(c.Server, taskGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTask(ctx context.Context, taskGid TaskPathGid, params *GetTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskRequest(c.Server, taskGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *UpdateTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTaskRequestWithBody(c.Server, taskGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTask(ctx context.Context, taskGid TaskPathGid, params *UpdateTaskParams, body UpdateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTaskRequest(c.Server, taskGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddDependenciesForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *AddDependenciesForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddDependenciesForTaskRequestWithBody(c.Server, taskGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddDependenciesForTask(ctx context.Context, taskGid TaskPathGid, params *AddDependenciesForTaskParams, body AddDependenciesForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddDependenciesForTaskRequest(c.Server, taskGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddDependentsForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *AddDependentsForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddDependentsForTaskRequestWithBody(c.Server, taskGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddDependentsForTask(ctx context.Context, taskGid TaskPathGid, params *AddDependentsForTaskParams, body AddDependentsForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddDependentsForTaskRequest(c.Server, taskGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddFollowersForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *AddFollowersForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddFollowersForTaskRequestWithBody(c.Server, taskGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddFollowersForTask(ctx context.Context, taskGid TaskPathGid, params *AddFollowersForTaskParams, body AddFollowersForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddFollowersForTaskRequest(c.Server, taskGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddProjectForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *AddProjectForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddProjectForTaskRequestWithBody(c.Server, taskGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddProjectForTask(ctx context.Context, taskGid TaskPathGid, params *AddProjectForTaskParams, body AddProjectForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddProjectForTaskRequest(c.Server, taskGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTagForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *AddTagForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTagForTaskRequestWithBody(c.Server, taskGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTagForTask(ctx context.Context, taskGid TaskPathGid, params *AddTagForTaskParams, body AddTagForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTagForTaskRequest(c.Server, taskGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAttachmentsForTask(ctx context.Context, taskGid TaskPathGid, params *GetAttachmentsForTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAttachmentsForTaskRequest(c.Server, taskGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAttachmentForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *CreateAttachmentForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAttachmentForTaskRequestWithBody(c.Server, taskGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDependenciesForTask(ctx context.Context, taskGid TaskPathGid, params *GetDependenciesForTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDependenciesForTaskRequest(c.Server, taskGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDependentsForTask(ctx context.Context, taskGid TaskPathGid, params *GetDependentsForTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDependentsForTaskRequest(c.Server, taskGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DuplicateTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *DuplicateTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDuplicateTaskRequestWithBody(c.Server, taskGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DuplicateTask(ctx context.Context, taskGid TaskPathGid, params *DuplicateTaskParams, body DuplicateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDuplicateTaskRequest(c.Server, taskGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsForTask(ctx context.Context, taskGid TaskPathGid, params *GetProjectsForTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsForTaskRequest(c.Server, taskGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveDependenciesForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *RemoveDependenciesForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveDependenciesForTaskRequestWithBody(c.Server, taskGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveDependenciesForTask(ctx context.Context, taskGid TaskPathGid, params *RemoveDependenciesForTaskParams, body RemoveDependenciesForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveDependenciesForTaskRequest(c.Server, taskGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveDependentsForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *RemoveDependentsForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveDependentsForTaskRequestWithBody(c.Server, taskGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveDependentsForTask(ctx context.Context, taskGid TaskPathGid, params *RemoveDependentsForTaskParams, body RemoveDependentsForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveDependentsForTaskRequest(c.Server, taskGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveFollowerForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *RemoveFollowerForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveFollowerForTaskRequestWithBody(c.Server, taskGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveFollowerForTask(ctx context.Context, taskGid TaskPathGid, params *RemoveFollowerForTaskParams, body RemoveFollowerForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveFollowerForTaskRequest(c.Server, taskGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveProjectForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *RemoveProjectForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveProjectForTaskRequestWithBody(c.Server, taskGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveProjectForTask(ctx context.Context, taskGid TaskPathGid, params *RemoveProjectForTaskParams, body RemoveProjectForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveProjectForTaskRequest(c.Server, taskGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveTagForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *RemoveTagForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveTagForTaskRequestWithBody(c.Server, taskGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveTagForTask(ctx context.Context, taskGid TaskPathGid, params *RemoveTagForTaskParams, body RemoveTagForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveTagForTaskRequest(c.Server, taskGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetParentForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *SetParentForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetParentForTaskRequestWithBody(c.Server, taskGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetParentForTask(ctx context.Context, taskGid TaskPathGid, params *SetParentForTaskParams, body SetParentForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetParentForTaskRequest(c.Server, taskGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStoriesForTask(ctx context.Context, taskGid TaskPathGid, params *GetStoriesForTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStoriesForTaskRequest(c.Server, taskGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStoryForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *CreateStoryForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStoryForTaskRequestWithBody(c.Server, taskGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStoryForTask(ctx context.Context, taskGid TaskPathGid, params *CreateStoryForTaskParams, body CreateStoryForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStoryForTaskRequest(c.Server, taskGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubtasksForTask(ctx context.Context, taskGid TaskPathGid, params *GetSubtasksForTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubtasksForTaskRequest(c.Server, taskGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSubtaskForTaskWithBody(ctx context.Context, taskGid TaskPathGid, params *CreateSubtaskForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSubtaskForTaskRequestWithBody(c.Server, taskGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSubtaskForTask(ctx context.Context, taskGid TaskPathGid, params *CreateSubtaskForTaskParams, body CreateSubtaskForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSubtaskForTaskRequest(c.Server, taskGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagsForTask(ctx context.Context, taskGid TaskPathGid, params *GetTagsForTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsForTaskRequest(c.Server, taskGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamMemberships(ctx context.Context, params *GetTeamMembershipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamMembershipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamMembership(ctx context.Context, teamMembershipGid TeamMembershipPathGid, params *GetTeamMembershipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamMembershipRequest(c.Server, teamMembershipGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamWithBody(ctx context.Context, params *CreateTeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeam(ctx context.Context, params *CreateTeamParams, body CreateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeam(ctx context.Context, teamGid TeamPathGid, params *GetTeamParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamRequest(c.Server, teamGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserForTeamWithBody(ctx context.Context, teamGid TeamPathGid, params *AddUserForTeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserForTeamRequestWithBody(c.Server, teamGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserForTeam(ctx context.Context, teamGid TeamPathGid, params *AddUserForTeamParams, body AddUserForTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserForTeamRequest(c.Server, teamGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsForTeam(ctx context.Context, teamGid TeamPathGid, params *GetProjectsForTeamParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsForTeamRequest(c.Server, teamGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectForTeamWithBody(ctx context.Context, teamGid TeamPathGid, params *CreateProjectForTeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectForTeamRequestWithBody(c.Server, teamGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectForTeam(ctx context.Context, teamGid TeamPathGid, params *CreateProjectForTeamParams, body CreateProjectForTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectForTeamRequest(c.Server, teamGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserForTeamWithBody(ctx context.Context, teamGid TeamPathGid, params *RemoveUserForTeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveUserForTeamRequestWithBody(c.Server, teamGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserForTeam(ctx context.Context, teamGid TeamPathGid, params *RemoveUserForTeamParams, body RemoveUserForTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveUserForTeamRequest(c.Server, teamGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamMembershipsForTeam(ctx context.Context, teamGid TeamPathGid, params *GetTeamMembershipsForTeamParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamMembershipsForTeamRequest(c.Server, teamGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersForTeam(ctx context.Context, teamGid TeamPathGid, params *GetUsersForTeamParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersForTeamRequest(c.Server, teamGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserTaskList(ctx context.Context, userTaskListGid UserTaskListPathGid, params *GetUserTaskListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserTaskListRequest(c.Server, userTaskListGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTasksForUserTaskList(ctx context.Context, userTaskListGid UserTaskListPathGid, params *GetTasksForUserTaskListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTasksForUserTaskListRequest(c.Server, userTaskListGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, userGid UserPathGid, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, userGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFavoritesForUser(ctx context.Context, userGid UserPathGid, params *GetFavoritesForUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFavoritesForUserRequest(c.Server, userGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamMembershipsForUser(ctx context.Context, userGid UserPathGid, params *GetTeamMembershipsForUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamMembershipsForUserRequest(c.Server, userGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamsForUser(ctx context.Context, userGid UserPathGid, params *GetTeamsForUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsForUserRequest(c.Server, userGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserTaskListForUser(ctx context.Context, userGid UserPathGid, params *GetUserTaskListForUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserTaskListForUserRequest(c.Server, userGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceMembershipsForUser(ctx context.Context, userGid UserPathGid, params *GetWorkspaceMembershipsForUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceMembershipsForUserRequest(c.Server, userGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhooks(ctx context.Context, params *GetWebhooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebhooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhookWithBody(ctx context.Context, params *CreateWebhookParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWebhookRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhook(ctx context.Context, params *CreateWebhookParams, body CreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWebhookRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWebhook(ctx context.Context, webhookGid WebhookPathGid, params *DeleteWebhookParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWebhookRequest(c.Server, webhookGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhook(ctx context.Context, webhookGid WebhookPathGid, params *GetWebhookParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebhookRequest(c.Server, webhookGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceMembership(ctx context.Context, workspaceMembershipGid WorkspaceMembershipPathGid, params *GetWorkspaceMembershipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceMembershipRequest(c.Server, workspaceMembershipGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaces(ctx context.Context, params *GetWorkspacesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *GetWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceRequest(c.Server, workspaceGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceWithBody(ctx context.Context, workspaceGid WorkspacePathGid, params *UpdateWorkspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceRequestWithBody(c.Server, workspaceGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *UpdateWorkspaceParams, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceRequest(c.Server, workspaceGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserForWorkspaceWithBody(ctx context.Context, workspaceGid WorkspacePathGid, params *AddUserForWorkspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserForWorkspaceRequestWithBody(c.Server, workspaceGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *AddUserForWorkspaceParams, body AddUserForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserForWorkspaceRequest(c.Server, workspaceGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomFieldsForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *GetCustomFieldsForWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomFieldsForWorkspaceRequest(c.Server, workspaceGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *GetProjectsForWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsForWorkspaceRequest(c.Server, workspaceGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectForWorkspaceWithBody(ctx context.Context, workspaceGid WorkspacePathGid, params *CreateProjectForWorkspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectForWorkspaceRequestWithBody(c.Server, workspaceGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *CreateProjectForWorkspaceParams, body CreateProjectForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectForWorkspaceRequest(c.Server, workspaceGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserForWorkspaceWithBody(ctx context.Context, workspaceGid WorkspacePathGid, params *RemoveUserForWorkspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveUserForWorkspaceRequestWithBody(c.Server, workspaceGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *RemoveUserForWorkspaceParams, body RemoveUserForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveUserForWorkspaceRequest(c.Server, workspaceGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagsForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *GetTagsForWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsForWorkspaceRequest(c.Server, workspaceGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagForWorkspaceWithBody(ctx context.Context, workspaceGid WorkspacePathGid, params *CreateTagForWorkspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagForWorkspaceRequestWithBody(c.Server, workspaceGid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *CreateTagForWorkspaceParams, body CreateTagForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagForWorkspaceRequest(c.Server, workspaceGid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchTasksForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *SearchTasksForWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchTasksForWorkspaceRequest(c.Server, workspaceGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TypeaheadForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *TypeaheadForWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTypeaheadForWorkspaceRequest(c.Server, workspaceGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *GetUsersForWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersForWorkspaceRequest(c.Server, workspaceGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceMembershipsForWorkspace(ctx context.Context, workspaceGid WorkspacePathGid, params *GetWorkspaceMembershipsForWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceMembershipsForWorkspaceRequest(c.Server, workspaceGid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteAttachmentRequest generates requests for DeleteAttachment
func NewDeleteAttachmentRequest(server string, attachmentGid AttachmentPathGid, params *DeleteAttachmentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "attachment_gid", runtime.ParamLocationPath, attachmentGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attachments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAttachmentRequest generates requests for GetAttachment
func NewGetAttachmentRequest(server string, attachmentGid AttachmentPathGid, params *GetAttachmentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "attachment_gid", runtime.ParamLocationPath, attachmentGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attachments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBatchRequestRequest calls the generic CreateBatchRequest builder with application/json body
func NewCreateBatchRequestRequest(server string, params *CreateBatchRequestParams, body CreateBatchRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBatchRequestRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateBatchRequestRequestWithBody generates requests for CreateBatchRequest with any type of body
func NewCreateBatchRequestRequestWithBody(server string, params *CreateBatchRequestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateCustomFieldRequest calls the generic CreateCustomField builder with application/json body
func NewCreateCustomFieldRequest(server string, params *CreateCustomFieldParams, body CreateCustomFieldJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCustomFieldRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateCustomFieldRequestWithBody generates requests for CreateCustomField with any type of body
func NewCreateCustomFieldRequestWithBody(server string, params *CreateCustomFieldParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/custom_fields")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomFieldRequest generates requests for DeleteCustomField
func NewDeleteCustomFieldRequest(server string, customFieldGid CustomFieldPathGid, params *DeleteCustomFieldParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_field_gid", runtime.ParamLocationPath, customFieldGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomFieldRequest generates requests for GetCustomField
func NewGetCustomFieldRequest(server string, customFieldGid CustomFieldPathGid, params *GetCustomFieldParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_field_gid", runtime.ParamLocationPath, customFieldGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCustomFieldRequest calls the generic UpdateCustomField builder with application/json body
func NewUpdateCustomFieldRequest(server string, customFieldGid CustomFieldPathGid, params *UpdateCustomFieldParams, body UpdateCustomFieldJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCustomFieldRequestWithBody(server, customFieldGid, params, "application/json", bodyReader)
}

// NewUpdateCustomFieldRequestWithBody generates requests for UpdateCustomField with any type of body
func NewUpdateCustomFieldRequestWithBody(server string, customFieldGid CustomFieldPathGid, params *UpdateCustomFieldParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_field_gid", runtime.ParamLocationPath, customFieldGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateEnumOptionForCustomFieldRequest calls the generic CreateEnumOptionForCustomField builder with application/json body
func NewCreateEnumOptionForCustomFieldRequest(server string, customFieldGid CustomFieldPathGid, params *CreateEnumOptionForCustomFieldParams, body CreateEnumOptionForCustomFieldJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEnumOptionForCustomFieldRequestWithBody(server, customFieldGid, params, "application/json", bodyReader)
}

// NewCreateEnumOptionForCustomFieldRequestWithBody generates requests for CreateEnumOptionForCustomField with any type of body
func NewCreateEnumOptionForCustomFieldRequestWithBody(server string, customFieldGid CustomFieldPathGid, params *CreateEnumOptionForCustomFieldParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_field_gid", runtime.ParamLocationPath, customFieldGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/custom_fields/%s/enum_options", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsertEnumOptionForCustomFieldRequest calls the generic InsertEnumOptionForCustomField builder with application/json body
func NewInsertEnumOptionForCustomFieldRequest(server string, customFieldGid CustomFieldPathGid, params *InsertEnumOptionForCustomFieldParams, body InsertEnumOptionForCustomFieldJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsertEnumOptionForCustomFieldRequestWithBody(server, customFieldGid, params, "application/json", bodyReader)
}

// NewInsertEnumOptionForCustomFieldRequestWithBody generates requests for InsertEnumOptionForCustomField with any type of body
func NewInsertEnumOptionForCustomFieldRequestWithBody(server string, customFieldGid CustomFieldPathGid, params *InsertEnumOptionForCustomFieldParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_field_gid", runtime.ParamLocationPath, customFieldGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/custom_fields/%s/enum_options/insert", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateEnumOptionRequest calls the generic UpdateEnumOption builder with application/json body
func NewUpdateEnumOptionRequest(server string, enumOptionGid string, params *UpdateEnumOptionParams, body UpdateEnumOptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEnumOptionRequestWithBody(server, enumOptionGid, params, "application/json", bodyReader)
}

// NewUpdateEnumOptionRequestWithBody generates requests for UpdateEnumOption with any type of body
func NewUpdateEnumOptionRequestWithBody(server string, enumOptionGid string, params *UpdateEnumOptionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "enum_option_gid", runtime.ParamLocationPath, enumOptionGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/enum_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEventsRequest generates requests for GetEvents
func NewGetEventsRequest(server string, params *GetEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource", runtime.ParamLocationQuery, params.Resource); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Sync != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sync", runtime.ParamLocationQuery, *params.Sync); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGoalsRequest generates requests for GetGoals
func NewGetGoalsRequest(server string, params *GetGoalsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/goals")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Portfolio != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portfolio", runtime.ParamLocationQuery, *params.Portfolio); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Project != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsWorkspaceLevel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_workspace_level", runtime.ParamLocationQuery, *params.IsWorkspaceLevel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Team != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team", runtime.ParamLocationQuery, *params.Team); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Workspace != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspace", runtime.ParamLocationQuery, *params.Workspace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteGoalRequest generates requests for DeleteGoal
func NewDeleteGoalRequest(server string, goalGid GoalPathGid, params *DeleteGoalParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "goal_gid", runtime.ParamLocationPath, goalGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/goals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGoalRequest generates requests for GetGoal
func NewGetGoalRequest(server string, goalGid GoalPathGid, params *GetGoalParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "goal_gid", runtime.ParamLocationPath, goalGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/goals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateGoalRequest calls the generic UpdateGoal builder with application/json body
func NewUpdateGoalRequest(server string, goalGid GoalPathGid, params *UpdateGoalParams, body UpdateGoalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateGoalRequestWithBody(server, goalGid, params, "application/json", bodyReader)
}

// NewUpdateGoalRequestWithBody generates requests for UpdateGoal with any type of body
func NewUpdateGoalRequestWithBody(server string, goalGid GoalPathGid, params *UpdateGoalParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "goal_gid", runtime.ParamLocationPath, goalGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/goals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddFollowersRequest calls the generic AddFollowers builder with application/json body
func NewAddFollowersRequest(server string, goalGid GoalPathGid, params *AddFollowersParams, body AddFollowersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddFollowersRequestWithBody(server, goalGid, params, "application/json", bodyReader)
}

// NewAddFollowersRequestWithBody generates requests for AddFollowers with any type of body
func NewAddFollowersRequestWithBody(server string, goalGid GoalPathGid, params *AddFollowersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "goal_gid", runtime.ParamLocationPath, goalGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/goals/%s/addFollowers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddSubgoalRequest calls the generic AddSubgoal builder with application/json body
func NewAddSubgoalRequest(server string, goalGid GoalPathGid, params *AddSubgoalParams, body AddSubgoalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddSubgoalRequestWithBody(server, goalGid, params, "application/json", bodyReader)
}

// NewAddSubgoalRequestWithBody generates requests for AddSubgoal with any type of body
func NewAddSubgoalRequestWithBody(server string, goalGid GoalPathGid, params *AddSubgoalParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "goal_gid", runtime.ParamLocationPath, goalGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/goals/%s/addSubgoal", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddSupportingWorkForGoalRequest calls the generic AddSupportingWorkForGoal builder with application/json body
func NewAddSupportingWorkForGoalRequest(server string, goalGid GoalPathGid, params *AddSupportingWorkForGoalParams, body AddSupportingWorkForGoalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddSupportingWorkForGoalRequestWithBody(server, goalGid, params, "application/json", bodyReader)
}

// NewAddSupportingWorkForGoalRequestWithBody generates requests for AddSupportingWorkForGoal with any type of body
func NewAddSupportingWorkForGoalRequestWithBody(server string, goalGid GoalPathGid, params *AddSupportingWorkForGoalParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "goal_gid", runtime.ParamLocationPath, goalGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/goals/%s/addSupportingWork", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetParentGoalsForGoalRequest generates requests for GetParentGoalsForGoal
func NewGetParentGoalsForGoalRequest(server string, goalGid GoalPathGid, params *GetParentGoalsForGoalParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "goal_gid", runtime.ParamLocationPath, goalGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/goals/%s/parentGoals", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveFollowersRequest calls the generic RemoveFollowers builder with application/json body
func NewRemoveFollowersRequest(server string, goalGid GoalPathGid, params *RemoveFollowersParams, body RemoveFollowersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveFollowersRequestWithBody(server, goalGid, params, "application/json", bodyReader)
}

// NewRemoveFollowersRequestWithBody generates requests for RemoveFollowers with any type of body
func NewRemoveFollowersRequestWithBody(server string, goalGid GoalPathGid, params *RemoveFollowersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "goal_gid", runtime.ParamLocationPath, goalGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/goals/%s/removeFollowers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveSubgoalRequest calls the generic RemoveSubgoal builder with application/json body
func NewRemoveSubgoalRequest(server string, goalGid GoalPathGid, params *RemoveSubgoalParams, body RemoveSubgoalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveSubgoalRequestWithBody(server, goalGid, params, "application/json", bodyReader)
}

// NewRemoveSubgoalRequestWithBody generates requests for RemoveSubgoal with any type of body
func NewRemoveSubgoalRequestWithBody(server string, goalGid GoalPathGid, params *RemoveSubgoalParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "goal_gid", runtime.ParamLocationPath, goalGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/goals/%s/removeSubgoal", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveSupportingWorkForGoalRequest calls the generic RemoveSupportingWorkForGoal builder with application/json body
func NewRemoveSupportingWorkForGoalRequest(server string, goalGid GoalPathGid, params *RemoveSupportingWorkForGoalParams, body RemoveSupportingWorkForGoalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveSupportingWorkForGoalRequestWithBody(server, goalGid, params, "application/json", bodyReader)
}

// NewRemoveSupportingWorkForGoalRequestWithBody generates requests for RemoveSupportingWorkForGoal with any type of body
func NewRemoveSupportingWorkForGoalRequestWithBody(server string, goalGid GoalPathGid, params *RemoveSupportingWorkForGoalParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "goal_gid", runtime.ParamLocationPath, goalGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/goals/%s/removeSupportingWork", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateGoalMetricRequest calls the generic CreateGoalMetric builder with application/json body
func NewCreateGoalMetricRequest(server string, goalGid GoalPathGid, params *CreateGoalMetricParams, body CreateGoalMetricJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGoalMetricRequestWithBody(server, goalGid, params, "application/json", bodyReader)
}

// NewCreateGoalMetricRequestWithBody generates requests for CreateGoalMetric with any type of body
func NewCreateGoalMetricRequestWithBody(server string, goalGid GoalPathGid, params *CreateGoalMetricParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "goal_gid", runtime.ParamLocationPath, goalGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/goals/%s/setMetric", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateGoalMetricRequest calls the generic UpdateGoalMetric builder with application/json body
func NewUpdateGoalMetricRequest(server string, goalGid GoalPathGid, params *UpdateGoalMetricParams, body UpdateGoalMetricJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateGoalMetricRequestWithBody(server, goalGid, params, "application/json", bodyReader)
}

// NewUpdateGoalMetricRequestWithBody generates requests for UpdateGoalMetric with any type of body
func NewUpdateGoalMetricRequestWithBody(server string, goalGid GoalPathGid, params *UpdateGoalMetricParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "goal_gid", runtime.ParamLocationPath, goalGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/goals/%s/setMetricCurrentValue", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSubgoalsForGoalRequest generates requests for GetSubgoalsForGoal
func NewGetSubgoalsForGoalRequest(server string, goalGid GoalPathGid, params *GetSubgoalsForGoalParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "goal_gid", runtime.ParamLocationPath, goalGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/goals/%s/subgoals", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSupportingWorkRequest generates requests for SupportingWork
func NewSupportingWorkRequest(server string, goalGid GoalPathGid, params *SupportingWorkParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "goal_gid", runtime.ParamLocationPath, goalGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/goals/%s/supportingWork", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobRequest generates requests for GetJob
func NewGetJobRequest(server string, jobGid JobPathGid, params *GetJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_gid", runtime.ParamLocationPath, jobGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationExportRequest calls the generic CreateOrganizationExport builder with application/json body
func NewCreateOrganizationExportRequest(server string, params *CreateOrganizationExportParams, body CreateOrganizationExportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationExportRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateOrganizationExportRequestWithBody generates requests for CreateOrganizationExport with any type of body
func NewCreateOrganizationExportRequestWithBody(server string, params *CreateOrganizationExportParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization_exports")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationExportRequest generates requests for GetOrganizationExport
func NewGetOrganizationExportRequest(server string, organizationExportGid OrganizationExportPathGid, params *GetOrganizationExportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_export_gid", runtime.ParamLocationPath, organizationExportGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization_exports/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamsForOrganizationRequest generates requests for GetTeamsForOrganization
func NewGetTeamsForOrganizationRequest(server string, workspaceGid WorkspacePathGid, params *GetTeamsForOrganizationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_gid", runtime.ParamLocationPath, workspaceGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/teams", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPortfolioMembershipsRequest generates requests for GetPortfolioMemberships
func NewGetPortfolioMembershipsRequest(server string, params *GetPortfolioMembershipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portfolio_memberships")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Portfolio != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portfolio", runtime.ParamLocationQuery, *params.Portfolio); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Workspace != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspace", runtime.ParamLocationQuery, *params.Workspace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.User != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPortfolioMembershipRequest generates requests for GetPortfolioMembership
func NewGetPortfolioMembershipRequest(server string, portfolioMembershipGid PortfolioMembershipPathGid, params *GetPortfolioMembershipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "portfolio_membership_gid", runtime.ParamLocationPath, portfolioMembershipGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portfolio_memberships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPortfoliosRequest generates requests for GetPortfolios
func NewGetPortfoliosRequest(server string, params *GetPortfoliosParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portfolios")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspace", runtime.ParamLocationQuery, params.Workspace); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, params.Owner); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePortfolioRequest calls the generic CreatePortfolio builder with application/json body
func NewCreatePortfolioRequest(server string, params *CreatePortfolioParams, body CreatePortfolioJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePortfolioRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreatePortfolioRequestWithBody generates requests for CreatePortfolio with any type of body
func NewCreatePortfolioRequestWithBody(server string, params *CreatePortfolioParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portfolios")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePortfolioRequest generates requests for DeletePortfolio
func NewDeletePortfolioRequest(server string, portfolioGid PortfolioPathGid, params *DeletePortfolioParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "portfolio_gid", runtime.ParamLocationPath, portfolioGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portfolios/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPortfolioRequest generates requests for GetPortfolio
func NewGetPortfolioRequest(server string, portfolioGid PortfolioPathGid, params *GetPortfolioParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "portfolio_gid", runtime.ParamLocationPath, portfolioGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portfolios/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePortfolioRequest calls the generic UpdatePortfolio builder with application/json body
func NewUpdatePortfolioRequest(server string, portfolioGid PortfolioPathGid, params *UpdatePortfolioParams, body UpdatePortfolioJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePortfolioRequestWithBody(server, portfolioGid, params, "application/json", bodyReader)
}

// NewUpdatePortfolioRequestWithBody generates requests for UpdatePortfolio with any type of body
func NewUpdatePortfolioRequestWithBody(server string, portfolioGid PortfolioPathGid, params *UpdatePortfolioParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "portfolio_gid", runtime.ParamLocationPath, portfolioGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portfolios/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddCustomFieldSettingForPortfolioRequest calls the generic AddCustomFieldSettingForPortfolio builder with application/json body
func NewAddCustomFieldSettingForPortfolioRequest(server string, portfolioGid PortfolioPathGid, params *AddCustomFieldSettingForPortfolioParams, body AddCustomFieldSettingForPortfolioJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCustomFieldSettingForPortfolioRequestWithBody(server, portfolioGid, params, "application/json", bodyReader)
}

// NewAddCustomFieldSettingForPortfolioRequestWithBody generates requests for AddCustomFieldSettingForPortfolio with any type of body
func NewAddCustomFieldSettingForPortfolioRequestWithBody(server string, portfolioGid PortfolioPathGid, params *AddCustomFieldSettingForPortfolioParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "portfolio_gid", runtime.ParamLocationPath, portfolioGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portfolios/%s/addCustomFieldSetting", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddItemForPortfolioRequest calls the generic AddItemForPortfolio builder with application/json body
func NewAddItemForPortfolioRequest(server string, portfolioGid PortfolioPathGid, params *AddItemForPortfolioParams, body AddItemForPortfolioJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddItemForPortfolioRequestWithBody(server, portfolioGid, params, "application/json", bodyReader)
}

// NewAddItemForPortfolioRequestWithBody generates requests for AddItemForPortfolio with any type of body
func NewAddItemForPortfolioRequestWithBody(server string, portfolioGid PortfolioPathGid, params *AddItemForPortfolioParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "portfolio_gid", runtime.ParamLocationPath, portfolioGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portfolios/%s/addItem", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddMembersForPortfolioRequest calls the generic AddMembersForPortfolio builder with application/json body
func NewAddMembersForPortfolioRequest(server string, portfolioGid PortfolioPathGid, params *AddMembersForPortfolioParams, body AddMembersForPortfolioJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddMembersForPortfolioRequestWithBody(server, portfolioGid, params, "application/json", bodyReader)
}

// NewAddMembersForPortfolioRequestWithBody generates requests for AddMembersForPortfolio with any type of body
func NewAddMembersForPortfolioRequestWithBody(server string, portfolioGid PortfolioPathGid, params *AddMembersForPortfolioParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "portfolio_gid", runtime.ParamLocationPath, portfolioGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portfolios/%s/addMembers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomFieldSettingsForPortfolioRequest generates requests for GetCustomFieldSettingsForPortfolio
func NewGetCustomFieldSettingsForPortfolioRequest(server string, portfolioGid PortfolioPathGid, params *GetCustomFieldSettingsForPortfolioParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "portfolio_gid", runtime.ParamLocationPath, portfolioGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portfolios/%s/custom_field_settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetItemsForPortfolioRequest generates requests for GetItemsForPortfolio
func NewGetItemsForPortfolioRequest(server string, portfolioGid PortfolioPathGid, params *GetItemsForPortfolioParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "portfolio_gid", runtime.ParamLocationPath, portfolioGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portfolios/%s/items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPortfolioMembershipsForPortfolioRequest generates requests for GetPortfolioMembershipsForPortfolio
func NewGetPortfolioMembershipsForPortfolioRequest(server string, portfolioGid PortfolioPathGid, params *GetPortfolioMembershipsForPortfolioParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "portfolio_gid", runtime.ParamLocationPath, portfolioGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portfolios/%s/portfolio_memberships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.User != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveCustomFieldSettingForPortfolioRequest calls the generic RemoveCustomFieldSettingForPortfolio builder with application/json body
func NewRemoveCustomFieldSettingForPortfolioRequest(server string, portfolioGid PortfolioPathGid, params *RemoveCustomFieldSettingForPortfolioParams, body RemoveCustomFieldSettingForPortfolioJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveCustomFieldSettingForPortfolioRequestWithBody(server, portfolioGid, params, "application/json", bodyReader)
}

// NewRemoveCustomFieldSettingForPortfolioRequestWithBody generates requests for RemoveCustomFieldSettingForPortfolio with any type of body
func NewRemoveCustomFieldSettingForPortfolioRequestWithBody(server string, portfolioGid PortfolioPathGid, params *RemoveCustomFieldSettingForPortfolioParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "portfolio_gid", runtime.ParamLocationPath, portfolioGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portfolios/%s/removeCustomFieldSetting", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveItemForPortfolioRequest calls the generic RemoveItemForPortfolio builder with application/json body
func NewRemoveItemForPortfolioRequest(server string, portfolioGid PortfolioPathGid, params *RemoveItemForPortfolioParams, body RemoveItemForPortfolioJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveItemForPortfolioRequestWithBody(server, portfolioGid, params, "application/json", bodyReader)
}

// NewRemoveItemForPortfolioRequestWithBody generates requests for RemoveItemForPortfolio with any type of body
func NewRemoveItemForPortfolioRequestWithBody(server string, portfolioGid PortfolioPathGid, params *RemoveItemForPortfolioParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "portfolio_gid", runtime.ParamLocationPath, portfolioGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portfolios/%s/removeItem", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveMembersForPortfolioRequest calls the generic RemoveMembersForPortfolio builder with application/json body
func NewRemoveMembersForPortfolioRequest(server string, portfolioGid PortfolioPathGid, params *RemoveMembersForPortfolioParams, body RemoveMembersForPortfolioJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveMembersForPortfolioRequestWithBody(server, portfolioGid, params, "application/json", bodyReader)
}

// NewRemoveMembersForPortfolioRequestWithBody generates requests for RemoveMembersForPortfolio with any type of body
func NewRemoveMembersForPortfolioRequestWithBody(server string, portfolioGid PortfolioPathGid, params *RemoveMembersForPortfolioParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "portfolio_gid", runtime.ParamLocationPath, portfolioGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portfolios/%s/removeMembers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectMembershipRequest generates requests for GetProjectMembership
func NewGetProjectMembershipRequest(server string, projectMembershipGid ProjectMembershipPathGid, params *GetProjectMembershipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_membership_gid", runtime.ParamLocationPath, projectMembershipGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project_memberships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteProjectStatusRequest generates requests for DeleteProjectStatus
func NewDeleteProjectStatusRequest(server string, projectStatusGid ProjectStatusPathGid, params *DeleteProjectStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_status_gid", runtime.ParamLocationPath, projectStatusGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project_statuses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectStatusRequest generates requests for GetProjectStatus
func NewGetProjectStatusRequest(server string, projectStatusGid ProjectStatusPathGid, params *GetProjectStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_status_gid", runtime.ParamLocationPath, projectStatusGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project_statuses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsRequest generates requests for GetProjects
func NewGetProjectsRequest(server string, params *GetProjectsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Workspace != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspace", runtime.ParamLocationQuery, *params.Workspace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Team != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team", runtime.ParamLocationQuery, *params.Team); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Archived != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProjectRequest calls the generic CreateProject builder with application/json body
func NewCreateProjectRequest(server string, params *CreateProjectParams, body CreateProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProjectRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateProjectRequestWithBody generates requests for CreateProject with any type of body
func NewCreateProjectRequestWithBody(server string, params *CreateProjectParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProjectRequest generates requests for DeleteProject
func NewDeleteProjectRequest(server string, projectGid ProjectPathGid, params *DeleteProjectParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_gid", runtime.ParamLocationPath, projectGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectRequest generates requests for GetProject
func NewGetProjectRequest(server string, projectGid ProjectPathGid, params *GetProjectParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_gid", runtime.ParamLocationPath, projectGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateProjectRequest calls the generic UpdateProject builder with application/json body
func NewUpdateProjectRequest(server string, projectGid ProjectPathGid, params *UpdateProjectParams, body UpdateProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProjectRequestWithBody(server, projectGid, params, "application/json", bodyReader)
}

// NewUpdateProjectRequestWithBody generates requests for UpdateProject with any type of body
func NewUpdateProjectRequestWithBody(server string, projectGid ProjectPathGid, params *UpdateProjectParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_gid", runtime.ParamLocationPath, projectGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddCustomFieldSettingForProjectRequest calls the generic AddCustomFieldSettingForProject builder with application/json body
func NewAddCustomFieldSettingForProjectRequest(server string, projectGid ProjectPathGid, params *AddCustomFieldSettingForProjectParams, body AddCustomFieldSettingForProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCustomFieldSettingForProjectRequestWithBody(server, projectGid, params, "application/json", bodyReader)
}

// NewAddCustomFieldSettingForProjectRequestWithBody generates requests for AddCustomFieldSettingForProject with any type of body
func NewAddCustomFieldSettingForProjectRequestWithBody(server string, projectGid ProjectPathGid, params *AddCustomFieldSettingForProjectParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_gid", runtime.ParamLocationPath, projectGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/addCustomFieldSetting", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddFollowersForProjectRequest calls the generic AddFollowersForProject builder with application/json body
func NewAddFollowersForProjectRequest(server string, projectGid ProjectPathGid, params *AddFollowersForProjectParams, body AddFollowersForProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddFollowersForProjectRequestWithBody(server, projectGid, params, "application/json", bodyReader)
}

// NewAddFollowersForProjectRequestWithBody generates requests for AddFollowersForProject with any type of body
func NewAddFollowersForProjectRequestWithBody(server string, projectGid ProjectPathGid, params *AddFollowersForProjectParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_gid", runtime.ParamLocationPath, projectGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/addFollowers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddMembersForProjectRequest calls the generic AddMembersForProject builder with application/json body
func NewAddMembersForProjectRequest(server string, projectGid ProjectPathGid, params *AddMembersForProjectParams, body AddMembersForProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddMembersForProjectRequestWithBody(server, projectGid, params, "application/json", bodyReader)
}

// NewAddMembersForProjectRequestWithBody generates requests for AddMembersForProject with any type of body
func NewAddMembersForProjectRequestWithBody(server string, projectGid ProjectPathGid, params *AddMembersForProjectParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_gid", runtime.ParamLocationPath, projectGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/addMembers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomFieldSettingsForProjectRequest generates requests for GetCustomFieldSettingsForProject
func NewGetCustomFieldSettingsForProjectRequest(server string, projectGid ProjectPathGid, params *GetCustomFieldSettingsForProjectParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_gid", runtime.ParamLocationPath, projectGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/custom_field_settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDuplicateProjectRequest calls the generic DuplicateProject builder with application/json body
func NewDuplicateProjectRequest(server string, projectGid ProjectPathGid, params *DuplicateProjectParams, body DuplicateProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDuplicateProjectRequestWithBody(server, projectGid, params, "application/json", bodyReader)
}

// NewDuplicateProjectRequestWithBody generates requests for DuplicateProject with any type of body
func NewDuplicateProjectRequestWithBody(server string, projectGid ProjectPathGid, params *DuplicateProjectParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_gid", runtime.ParamLocationPath, projectGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/duplicate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectMembershipsForProjectRequest generates requests for GetProjectMembershipsForProject
func NewGetProjectMembershipsForProjectRequest(server string, projectGid ProjectPathGid, params *GetProjectMembershipsForProjectParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_gid", runtime.ParamLocationPath, projectGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/project_memberships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.User != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectStatusesForProjectRequest generates requests for GetProjectStatusesForProject
func NewGetProjectStatusesForProjectRequest(server string, projectGid ProjectPathGid, params *GetProjectStatusesForProjectParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_gid", runtime.ParamLocationPath, projectGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/project_statuses", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProjectStatusForProjectRequest calls the generic CreateProjectStatusForProject builder with application/json body
func NewCreateProjectStatusForProjectRequest(server string, projectGid ProjectPathGid, params *CreateProjectStatusForProjectParams, body CreateProjectStatusForProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProjectStatusForProjectRequestWithBody(server, projectGid, params, "application/json", bodyReader)
}

// NewCreateProjectStatusForProjectRequestWithBody generates requests for CreateProjectStatusForProject with any type of body
func NewCreateProjectStatusForProjectRequestWithBody(server string, projectGid ProjectPathGid, params *CreateProjectStatusForProjectParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_gid", runtime.ParamLocationPath, projectGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/project_statuses", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveCustomFieldSettingForProjectRequest calls the generic RemoveCustomFieldSettingForProject builder with application/json body
func NewRemoveCustomFieldSettingForProjectRequest(server string, projectGid ProjectPathGid, params *RemoveCustomFieldSettingForProjectParams, body RemoveCustomFieldSettingForProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveCustomFieldSettingForProjectRequestWithBody(server, projectGid, params, "application/json", bodyReader)
}

// NewRemoveCustomFieldSettingForProjectRequestWithBody generates requests for RemoveCustomFieldSettingForProject with any type of body
func NewRemoveCustomFieldSettingForProjectRequestWithBody(server string, projectGid ProjectPathGid, params *RemoveCustomFieldSettingForProjectParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_gid", runtime.ParamLocationPath, projectGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/removeCustomFieldSetting", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveFollowersForProjectRequest calls the generic RemoveFollowersForProject builder with application/json body
func NewRemoveFollowersForProjectRequest(server string, projectGid ProjectPathGid, params *RemoveFollowersForProjectParams, body RemoveFollowersForProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveFollowersForProjectRequestWithBody(server, projectGid, params, "application/json", bodyReader)
}

// NewRemoveFollowersForProjectRequestWithBody generates requests for RemoveFollowersForProject with any type of body
func NewRemoveFollowersForProjectRequestWithBody(server string, projectGid ProjectPathGid, params *RemoveFollowersForProjectParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_gid", runtime.ParamLocationPath, projectGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/removeFollowers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveMembersForProjectRequest calls the generic RemoveMembersForProject builder with application/json body
func NewRemoveMembersForProjectRequest(server string, projectGid ProjectPathGid, params *RemoveMembersForProjectParams, body RemoveMembersForProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveMembersForProjectRequestWithBody(server, projectGid, params, "application/json", bodyReader)
}

// NewRemoveMembersForProjectRequestWithBody generates requests for RemoveMembersForProject with any type of body
func NewRemoveMembersForProjectRequestWithBody(server string, projectGid ProjectPathGid, params *RemoveMembersForProjectParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_gid", runtime.ParamLocationPath, projectGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/removeMembers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSectionsForProjectRequest generates requests for GetSectionsForProject
func NewGetSectionsForProjectRequest(server string, projectGid ProjectPathGid, params *GetSectionsForProjectParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_gid", runtime.ParamLocationPath, projectGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/sections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSectionForProjectRequest calls the generic CreateSectionForProject builder with application/json body
func NewCreateSectionForProjectRequest(server string, projectGid ProjectPathGid, params *CreateSectionForProjectParams, body CreateSectionForProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSectionForProjectRequestWithBody(server, projectGid, params, "application/json", bodyReader)
}

// NewCreateSectionForProjectRequestWithBody generates requests for CreateSectionForProject with any type of body
func NewCreateSectionForProjectRequestWithBody(server string, projectGid ProjectPathGid, params *CreateSectionForProjectParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_gid", runtime.ParamLocationPath, projectGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/sections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsertSectionForProjectRequest calls the generic InsertSectionForProject builder with application/json body
func NewInsertSectionForProjectRequest(server string, projectGid ProjectPathGid, params *InsertSectionForProjectParams, body InsertSectionForProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsertSectionForProjectRequestWithBody(server, projectGid, params, "application/json", bodyReader)
}

// NewInsertSectionForProjectRequestWithBody generates requests for InsertSectionForProject with any type of body
func NewInsertSectionForProjectRequestWithBody(server string, projectGid ProjectPathGid, params *InsertSectionForProjectParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_gid", runtime.ParamLocationPath, projectGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/sections/insert", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTaskCountsForProjectRequest generates requests for GetTaskCountsForProject
func NewGetTaskCountsForProjectRequest(server string, projectGid ProjectPathGid, params *GetTaskCountsForProjectParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_gid", runtime.ParamLocationPath, projectGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/task_counts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTasksForProjectRequest generates requests for GetTasksForProject
func NewGetTasksForProjectRequest(server string, projectGid ProjectPathGid, params *GetTasksForProjectParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_gid", runtime.ParamLocationPath, projectGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSectionRequest generates requests for DeleteSection
func NewDeleteSectionRequest(server string, sectionGid SectionPathGid, params *DeleteSectionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "section_gid", runtime.ParamLocationPath, sectionGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSectionRequest generates requests for GetSection
func NewGetSectionRequest(server string, sectionGid SectionPathGid, params *GetSectionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "section_gid", runtime.ParamLocationPath, sectionGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSectionRequest calls the generic UpdateSection builder with application/json body
func NewUpdateSectionRequest(server string, sectionGid SectionPathGid, params *UpdateSectionParams, body UpdateSectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSectionRequestWithBody(server, sectionGid, params, "application/json", bodyReader)
}

// NewUpdateSectionRequestWithBody generates requests for UpdateSection with any type of body
func NewUpdateSectionRequestWithBody(server string, sectionGid SectionPathGid, params *UpdateSectionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "section_gid", runtime.ParamLocationPath, sectionGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddTaskForSectionRequest calls the generic AddTaskForSection builder with application/json body
func NewAddTaskForSectionRequest(server string, sectionGid SectionPathGid, params *AddTaskForSectionParams, body AddTaskForSectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddTaskForSectionRequestWithBody(server, sectionGid, params, "application/json", bodyReader)
}

// NewAddTaskForSectionRequestWithBody generates requests for AddTaskForSection with any type of body
func NewAddTaskForSectionRequestWithBody(server string, sectionGid SectionPathGid, params *AddTaskForSectionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "section_gid", runtime.ParamLocationPath, sectionGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sections/%s/addTask", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTasksForSectionRequest generates requests for GetTasksForSection
func NewGetTasksForSectionRequest(server string, sectionGid SectionPathGid, params *GetTasksForSectionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "section_gid", runtime.ParamLocationPath, sectionGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sections/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteStoryRequest generates requests for DeleteStory
func NewDeleteStoryRequest(server string, storyGid StoryPathGid, params *DeleteStoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "story_gid", runtime.ParamLocationPath, storyGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStoryRequest generates requests for GetStory
func NewGetStoryRequest(server string, storyGid StoryPathGid, params *GetStoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "story_gid", runtime.ParamLocationPath, storyGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateStoryRequest calls the generic UpdateStory builder with application/json body
func NewUpdateStoryRequest(server string, storyGid StoryPathGid, params *UpdateStoryParams, body UpdateStoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateStoryRequestWithBody(server, storyGid, params, "application/json", bodyReader)
}

// NewUpdateStoryRequestWithBody generates requests for UpdateStory with any type of body
func NewUpdateStoryRequestWithBody(server string, storyGid StoryPathGid, params *UpdateStoryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "story_gid", runtime.ParamLocationPath, storyGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTagsRequest generates requests for GetTags
func NewGetTagsRequest(server string, params *GetTagsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Workspace != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspace", runtime.ParamLocationQuery, *params.Workspace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTagRequest calls the generic CreateTag builder with application/json body
func NewCreateTagRequest(server string, params *CreateTagParams, body CreateTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTagRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateTagRequestWithBody generates requests for CreateTag with any type of body
func NewCreateTagRequestWithBody(server string, params *CreateTagParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTagRequest generates requests for DeleteTag
func NewDeleteTagRequest(server string, tagGid TagPathGid, params *DeleteTagParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tag_gid", runtime.ParamLocationPath, tagGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagRequest generates requests for GetTag
func NewGetTagRequest(server string, tagGid TagPathGid, params *GetTagParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tag_gid", runtime.ParamLocationPath, tagGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTagRequest generates requests for UpdateTag
func NewUpdateTagRequest(server string, tagGid TagPathGid, params *UpdateTagParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tag_gid", runtime.ParamLocationPath, tagGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTasksForTagRequest generates requests for GetTasksForTag
func NewGetTasksForTagRequest(server string, tagGid TagPathGid, params *GetTasksForTagParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tag_gid", runtime.ParamLocationPath, tagGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTasksRequest generates requests for GetTasks
func NewGetTasksRequest(server string, params *GetTasksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Assignee != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assignee", runtime.ParamLocationQuery, *params.Assignee); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Project != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Section != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "section", runtime.ParamLocationQuery, *params.Section); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Workspace != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspace", runtime.ParamLocationQuery, *params.Workspace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CompletedSince != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed_since", runtime.ParamLocationQuery, *params.CompletedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ModifiedSince != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_since", runtime.ParamLocationQuery, *params.ModifiedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTaskRequest calls the generic CreateTask builder with application/json body
func NewCreateTaskRequest(server string, params *CreateTaskParams, body CreateTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTaskRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateTaskRequestWithBody generates requests for CreateTask with any type of body
func NewCreateTaskRequestWithBody(server string, params *CreateTaskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTaskRequest generates requests for DeleteTask
func NewDeleteTaskRequest(server string, taskGid TaskPathGid, params *DeleteTaskParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskRequest generates requests for GetTask
func NewGetTaskRequest(server string, taskGid TaskPathGid, params *GetTaskParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTaskRequest calls the generic UpdateTask builder with application/json body
func NewUpdateTaskRequest(server string, taskGid TaskPathGid, params *UpdateTaskParams, body UpdateTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTaskRequestWithBody(server, taskGid, params, "application/json", bodyReader)
}

// NewUpdateTaskRequestWithBody generates requests for UpdateTask with any type of body
func NewUpdateTaskRequestWithBody(server string, taskGid TaskPathGid, params *UpdateTaskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddDependenciesForTaskRequest calls the generic AddDependenciesForTask builder with application/json body
func NewAddDependenciesForTaskRequest(server string, taskGid TaskPathGid, params *AddDependenciesForTaskParams, body AddDependenciesForTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddDependenciesForTaskRequestWithBody(server, taskGid, params, "application/json", bodyReader)
}

// NewAddDependenciesForTaskRequestWithBody generates requests for AddDependenciesForTask with any type of body
func NewAddDependenciesForTaskRequestWithBody(server string, taskGid TaskPathGid, params *AddDependenciesForTaskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/addDependencies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddDependentsForTaskRequest calls the generic AddDependentsForTask builder with application/json body
func NewAddDependentsForTaskRequest(server string, taskGid TaskPathGid, params *AddDependentsForTaskParams, body AddDependentsForTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddDependentsForTaskRequestWithBody(server, taskGid, params, "application/json", bodyReader)
}

// NewAddDependentsForTaskRequestWithBody generates requests for AddDependentsForTask with any type of body
func NewAddDependentsForTaskRequestWithBody(server string, taskGid TaskPathGid, params *AddDependentsForTaskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/addDependents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddFollowersForTaskRequest calls the generic AddFollowersForTask builder with application/json body
func NewAddFollowersForTaskRequest(server string, taskGid TaskPathGid, params *AddFollowersForTaskParams, body AddFollowersForTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddFollowersForTaskRequestWithBody(server, taskGid, params, "application/json", bodyReader)
}

// NewAddFollowersForTaskRequestWithBody generates requests for AddFollowersForTask with any type of body
func NewAddFollowersForTaskRequestWithBody(server string, taskGid TaskPathGid, params *AddFollowersForTaskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/addFollowers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddProjectForTaskRequest calls the generic AddProjectForTask builder with application/json body
func NewAddProjectForTaskRequest(server string, taskGid TaskPathGid, params *AddProjectForTaskParams, body AddProjectForTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddProjectForTaskRequestWithBody(server, taskGid, params, "application/json", bodyReader)
}

// NewAddProjectForTaskRequestWithBody generates requests for AddProjectForTask with any type of body
func NewAddProjectForTaskRequestWithBody(server string, taskGid TaskPathGid, params *AddProjectForTaskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/addProject", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddTagForTaskRequest calls the generic AddTagForTask builder with application/json body
func NewAddTagForTaskRequest(server string, taskGid TaskPathGid, params *AddTagForTaskParams, body AddTagForTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddTagForTaskRequestWithBody(server, taskGid, params, "application/json", bodyReader)
}

// NewAddTagForTaskRequestWithBody generates requests for AddTagForTask with any type of body
func NewAddTagForTaskRequestWithBody(server string, taskGid TaskPathGid, params *AddTagForTaskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/addTag", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAttachmentsForTaskRequest generates requests for GetAttachmentsForTask
func NewGetAttachmentsForTaskRequest(server string, taskGid TaskPathGid, params *GetAttachmentsForTaskParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAttachmentForTaskRequestWithBody generates requests for CreateAttachmentForTask with any type of body
func NewCreateAttachmentForTaskRequestWithBody(server string, taskGid TaskPathGid, params *CreateAttachmentForTaskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDependenciesForTaskRequest generates requests for GetDependenciesForTask
func NewGetDependenciesForTaskRequest(server string, taskGid TaskPathGid, params *GetDependenciesForTaskParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/dependencies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDependentsForTaskRequest generates requests for GetDependentsForTask
func NewGetDependentsForTaskRequest(server string, taskGid TaskPathGid, params *GetDependentsForTaskParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/dependents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDuplicateTaskRequest calls the generic DuplicateTask builder with application/json body
func NewDuplicateTaskRequest(server string, taskGid TaskPathGid, params *DuplicateTaskParams, body DuplicateTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDuplicateTaskRequestWithBody(server, taskGid, params, "application/json", bodyReader)
}

// NewDuplicateTaskRequestWithBody generates requests for DuplicateTask with any type of body
func NewDuplicateTaskRequestWithBody(server string, taskGid TaskPathGid, params *DuplicateTaskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/duplicate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectsForTaskRequest generates requests for GetProjectsForTask
func NewGetProjectsForTaskRequest(server string, taskGid TaskPathGid, params *GetProjectsForTaskParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/projects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveDependenciesForTaskRequest calls the generic RemoveDependenciesForTask builder with application/json body
func NewRemoveDependenciesForTaskRequest(server string, taskGid TaskPathGid, params *RemoveDependenciesForTaskParams, body RemoveDependenciesForTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveDependenciesForTaskRequestWithBody(server, taskGid, params, "application/json", bodyReader)
}

// NewRemoveDependenciesForTaskRequestWithBody generates requests for RemoveDependenciesForTask with any type of body
func NewRemoveDependenciesForTaskRequestWithBody(server string, taskGid TaskPathGid, params *RemoveDependenciesForTaskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/removeDependencies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveDependentsForTaskRequest calls the generic RemoveDependentsForTask builder with application/json body
func NewRemoveDependentsForTaskRequest(server string, taskGid TaskPathGid, params *RemoveDependentsForTaskParams, body RemoveDependentsForTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveDependentsForTaskRequestWithBody(server, taskGid, params, "application/json", bodyReader)
}

// NewRemoveDependentsForTaskRequestWithBody generates requests for RemoveDependentsForTask with any type of body
func NewRemoveDependentsForTaskRequestWithBody(server string, taskGid TaskPathGid, params *RemoveDependentsForTaskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/removeDependents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveFollowerForTaskRequest calls the generic RemoveFollowerForTask builder with application/json body
func NewRemoveFollowerForTaskRequest(server string, taskGid TaskPathGid, params *RemoveFollowerForTaskParams, body RemoveFollowerForTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveFollowerForTaskRequestWithBody(server, taskGid, params, "application/json", bodyReader)
}

// NewRemoveFollowerForTaskRequestWithBody generates requests for RemoveFollowerForTask with any type of body
func NewRemoveFollowerForTaskRequestWithBody(server string, taskGid TaskPathGid, params *RemoveFollowerForTaskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/removeFollowers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveProjectForTaskRequest calls the generic RemoveProjectForTask builder with application/json body
func NewRemoveProjectForTaskRequest(server string, taskGid TaskPathGid, params *RemoveProjectForTaskParams, body RemoveProjectForTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveProjectForTaskRequestWithBody(server, taskGid, params, "application/json", bodyReader)
}

// NewRemoveProjectForTaskRequestWithBody generates requests for RemoveProjectForTask with any type of body
func NewRemoveProjectForTaskRequestWithBody(server string, taskGid TaskPathGid, params *RemoveProjectForTaskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/removeProject", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveTagForTaskRequest calls the generic RemoveTagForTask builder with application/json body
func NewRemoveTagForTaskRequest(server string, taskGid TaskPathGid, params *RemoveTagForTaskParams, body RemoveTagForTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveTagForTaskRequestWithBody(server, taskGid, params, "application/json", bodyReader)
}

// NewRemoveTagForTaskRequestWithBody generates requests for RemoveTagForTask with any type of body
func NewRemoveTagForTaskRequestWithBody(server string, taskGid TaskPathGid, params *RemoveTagForTaskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/removeTag", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetParentForTaskRequest calls the generic SetParentForTask builder with application/json body
func NewSetParentForTaskRequest(server string, taskGid TaskPathGid, params *SetParentForTaskParams, body SetParentForTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetParentForTaskRequestWithBody(server, taskGid, params, "application/json", bodyReader)
}

// NewSetParentForTaskRequestWithBody generates requests for SetParentForTask with any type of body
func NewSetParentForTaskRequestWithBody(server string, taskGid TaskPathGid, params *SetParentForTaskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/setParent", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStoriesForTaskRequest generates requests for GetStoriesForTask
func NewGetStoriesForTaskRequest(server string, taskGid TaskPathGid, params *GetStoriesForTaskParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/stories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStoryForTaskRequest calls the generic CreateStoryForTask builder with application/json body
func NewCreateStoryForTaskRequest(server string, taskGid TaskPathGid, params *CreateStoryForTaskParams, body CreateStoryForTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateStoryForTaskRequestWithBody(server, taskGid, params, "application/json", bodyReader)
}

// NewCreateStoryForTaskRequestWithBody generates requests for CreateStoryForTask with any type of body
func NewCreateStoryForTaskRequestWithBody(server string, taskGid TaskPathGid, params *CreateStoryForTaskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/stories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSubtasksForTaskRequest generates requests for GetSubtasksForTask
func NewGetSubtasksForTaskRequest(server string, taskGid TaskPathGid, params *GetSubtasksForTaskParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/subtasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSubtaskForTaskRequest calls the generic CreateSubtaskForTask builder with application/json body
func NewCreateSubtaskForTaskRequest(server string, taskGid TaskPathGid, params *CreateSubtaskForTaskParams, body CreateSubtaskForTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSubtaskForTaskRequestWithBody(server, taskGid, params, "application/json", bodyReader)
}

// NewCreateSubtaskForTaskRequestWithBody generates requests for CreateSubtaskForTask with any type of body
func NewCreateSubtaskForTaskRequestWithBody(server string, taskGid TaskPathGid, params *CreateSubtaskForTaskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/subtasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTagsForTaskRequest generates requests for GetTagsForTask
func NewGetTagsForTaskRequest(server string, taskGid TaskPathGid, params *GetTagsForTaskParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_gid", runtime.ParamLocationPath, taskGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamMembershipsRequest generates requests for GetTeamMemberships
func NewGetTeamMembershipsRequest(server string, params *GetTeamMembershipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team_memberships")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Team != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team", runtime.ParamLocationQuery, *params.Team); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.User != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Workspace != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspace", runtime.ParamLocationQuery, *params.Workspace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamMembershipRequest generates requests for GetTeamMembership
func NewGetTeamMembershipRequest(server string, teamMembershipGid TeamMembershipPathGid, params *GetTeamMembershipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_membership_gid", runtime.ParamLocationPath, teamMembershipGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team_memberships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamRequest calls the generic CreateTeam builder with application/json body
func NewCreateTeamRequest(server string, params *CreateTeamParams, body CreateTeamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTeamRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateTeamRequestWithBody generates requests for CreateTeam with any type of body
func NewCreateTeamRequestWithBody(server string, params *CreateTeamParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTeamRequest generates requests for GetTeam
func NewGetTeamRequest(server string, teamGid TeamPathGid, params *GetTeamParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_gid", runtime.ParamLocationPath, teamGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddUserForTeamRequest calls the generic AddUserForTeam builder with application/json body
func NewAddUserForTeamRequest(server string, teamGid TeamPathGid, params *AddUserForTeamParams, body AddUserForTeamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddUserForTeamRequestWithBody(server, teamGid, params, "application/json", bodyReader)
}

// NewAddUserForTeamRequestWithBody generates requests for AddUserForTeam with any type of body
func NewAddUserForTeamRequestWithBody(server string, teamGid TeamPathGid, params *AddUserForTeamParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_gid", runtime.ParamLocationPath, teamGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/addUser", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectsForTeamRequest generates requests for GetProjectsForTeam
func NewGetProjectsForTeamRequest(server string, teamGid TeamPathGid, params *GetProjectsForTeamParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_gid", runtime.ParamLocationPath, teamGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/projects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Archived != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProjectForTeamRequest calls the generic CreateProjectForTeam builder with application/json body
func NewCreateProjectForTeamRequest(server string, teamGid TeamPathGid, params *CreateProjectForTeamParams, body CreateProjectForTeamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProjectForTeamRequestWithBody(server, teamGid, params, "application/json", bodyReader)
}

// NewCreateProjectForTeamRequestWithBody generates requests for CreateProjectForTeam with any type of body
func NewCreateProjectForTeamRequestWithBody(server string, teamGid TeamPathGid, params *CreateProjectForTeamParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_gid", runtime.ParamLocationPath, teamGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/projects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveUserForTeamRequest calls the generic RemoveUserForTeam builder with application/json body
func NewRemoveUserForTeamRequest(server string, teamGid TeamPathGid, params *RemoveUserForTeamParams, body RemoveUserForTeamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveUserForTeamRequestWithBody(server, teamGid, params, "application/json", bodyReader)
}

// NewRemoveUserForTeamRequestWithBody generates requests for RemoveUserForTeam with any type of body
func NewRemoveUserForTeamRequestWithBody(server string, teamGid TeamPathGid, params *RemoveUserForTeamParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_gid", runtime.ParamLocationPath, teamGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/removeUser", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTeamMembershipsForTeamRequest generates requests for GetTeamMembershipsForTeam
func NewGetTeamMembershipsForTeamRequest(server string, teamGid TeamPathGid, params *GetTeamMembershipsForTeamParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_gid", runtime.ParamLocationPath, teamGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/team_memberships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersForTeamRequest generates requests for GetUsersForTeam
func NewGetUsersForTeamRequest(server string, teamGid TeamPathGid, params *GetUsersForTeamParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_gid", runtime.ParamLocationPath, teamGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserTaskListRequest generates requests for GetUserTaskList
func NewGetUserTaskListRequest(server string, userTaskListGid UserTaskListPathGid, params *GetUserTaskListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_task_list_gid", runtime.ParamLocationPath, userTaskListGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user_task_lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTasksForUserTaskListRequest generates requests for GetTasksForUserTaskList
func NewGetTasksForUserTaskListRequest(server string, userTaskListGid UserTaskListPathGid, params *GetTasksForUserTaskListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_task_list_gid", runtime.ParamLocationPath, userTaskListGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user_task_lists/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.CompletedSince != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed_since", runtime.ParamLocationQuery, *params.CompletedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Workspace != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspace", runtime.ParamLocationQuery, *params.Workspace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Team != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team", runtime.ParamLocationQuery, *params.Team); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, userGid UserPathGid, params *GetUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_gid", runtime.ParamLocationPath, userGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFavoritesForUserRequest generates requests for GetFavoritesForUser
func NewGetFavoritesForUserRequest(server string, userGid UserPathGid, params *GetFavoritesForUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_gid", runtime.ParamLocationPath, userGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/favorites", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource_type", runtime.ParamLocationQuery, params.ResourceType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspace", runtime.ParamLocationQuery, params.Workspace); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamMembershipsForUserRequest generates requests for GetTeamMembershipsForUser
func NewGetTeamMembershipsForUserRequest(server string, userGid UserPathGid, params *GetTeamMembershipsForUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_gid", runtime.ParamLocationPath, userGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/team_memberships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspace", runtime.ParamLocationQuery, params.Workspace); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamsForUserRequest generates requests for GetTeamsForUser
func NewGetTeamsForUserRequest(server string, userGid UserPathGid, params *GetTeamsForUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_gid", runtime.ParamLocationPath, userGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/teams", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization", runtime.ParamLocationQuery, params.Organization); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserTaskListForUserRequest generates requests for GetUserTaskListForUser
func NewGetUserTaskListForUserRequest(server string, userGid UserPathGid, params *GetUserTaskListForUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_gid", runtime.ParamLocationPath, userGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/user_task_list", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspace", runtime.ParamLocationQuery, params.Workspace); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspaceMembershipsForUserRequest generates requests for GetWorkspaceMembershipsForUser
func NewGetWorkspaceMembershipsForUserRequest(server string, userGid UserPathGid, params *GetWorkspaceMembershipsForUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_gid", runtime.ParamLocationPath, userGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/workspace_memberships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWebhooksRequest generates requests for GetWebhooks
func NewGetWebhooksRequest(server string, params *GetWebhooksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspace", runtime.ParamLocationQuery, params.Workspace); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Resource != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource", runtime.ParamLocationQuery, *params.Resource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWebhookRequest calls the generic CreateWebhook builder with application/json body
func NewCreateWebhookRequest(server string, params *CreateWebhookParams, body CreateWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWebhookRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateWebhookRequestWithBody generates requests for CreateWebhook with any type of body
func NewCreateWebhookRequestWithBody(server string, params *CreateWebhookParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWebhookRequest generates requests for DeleteWebhook
func NewDeleteWebhookRequest(server string, webhookGid WebhookPathGid, params *DeleteWebhookParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhook_gid", runtime.ParamLocationPath, webhookGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWebhookRequest generates requests for GetWebhook
func NewGetWebhookRequest(server string, webhookGid WebhookPathGid, params *GetWebhookParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhook_gid", runtime.ParamLocationPath, webhookGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspaceMembershipRequest generates requests for GetWorkspaceMembership
func NewGetWorkspaceMembershipRequest(server string, workspaceMembershipGid WorkspaceMembershipPathGid, params *GetWorkspaceMembershipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_membership_gid", runtime.ParamLocationPath, workspaceMembershipGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspace_memberships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspacesRequest generates requests for GetWorkspaces
func NewGetWorkspacesRequest(server string, params *GetWorkspacesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspaceRequest generates requests for GetWorkspace
func NewGetWorkspaceRequest(server string, workspaceGid WorkspacePathGid, params *GetWorkspaceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_gid", runtime.ParamLocationPath, workspaceGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkspaceRequest calls the generic UpdateWorkspace builder with application/json body
func NewUpdateWorkspaceRequest(server string, workspaceGid WorkspacePathGid, params *UpdateWorkspaceParams, body UpdateWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkspaceRequestWithBody(server, workspaceGid, params, "application/json", bodyReader)
}

// NewUpdateWorkspaceRequestWithBody generates requests for UpdateWorkspace with any type of body
func NewUpdateWorkspaceRequestWithBody(server string, workspaceGid WorkspacePathGid, params *UpdateWorkspaceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_gid", runtime.ParamLocationPath, workspaceGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddUserForWorkspaceRequest calls the generic AddUserForWorkspace builder with application/json body
func NewAddUserForWorkspaceRequest(server string, workspaceGid WorkspacePathGid, params *AddUserForWorkspaceParams, body AddUserForWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddUserForWorkspaceRequestWithBody(server, workspaceGid, params, "application/json", bodyReader)
}

// NewAddUserForWorkspaceRequestWithBody generates requests for AddUserForWorkspace with any type of body
func NewAddUserForWorkspaceRequestWithBody(server string, workspaceGid WorkspacePathGid, params *AddUserForWorkspaceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_gid", runtime.ParamLocationPath, workspaceGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/addUser", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomFieldsForWorkspaceRequest generates requests for GetCustomFieldsForWorkspace
func NewGetCustomFieldsForWorkspaceRequest(server string, workspaceGid WorkspacePathGid, params *GetCustomFieldsForWorkspaceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_gid", runtime.ParamLocationPath, workspaceGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/custom_fields", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsForWorkspaceRequest generates requests for GetProjectsForWorkspace
func NewGetProjectsForWorkspaceRequest(server string, workspaceGid WorkspacePathGid, params *GetProjectsForWorkspaceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_gid", runtime.ParamLocationPath, workspaceGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Archived != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProjectForWorkspaceRequest calls the generic CreateProjectForWorkspace builder with application/json body
func NewCreateProjectForWorkspaceRequest(server string, workspaceGid WorkspacePathGid, params *CreateProjectForWorkspaceParams, body CreateProjectForWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProjectForWorkspaceRequestWithBody(server, workspaceGid, params, "application/json", bodyReader)
}

// NewCreateProjectForWorkspaceRequestWithBody generates requests for CreateProjectForWorkspace with any type of body
func NewCreateProjectForWorkspaceRequestWithBody(server string, workspaceGid WorkspacePathGid, params *CreateProjectForWorkspaceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_gid", runtime.ParamLocationPath, workspaceGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveUserForWorkspaceRequest calls the generic RemoveUserForWorkspace builder with application/json body
func NewRemoveUserForWorkspaceRequest(server string, workspaceGid WorkspacePathGid, params *RemoveUserForWorkspaceParams, body RemoveUserForWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveUserForWorkspaceRequestWithBody(server, workspaceGid, params, "application/json", bodyReader)
}

// NewRemoveUserForWorkspaceRequestWithBody generates requests for RemoveUserForWorkspace with any type of body
func NewRemoveUserForWorkspaceRequestWithBody(server string, workspaceGid WorkspacePathGid, params *RemoveUserForWorkspaceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_gid", runtime.ParamLocationPath, workspaceGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/removeUser", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTagsForWorkspaceRequest generates requests for GetTagsForWorkspace
func NewGetTagsForWorkspaceRequest(server string, workspaceGid WorkspacePathGid, params *GetTagsForWorkspaceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_gid", runtime.ParamLocationPath, workspaceGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTagForWorkspaceRequest calls the generic CreateTagForWorkspace builder with application/json body
func NewCreateTagForWorkspaceRequest(server string, workspaceGid WorkspacePathGid, params *CreateTagForWorkspaceParams, body CreateTagForWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTagForWorkspaceRequestWithBody(server, workspaceGid, params, "application/json", bodyReader)
}

// NewCreateTagForWorkspaceRequestWithBody generates requests for CreateTagForWorkspace with any type of body
func NewCreateTagForWorkspaceRequestWithBody(server string, workspaceGid WorkspacePathGid, params *CreateTagForWorkspaceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_gid", runtime.ParamLocationPath, workspaceGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchTasksForWorkspaceRequest generates requests for SearchTasksForWorkspace
func NewSearchTasksForWorkspaceRequest(server string, workspaceGid WorkspacePathGid, params *SearchTasksForWorkspaceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_gid", runtime.ParamLocationPath, workspaceGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/tasks/search", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Text != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text", runtime.ParamLocationQuery, *params.Text); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ResourceSubtype != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource_subtype", runtime.ParamLocationQuery, *params.ResourceSubtype); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AssigneeAny != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assignee.any", runtime.ParamLocationQuery, *params.AssigneeAny); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AssigneeNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assignee.not", runtime.ParamLocationQuery, *params.AssigneeNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PortfoliosAny != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portfolios.any", runtime.ParamLocationQuery, *params.PortfoliosAny); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProjectsAny != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projects.any", runtime.ParamLocationQuery, *params.ProjectsAny); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProjectsNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projects.not", runtime.ParamLocationQuery, *params.ProjectsNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProjectsAll != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projects.all", runtime.ParamLocationQuery, *params.ProjectsAll); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SectionsAny != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sections.any", runtime.ParamLocationQuery, *params.SectionsAny); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SectionsNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sections.not", runtime.ParamLocationQuery, *params.SectionsNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SectionsAll != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sections.all", runtime.ParamLocationQuery, *params.SectionsAll); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TagsAny != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags.any", runtime.ParamLocationQuery, *params.TagsAny); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TagsNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags.not", runtime.ParamLocationQuery, *params.TagsNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TagsAll != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags.all", runtime.ParamLocationQuery, *params.TagsAll); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TeamsAny != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "teams.any", runtime.ParamLocationQuery, *params.TeamsAny); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FollowersAny != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "followers.any", runtime.ParamLocationQuery, *params.FollowersAny); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FollowersNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "followers.not", runtime.ParamLocationQuery, *params.FollowersNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedByAny != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by.any", runtime.ParamLocationQuery, *params.CreatedByAny); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedByNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by.not", runtime.ParamLocationQuery, *params.CreatedByNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AssignedByAny != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assigned_by.any", runtime.ParamLocationQuery, *params.AssignedByAny); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AssignedByNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assigned_by.not", runtime.ParamLocationQuery, *params.AssignedByNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LikedByAny != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "liked_by.any", runtime.ParamLocationQuery, *params.LikedByAny); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LikedByNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "liked_by.not", runtime.ParamLocationQuery, *params.LikedByNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CommentedOnByAny != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "commented_on_by.any", runtime.ParamLocationQuery, *params.CommentedOnByAny); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CommentedOnByNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "commented_on_by.not", runtime.ParamLocationQuery, *params.CommentedOnByNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DueOnBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "due_on.before", runtime.ParamLocationQuery, *params.DueOnBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DueOnAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "due_on.after", runtime.ParamLocationQuery, *params.DueOnAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DueOn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "due_on", runtime.ParamLocationQuery, *params.DueOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DueAtBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "due_at.before", runtime.ParamLocationQuery, *params.DueAtBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DueAtAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "due_at.after", runtime.ParamLocationQuery, *params.DueAtAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartOnBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_on.before", runtime.ParamLocationQuery, *params.StartOnBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartOnAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_on.after", runtime.ParamLocationQuery, *params.StartOnAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartOn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_on", runtime.ParamLocationQuery, *params.StartOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedOnBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on.before", runtime.ParamLocationQuery, *params.CreatedOnBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedOnAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on.after", runtime.ParamLocationQuery, *params.CreatedOnAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedOn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, *params.CreatedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedAtBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at.before", runtime.ParamLocationQuery, *params.CreatedAtBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedAtAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at.after", runtime.ParamLocationQuery, *params.CreatedAtAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CompletedOnBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed_on.before", runtime.ParamLocationQuery, *params.CompletedOnBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CompletedOnAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed_on.after", runtime.ParamLocationQuery, *params.CompletedOnAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CompletedOn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed_on", runtime.ParamLocationQuery, *params.CompletedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CompletedAtBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed_at.before", runtime.ParamLocationQuery, *params.CompletedAtBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CompletedAtAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed_at.after", runtime.ParamLocationQuery, *params.CompletedAtAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ModifiedOnBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_on.before", runtime.ParamLocationQuery, *params.ModifiedOnBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ModifiedOnAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_on.after", runtime.ParamLocationQuery, *params.ModifiedOnAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ModifiedOn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_on", runtime.ParamLocationQuery, *params.ModifiedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ModifiedAtBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_at.before", runtime.ParamLocationQuery, *params.ModifiedAtBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ModifiedAtAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_at.after", runtime.ParamLocationQuery, *params.ModifiedAtAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsBlocking != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_blocking", runtime.ParamLocationQuery, *params.IsBlocking); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsBlocked != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_blocked", runtime.ParamLocationQuery, *params.IsBlocked); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HasAttachment != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "has_attachment", runtime.ParamLocationQuery, *params.HasAttachment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Completed != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed", runtime.ParamLocationQuery, *params.Completed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsSubtask != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_subtask", runtime.ParamLocationQuery, *params.IsSubtask); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_by", runtime.ParamLocationQuery, *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortAscending != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_ascending", runtime.ParamLocationQuery, *params.SortAscending); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTypeaheadForWorkspaceRequest generates requests for TypeaheadForWorkspace
func NewTypeaheadForWorkspaceRequest(server string, workspaceGid WorkspacePathGid, params *TypeaheadForWorkspaceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_gid", runtime.ParamLocationPath, workspaceGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/typeahead", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource_type", runtime.ParamLocationQuery, params.ResourceType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Query != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersForWorkspaceRequest generates requests for GetUsersForWorkspace
func NewGetUsersForWorkspaceRequest(server string, workspaceGid WorkspacePathGid, params *GetUsersForWorkspaceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_gid", runtime.ParamLocationPath, workspaceGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspaceMembershipsForWorkspaceRequest generates requests for GetWorkspaceMembershipsForWorkspace
func NewGetWorkspaceMembershipsForWorkspaceRequest(server string, workspaceGid WorkspacePathGid, params *GetWorkspaceMembershipsForWorkspaceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_gid", runtime.ParamLocationPath, workspaceGid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/workspace_memberships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.User != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptPretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt_pretty", runtime.ParamLocationQuery, *params.OptPretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OptFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "opt_fields", runtime.ParamLocationQuery, *params.OptFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteAttachment request
	DeleteAttachmentWithResponse(ctx context.Context, attachmentGid AttachmentPathGid, params *DeleteAttachmentParams, reqEditors ...RequestEditorFn) (*DeleteAttachmentResponse, error)

	// GetAttachment request
	GetAttachmentWithResponse(ctx context.Context, attachmentGid AttachmentPathGid, params *GetAttachmentParams, reqEditors ...RequestEditorFn) (*GetAttachmentResponse, error)

	// CreateBatchRequest request  with any body
	CreateBatchRequestWithBodyWithResponse(ctx context.Context, params *CreateBatchRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBatchRequestResponse, error)

	CreateBatchRequestWithResponse(ctx context.Context, params *CreateBatchRequestParams, body CreateBatchRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBatchRequestResponse, error)

	// CreateCustomField request  with any body
	CreateCustomFieldWithBodyWithResponse(ctx context.Context, params *CreateCustomFieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldResponse, error)

	CreateCustomFieldWithResponse(ctx context.Context, params *CreateCustomFieldParams, body CreateCustomFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomFieldResponse, error)

	// DeleteCustomField request
	DeleteCustomFieldWithResponse(ctx context.Context, customFieldGid CustomFieldPathGid, params *DeleteCustomFieldParams, reqEditors ...RequestEditorFn) (*DeleteCustomFieldResponse, error)

	// GetCustomField request
	GetCustomFieldWithResponse(ctx context.Context, customFieldGid CustomFieldPathGid, params *GetCustomFieldParams, reqEditors ...RequestEditorFn) (*GetCustomFieldResponse, error)

	// UpdateCustomField request  with any body
	UpdateCustomFieldWithBodyWithResponse(ctx context.Context, customFieldGid CustomFieldPathGid, params *UpdateCustomFieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldResponse, error)

	UpdateCustomFieldWithResponse(ctx context.Context, customFieldGid CustomFieldPathGid, params *UpdateCustomFieldParams, body UpdateCustomFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomFieldResponse, error)

	// CreateEnumOptionForCustomField request  with any body
	CreateEnumOptionForCustomFieldWithBodyWithResponse(ctx context.Context, customFieldGid CustomFieldPathGid, params *CreateEnumOptionForCustomFieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnumOptionForCustomFieldResponse, error)

	CreateEnumOptionForCustomFieldWithResponse(ctx context.Context, customFieldGid CustomFieldPathGid, params *CreateEnumOptionForCustomFieldParams, body CreateEnumOptionForCustomFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnumOptionForCustomFieldResponse, error)

	// InsertEnumOptionForCustomField request  with any body
	InsertEnumOptionForCustomFieldWithBodyWithResponse(ctx context.Context, customFieldGid CustomFieldPathGid, params *InsertEnumOptionForCustomFieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertEnumOptionForCustomFieldResponse, error)

	InsertEnumOptionForCustomFieldWithResponse(ctx context.Context, customFieldGid CustomFieldPathGid, params *InsertEnumOptionForCustomFieldParams, body InsertEnumOptionForCustomFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*InsertEnumOptionForCustomFieldResponse, error)

	// UpdateEnumOption request  with any body
	UpdateEnumOptionWithBodyWithResponse(ctx context.Context, enumOptionGid string, params *UpdateEnumOptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnumOptionResponse, error)

	UpdateEnumOptionWithResponse(ctx context.Context, enumOptionGid string, params *UpdateEnumOptionParams, body UpdateEnumOptionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEnumOptionResponse, error)

	// GetEvents request
	GetEventsWithResponse(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*GetEventsResponse, error)

	// GetGoals request
	GetGoalsWithResponse(ctx context.Context, params *GetGoalsParams, reqEditors ...RequestEditorFn) (*GetGoalsResponse, error)

	// DeleteGoal request
	DeleteGoalWithResponse(ctx context.Context, goalGid GoalPathGid, params *DeleteGoalParams, reqEditors ...RequestEditorFn) (*DeleteGoalResponse, error)

	// GetGoal request
	GetGoalWithResponse(ctx context.Context, goalGid GoalPathGid, params *GetGoalParams, reqEditors ...RequestEditorFn) (*GetGoalResponse, error)

	// UpdateGoal request  with any body
	UpdateGoalWithBodyWithResponse(ctx context.Context, goalGid GoalPathGid, params *UpdateGoalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGoalResponse, error)

	UpdateGoalWithResponse(ctx context.Context, goalGid GoalPathGid, params *UpdateGoalParams, body UpdateGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGoalResponse, error)

	// AddFollowers request  with any body
	AddFollowersWithBodyWithResponse(ctx context.Context, goalGid GoalPathGid, params *AddFollowersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddFollowersResponse, error)

	AddFollowersWithResponse(ctx context.Context, goalGid GoalPathGid, params *AddFollowersParams, body AddFollowersJSONRequestBody, reqEditors ...RequestEditorFn) (*AddFollowersResponse, error)

	// AddSubgoal request  with any body
	AddSubgoalWithBodyWithResponse(ctx context.Context, goalGid GoalPathGid, params *AddSubgoalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddSubgoalResponse, error)

	AddSubgoalWithResponse(ctx context.Context, goalGid GoalPathGid, params *AddSubgoalParams, body AddSubgoalJSONRequestBody, reqEditors ...RequestEditorFn) (*AddSubgoalResponse, error)

	// AddSupportingWorkForGoal request  with any body
	AddSupportingWorkForGoalWithBodyWithResponse(ctx context.Context, goalGid GoalPathGid, params *AddSupportingWorkForGoalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddSupportingWorkForGoalResponse, error)

	AddSupportingWorkForGoalWithResponse(ctx context.Context, goalGid GoalPathGid, params *AddSupportingWorkForGoalParams, body AddSupportingWorkForGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*AddSupportingWorkForGoalResponse, error)

	// GetParentGoalsForGoal request
	GetParentGoalsForGoalWithResponse(ctx context.Context, goalGid GoalPathGid, params *GetParentGoalsForGoalParams, reqEditors ...RequestEditorFn) (*GetParentGoalsForGoalResponse, error)

	// RemoveFollowers request  with any body
	RemoveFollowersWithBodyWithResponse(ctx context.Context, goalGid GoalPathGid, params *RemoveFollowersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveFollowersResponse, error)

	RemoveFollowersWithResponse(ctx context.Context, goalGid GoalPathGid, params *RemoveFollowersParams, body RemoveFollowersJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveFollowersResponse, error)

	// RemoveSubgoal request  with any body
	RemoveSubgoalWithBodyWithResponse(ctx context.Context, goalGid GoalPathGid, params *RemoveSubgoalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveSubgoalResponse, error)

	RemoveSubgoalWithResponse(ctx context.Context, goalGid GoalPathGid, params *RemoveSubgoalParams, body RemoveSubgoalJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveSubgoalResponse, error)

	// RemoveSupportingWorkForGoal request  with any body
	RemoveSupportingWorkForGoalWithBodyWithResponse(ctx context.Context, goalGid GoalPathGid, params *RemoveSupportingWorkForGoalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveSupportingWorkForGoalResponse, error)

	RemoveSupportingWorkForGoalWithResponse(ctx context.Context, goalGid GoalPathGid, params *RemoveSupportingWorkForGoalParams, body RemoveSupportingWorkForGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveSupportingWorkForGoalResponse, error)

	// CreateGoalMetric request  with any body
	CreateGoalMetricWithBodyWithResponse(ctx context.Context, goalGid GoalPathGid, params *CreateGoalMetricParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGoalMetricResponse, error)

	CreateGoalMetricWithResponse(ctx context.Context, goalGid GoalPathGid, params *CreateGoalMetricParams, body CreateGoalMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGoalMetricResponse, error)

	// UpdateGoalMetric request  with any body
	UpdateGoalMetricWithBodyWithResponse(ctx context.Context, goalGid GoalPathGid, params *UpdateGoalMetricParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGoalMetricResponse, error)

	UpdateGoalMetricWithResponse(ctx context.Context, goalGid GoalPathGid, params *UpdateGoalMetricParams, body UpdateGoalMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGoalMetricResponse, error)

	// GetSubgoalsForGoal request
	GetSubgoalsForGoalWithResponse(ctx context.Context, goalGid GoalPathGid, params *GetSubgoalsForGoalParams, reqEditors ...RequestEditorFn) (*GetSubgoalsForGoalResponse, error)

	// SupportingWork request
	SupportingWorkWithResponse(ctx context.Context, goalGid GoalPathGid, params *SupportingWorkParams, reqEditors ...RequestEditorFn) (*SupportingWorkResponse, error)

	// GetJob request
	GetJobWithResponse(ctx context.Context, jobGid JobPathGid, params *GetJobParams, reqEditors ...RequestEditorFn) (*GetJobResponse, error)

	// CreateOrganizationExport request  with any body
	CreateOrganizationExportWithBodyWithResponse(ctx context.Context, params *CreateOrganizationExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationExportResponse, error)

	CreateOrganizationExportWithResponse(ctx context.Context, params *CreateOrganizationExportParams, body CreateOrganizationExportJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationExportResponse, error)

	// GetOrganizationExport request
	GetOrganizationExportWithResponse(ctx context.Context, organizationExportGid OrganizationExportPathGid, params *GetOrganizationExportParams, reqEditors ...RequestEditorFn) (*GetOrganizationExportResponse, error)

	// GetTeamsForOrganization request
	GetTeamsForOrganizationWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *GetTeamsForOrganizationParams, reqEditors ...RequestEditorFn) (*GetTeamsForOrganizationResponse, error)

	// GetPortfolioMemberships request
	GetPortfolioMembershipsWithResponse(ctx context.Context, params *GetPortfolioMembershipsParams, reqEditors ...RequestEditorFn) (*GetPortfolioMembershipsResponse, error)

	// GetPortfolioMembership request
	GetPortfolioMembershipWithResponse(ctx context.Context, portfolioMembershipGid PortfolioMembershipPathGid, params *GetPortfolioMembershipParams, reqEditors ...RequestEditorFn) (*GetPortfolioMembershipResponse, error)

	// GetPortfolios request
	GetPortfoliosWithResponse(ctx context.Context, params *GetPortfoliosParams, reqEditors ...RequestEditorFn) (*GetPortfoliosResponse, error)

	// CreatePortfolio request  with any body
	CreatePortfolioWithBodyWithResponse(ctx context.Context, params *CreatePortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePortfolioResponse, error)

	CreatePortfolioWithResponse(ctx context.Context, params *CreatePortfolioParams, body CreatePortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePortfolioResponse, error)

	// DeletePortfolio request
	DeletePortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *DeletePortfolioParams, reqEditors ...RequestEditorFn) (*DeletePortfolioResponse, error)

	// GetPortfolio request
	GetPortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *GetPortfolioParams, reqEditors ...RequestEditorFn) (*GetPortfolioResponse, error)

	// UpdatePortfolio request  with any body
	UpdatePortfolioWithBodyWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *UpdatePortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePortfolioResponse, error)

	UpdatePortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *UpdatePortfolioParams, body UpdatePortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePortfolioResponse, error)

	// AddCustomFieldSettingForPortfolio request  with any body
	AddCustomFieldSettingForPortfolioWithBodyWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *AddCustomFieldSettingForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCustomFieldSettingForPortfolioResponse, error)

	AddCustomFieldSettingForPortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *AddCustomFieldSettingForPortfolioParams, body AddCustomFieldSettingForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCustomFieldSettingForPortfolioResponse, error)

	// AddItemForPortfolio request  with any body
	AddItemForPortfolioWithBodyWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *AddItemForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddItemForPortfolioResponse, error)

	AddItemForPortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *AddItemForPortfolioParams, body AddItemForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*AddItemForPortfolioResponse, error)

	// AddMembersForPortfolio request  with any body
	AddMembersForPortfolioWithBodyWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *AddMembersForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMembersForPortfolioResponse, error)

	AddMembersForPortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *AddMembersForPortfolioParams, body AddMembersForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMembersForPortfolioResponse, error)

	// GetCustomFieldSettingsForPortfolio request
	GetCustomFieldSettingsForPortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *GetCustomFieldSettingsForPortfolioParams, reqEditors ...RequestEditorFn) (*GetCustomFieldSettingsForPortfolioResponse, error)

	// GetItemsForPortfolio request
	GetItemsForPortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *GetItemsForPortfolioParams, reqEditors ...RequestEditorFn) (*GetItemsForPortfolioResponse, error)

	// GetPortfolioMembershipsForPortfolio request
	GetPortfolioMembershipsForPortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *GetPortfolioMembershipsForPortfolioParams, reqEditors ...RequestEditorFn) (*GetPortfolioMembershipsForPortfolioResponse, error)

	// RemoveCustomFieldSettingForPortfolio request  with any body
	RemoveCustomFieldSettingForPortfolioWithBodyWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveCustomFieldSettingForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveCustomFieldSettingForPortfolioResponse, error)

	RemoveCustomFieldSettingForPortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveCustomFieldSettingForPortfolioParams, body RemoveCustomFieldSettingForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveCustomFieldSettingForPortfolioResponse, error)

	// RemoveItemForPortfolio request  with any body
	RemoveItemForPortfolioWithBodyWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveItemForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveItemForPortfolioResponse, error)

	RemoveItemForPortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveItemForPortfolioParams, body RemoveItemForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveItemForPortfolioResponse, error)

	// RemoveMembersForPortfolio request  with any body
	RemoveMembersForPortfolioWithBodyWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveMembersForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveMembersForPortfolioResponse, error)

	RemoveMembersForPortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveMembersForPortfolioParams, body RemoveMembersForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveMembersForPortfolioResponse, error)

	// GetProjectMembership request
	GetProjectMembershipWithResponse(ctx context.Context, projectMembershipGid ProjectMembershipPathGid, params *GetProjectMembershipParams, reqEditors ...RequestEditorFn) (*GetProjectMembershipResponse, error)

	// DeleteProjectStatus request
	DeleteProjectStatusWithResponse(ctx context.Context, projectStatusGid ProjectStatusPathGid, params *DeleteProjectStatusParams, reqEditors ...RequestEditorFn) (*DeleteProjectStatusResponse, error)

	// GetProjectStatus request
	GetProjectStatusWithResponse(ctx context.Context, projectStatusGid ProjectStatusPathGid, params *GetProjectStatusParams, reqEditors ...RequestEditorFn) (*GetProjectStatusResponse, error)

	// GetProjects request
	GetProjectsWithResponse(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error)

	// CreateProject request  with any body
	CreateProjectWithBodyWithResponse(ctx context.Context, params *CreateProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error)

	CreateProjectWithResponse(ctx context.Context, params *CreateProjectParams, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error)

	// DeleteProject request
	DeleteProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *DeleteProjectParams, reqEditors ...RequestEditorFn) (*DeleteProjectResponse, error)

	// GetProject request
	GetProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *GetProjectParams, reqEditors ...RequestEditorFn) (*GetProjectResponse, error)

	// UpdateProject request  with any body
	UpdateProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *UpdateProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProjectResponse, error)

	UpdateProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *UpdateProjectParams, body UpdateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProjectResponse, error)

	// AddCustomFieldSettingForProject request  with any body
	AddCustomFieldSettingForProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *AddCustomFieldSettingForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCustomFieldSettingForProjectResponse, error)

	AddCustomFieldSettingForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *AddCustomFieldSettingForProjectParams, body AddCustomFieldSettingForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCustomFieldSettingForProjectResponse, error)

	// AddFollowersForProject request  with any body
	AddFollowersForProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *AddFollowersForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddFollowersForProjectResponse, error)

	AddFollowersForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *AddFollowersForProjectParams, body AddFollowersForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*AddFollowersForProjectResponse, error)

	// AddMembersForProject request  with any body
	AddMembersForProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *AddMembersForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMembersForProjectResponse, error)

	AddMembersForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *AddMembersForProjectParams, body AddMembersForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMembersForProjectResponse, error)

	// GetCustomFieldSettingsForProject request
	GetCustomFieldSettingsForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *GetCustomFieldSettingsForProjectParams, reqEditors ...RequestEditorFn) (*GetCustomFieldSettingsForProjectResponse, error)

	// DuplicateProject request  with any body
	DuplicateProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *DuplicateProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DuplicateProjectResponse, error)

	DuplicateProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *DuplicateProjectParams, body DuplicateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*DuplicateProjectResponse, error)

	// GetProjectMembershipsForProject request
	GetProjectMembershipsForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *GetProjectMembershipsForProjectParams, reqEditors ...RequestEditorFn) (*GetProjectMembershipsForProjectResponse, error)

	// GetProjectStatusesForProject request
	GetProjectStatusesForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *GetProjectStatusesForProjectParams, reqEditors ...RequestEditorFn) (*GetProjectStatusesForProjectResponse, error)

	// CreateProjectStatusForProject request  with any body
	CreateProjectStatusForProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *CreateProjectStatusForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectStatusForProjectResponse, error)

	CreateProjectStatusForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *CreateProjectStatusForProjectParams, body CreateProjectStatusForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectStatusForProjectResponse, error)

	// RemoveCustomFieldSettingForProject request  with any body
	RemoveCustomFieldSettingForProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *RemoveCustomFieldSettingForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveCustomFieldSettingForProjectResponse, error)

	RemoveCustomFieldSettingForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *RemoveCustomFieldSettingForProjectParams, body RemoveCustomFieldSettingForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveCustomFieldSettingForProjectResponse, error)

	// RemoveFollowersForProject request  with any body
	RemoveFollowersForProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *RemoveFollowersForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveFollowersForProjectResponse, error)

	RemoveFollowersForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *RemoveFollowersForProjectParams, body RemoveFollowersForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveFollowersForProjectResponse, error)

	// RemoveMembersForProject request  with any body
	RemoveMembersForProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *RemoveMembersForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveMembersForProjectResponse, error)

	RemoveMembersForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *RemoveMembersForProjectParams, body RemoveMembersForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveMembersForProjectResponse, error)

	// GetSectionsForProject request
	GetSectionsForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *GetSectionsForProjectParams, reqEditors ...RequestEditorFn) (*GetSectionsForProjectResponse, error)

	// CreateSectionForProject request  with any body
	CreateSectionForProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *CreateSectionForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSectionForProjectResponse, error)

	CreateSectionForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *CreateSectionForProjectParams, body CreateSectionForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSectionForProjectResponse, error)

	// InsertSectionForProject request  with any body
	InsertSectionForProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *InsertSectionForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertSectionForProjectResponse, error)

	InsertSectionForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *InsertSectionForProjectParams, body InsertSectionForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*InsertSectionForProjectResponse, error)

	// GetTaskCountsForProject request
	GetTaskCountsForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *GetTaskCountsForProjectParams, reqEditors ...RequestEditorFn) (*GetTaskCountsForProjectResponse, error)

	// GetTasksForProject request
	GetTasksForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *GetTasksForProjectParams, reqEditors ...RequestEditorFn) (*GetTasksForProjectResponse, error)

	// DeleteSection request
	DeleteSectionWithResponse(ctx context.Context, sectionGid SectionPathGid, params *DeleteSectionParams, reqEditors ...RequestEditorFn) (*DeleteSectionResponse, error)

	// GetSection request
	GetSectionWithResponse(ctx context.Context, sectionGid SectionPathGid, params *GetSectionParams, reqEditors ...RequestEditorFn) (*GetSectionResponse, error)

	// UpdateSection request  with any body
	UpdateSectionWithBodyWithResponse(ctx context.Context, sectionGid SectionPathGid, params *UpdateSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSectionResponse, error)

	UpdateSectionWithResponse(ctx context.Context, sectionGid SectionPathGid, params *UpdateSectionParams, body UpdateSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSectionResponse, error)

	// AddTaskForSection request  with any body
	AddTaskForSectionWithBodyWithResponse(ctx context.Context, sectionGid SectionPathGid, params *AddTaskForSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTaskForSectionResponse, error)

	AddTaskForSectionWithResponse(ctx context.Context, sectionGid SectionPathGid, params *AddTaskForSectionParams, body AddTaskForSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTaskForSectionResponse, error)

	// GetTasksForSection request
	GetTasksForSectionWithResponse(ctx context.Context, sectionGid SectionPathGid, params *GetTasksForSectionParams, reqEditors ...RequestEditorFn) (*GetTasksForSectionResponse, error)

	// DeleteStory request
	DeleteStoryWithResponse(ctx context.Context, storyGid StoryPathGid, params *DeleteStoryParams, reqEditors ...RequestEditorFn) (*DeleteStoryResponse, error)

	// GetStory request
	GetStoryWithResponse(ctx context.Context, storyGid StoryPathGid, params *GetStoryParams, reqEditors ...RequestEditorFn) (*GetStoryResponse, error)

	// UpdateStory request  with any body
	UpdateStoryWithBodyWithResponse(ctx context.Context, storyGid StoryPathGid, params *UpdateStoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStoryResponse, error)

	UpdateStoryWithResponse(ctx context.Context, storyGid StoryPathGid, params *UpdateStoryParams, body UpdateStoryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStoryResponse, error)

	// GetTags request
	GetTagsWithResponse(ctx context.Context, params *GetTagsParams, reqEditors ...RequestEditorFn) (*GetTagsResponse, error)

	// CreateTag request  with any body
	CreateTagWithBodyWithResponse(ctx context.Context, params *CreateTagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagResponse, error)

	CreateTagWithResponse(ctx context.Context, params *CreateTagParams, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagResponse, error)

	// DeleteTag request
	DeleteTagWithResponse(ctx context.Context, tagGid TagPathGid, params *DeleteTagParams, reqEditors ...RequestEditorFn) (*DeleteTagResponse, error)

	// GetTag request
	GetTagWithResponse(ctx context.Context, tagGid TagPathGid, params *GetTagParams, reqEditors ...RequestEditorFn) (*GetTagResponse, error)

	// UpdateTag request
	UpdateTagWithResponse(ctx context.Context, tagGid TagPathGid, params *UpdateTagParams, reqEditors ...RequestEditorFn) (*UpdateTagResponse, error)

	// GetTasksForTag request
	GetTasksForTagWithResponse(ctx context.Context, tagGid TagPathGid, params *GetTasksForTagParams, reqEditors ...RequestEditorFn) (*GetTasksForTagResponse, error)

	// GetTasks request
	GetTasksWithResponse(ctx context.Context, params *GetTasksParams, reqEditors ...RequestEditorFn) (*GetTasksResponse, error)

	// CreateTask request  with any body
	CreateTaskWithBodyWithResponse(ctx context.Context, params *CreateTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTaskResponse, error)

	CreateTaskWithResponse(ctx context.Context, params *CreateTaskParams, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTaskResponse, error)

	// DeleteTask request
	DeleteTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *DeleteTaskParams, reqEditors ...RequestEditorFn) (*DeleteTaskResponse, error)

	// GetTask request
	GetTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *GetTaskParams, reqEditors ...RequestEditorFn) (*GetTaskResponse, error)

	// UpdateTask request  with any body
	UpdateTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *UpdateTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTaskResponse, error)

	UpdateTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *UpdateTaskParams, body UpdateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTaskResponse, error)

	// AddDependenciesForTask request  with any body
	AddDependenciesForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *AddDependenciesForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddDependenciesForTaskResponse, error)

	AddDependenciesForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *AddDependenciesForTaskParams, body AddDependenciesForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddDependenciesForTaskResponse, error)

	// AddDependentsForTask request  with any body
	AddDependentsForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *AddDependentsForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddDependentsForTaskResponse, error)

	AddDependentsForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *AddDependentsForTaskParams, body AddDependentsForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddDependentsForTaskResponse, error)

	// AddFollowersForTask request  with any body
	AddFollowersForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *AddFollowersForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddFollowersForTaskResponse, error)

	AddFollowersForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *AddFollowersForTaskParams, body AddFollowersForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddFollowersForTaskResponse, error)

	// AddProjectForTask request  with any body
	AddProjectForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *AddProjectForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddProjectForTaskResponse, error)

	AddProjectForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *AddProjectForTaskParams, body AddProjectForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddProjectForTaskResponse, error)

	// AddTagForTask request  with any body
	AddTagForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *AddTagForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTagForTaskResponse, error)

	AddTagForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *AddTagForTaskParams, body AddTagForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTagForTaskResponse, error)

	// GetAttachmentsForTask request
	GetAttachmentsForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *GetAttachmentsForTaskParams, reqEditors ...RequestEditorFn) (*GetAttachmentsForTaskResponse, error)

	// CreateAttachmentForTask request  with any body
	CreateAttachmentForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *CreateAttachmentForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAttachmentForTaskResponse, error)

	// GetDependenciesForTask request
	GetDependenciesForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *GetDependenciesForTaskParams, reqEditors ...RequestEditorFn) (*GetDependenciesForTaskResponse, error)

	// GetDependentsForTask request
	GetDependentsForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *GetDependentsForTaskParams, reqEditors ...RequestEditorFn) (*GetDependentsForTaskResponse, error)

	// DuplicateTask request  with any body
	DuplicateTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *DuplicateTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DuplicateTaskResponse, error)

	DuplicateTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *DuplicateTaskParams, body DuplicateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*DuplicateTaskResponse, error)

	// GetProjectsForTask request
	GetProjectsForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *GetProjectsForTaskParams, reqEditors ...RequestEditorFn) (*GetProjectsForTaskResponse, error)

	// RemoveDependenciesForTask request  with any body
	RemoveDependenciesForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *RemoveDependenciesForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveDependenciesForTaskResponse, error)

	RemoveDependenciesForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *RemoveDependenciesForTaskParams, body RemoveDependenciesForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveDependenciesForTaskResponse, error)

	// RemoveDependentsForTask request  with any body
	RemoveDependentsForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *RemoveDependentsForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveDependentsForTaskResponse, error)

	RemoveDependentsForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *RemoveDependentsForTaskParams, body RemoveDependentsForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveDependentsForTaskResponse, error)

	// RemoveFollowerForTask request  with any body
	RemoveFollowerForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *RemoveFollowerForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveFollowerForTaskResponse, error)

	RemoveFollowerForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *RemoveFollowerForTaskParams, body RemoveFollowerForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveFollowerForTaskResponse, error)

	// RemoveProjectForTask request  with any body
	RemoveProjectForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *RemoveProjectForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveProjectForTaskResponse, error)

	RemoveProjectForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *RemoveProjectForTaskParams, body RemoveProjectForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveProjectForTaskResponse, error)

	// RemoveTagForTask request  with any body
	RemoveTagForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *RemoveTagForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveTagForTaskResponse, error)

	RemoveTagForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *RemoveTagForTaskParams, body RemoveTagForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveTagForTaskResponse, error)

	// SetParentForTask request  with any body
	SetParentForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *SetParentForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetParentForTaskResponse, error)

	SetParentForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *SetParentForTaskParams, body SetParentForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*SetParentForTaskResponse, error)

	// GetStoriesForTask request
	GetStoriesForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *GetStoriesForTaskParams, reqEditors ...RequestEditorFn) (*GetStoriesForTaskResponse, error)

	// CreateStoryForTask request  with any body
	CreateStoryForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *CreateStoryForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStoryForTaskResponse, error)

	CreateStoryForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *CreateStoryForTaskParams, body CreateStoryForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStoryForTaskResponse, error)

	// GetSubtasksForTask request
	GetSubtasksForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *GetSubtasksForTaskParams, reqEditors ...RequestEditorFn) (*GetSubtasksForTaskResponse, error)

	// CreateSubtaskForTask request  with any body
	CreateSubtaskForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *CreateSubtaskForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSubtaskForTaskResponse, error)

	CreateSubtaskForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *CreateSubtaskForTaskParams, body CreateSubtaskForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSubtaskForTaskResponse, error)

	// GetTagsForTask request
	GetTagsForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *GetTagsForTaskParams, reqEditors ...RequestEditorFn) (*GetTagsForTaskResponse, error)

	// GetTeamMemberships request
	GetTeamMembershipsWithResponse(ctx context.Context, params *GetTeamMembershipsParams, reqEditors ...RequestEditorFn) (*GetTeamMembershipsResponse, error)

	// GetTeamMembership request
	GetTeamMembershipWithResponse(ctx context.Context, teamMembershipGid TeamMembershipPathGid, params *GetTeamMembershipParams, reqEditors ...RequestEditorFn) (*GetTeamMembershipResponse, error)

	// CreateTeam request  with any body
	CreateTeamWithBodyWithResponse(ctx context.Context, params *CreateTeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	CreateTeamWithResponse(ctx context.Context, params *CreateTeamParams, body CreateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	// GetTeam request
	GetTeamWithResponse(ctx context.Context, teamGid TeamPathGid, params *GetTeamParams, reqEditors ...RequestEditorFn) (*GetTeamResponse, error)

	// AddUserForTeam request  with any body
	AddUserForTeamWithBodyWithResponse(ctx context.Context, teamGid TeamPathGid, params *AddUserForTeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUserForTeamResponse, error)

	AddUserForTeamWithResponse(ctx context.Context, teamGid TeamPathGid, params *AddUserForTeamParams, body AddUserForTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUserForTeamResponse, error)

	// GetProjectsForTeam request
	GetProjectsForTeamWithResponse(ctx context.Context, teamGid TeamPathGid, params *GetProjectsForTeamParams, reqEditors ...RequestEditorFn) (*GetProjectsForTeamResponse, error)

	// CreateProjectForTeam request  with any body
	CreateProjectForTeamWithBodyWithResponse(ctx context.Context, teamGid TeamPathGid, params *CreateProjectForTeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectForTeamResponse, error)

	CreateProjectForTeamWithResponse(ctx context.Context, teamGid TeamPathGid, params *CreateProjectForTeamParams, body CreateProjectForTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectForTeamResponse, error)

	// RemoveUserForTeam request  with any body
	RemoveUserForTeamWithBodyWithResponse(ctx context.Context, teamGid TeamPathGid, params *RemoveUserForTeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveUserForTeamResponse, error)

	RemoveUserForTeamWithResponse(ctx context.Context, teamGid TeamPathGid, params *RemoveUserForTeamParams, body RemoveUserForTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveUserForTeamResponse, error)

	// GetTeamMembershipsForTeam request
	GetTeamMembershipsForTeamWithResponse(ctx context.Context, teamGid TeamPathGid, params *GetTeamMembershipsForTeamParams, reqEditors ...RequestEditorFn) (*GetTeamMembershipsForTeamResponse, error)

	// GetUsersForTeam request
	GetUsersForTeamWithResponse(ctx context.Context, teamGid TeamPathGid, params *GetUsersForTeamParams, reqEditors ...RequestEditorFn) (*GetUsersForTeamResponse, error)

	// GetUserTaskList request
	GetUserTaskListWithResponse(ctx context.Context, userTaskListGid UserTaskListPathGid, params *GetUserTaskListParams, reqEditors ...RequestEditorFn) (*GetUserTaskListResponse, error)

	// GetTasksForUserTaskList request
	GetTasksForUserTaskListWithResponse(ctx context.Context, userTaskListGid UserTaskListPathGid, params *GetTasksForUserTaskListParams, reqEditors ...RequestEditorFn) (*GetTasksForUserTaskListResponse, error)

	// GetUsers request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// GetUser request
	GetUserWithResponse(ctx context.Context, userGid UserPathGid, params *GetUserParams, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// GetFavoritesForUser request
	GetFavoritesForUserWithResponse(ctx context.Context, userGid UserPathGid, params *GetFavoritesForUserParams, reqEditors ...RequestEditorFn) (*GetFavoritesForUserResponse, error)

	// GetTeamMembershipsForUser request
	GetTeamMembershipsForUserWithResponse(ctx context.Context, userGid UserPathGid, params *GetTeamMembershipsForUserParams, reqEditors ...RequestEditorFn) (*GetTeamMembershipsForUserResponse, error)

	// GetTeamsForUser request
	GetTeamsForUserWithResponse(ctx context.Context, userGid UserPathGid, params *GetTeamsForUserParams, reqEditors ...RequestEditorFn) (*GetTeamsForUserResponse, error)

	// GetUserTaskListForUser request
	GetUserTaskListForUserWithResponse(ctx context.Context, userGid UserPathGid, params *GetUserTaskListForUserParams, reqEditors ...RequestEditorFn) (*GetUserTaskListForUserResponse, error)

	// GetWorkspaceMembershipsForUser request
	GetWorkspaceMembershipsForUserWithResponse(ctx context.Context, userGid UserPathGid, params *GetWorkspaceMembershipsForUserParams, reqEditors ...RequestEditorFn) (*GetWorkspaceMembershipsForUserResponse, error)

	// GetWebhooks request
	GetWebhooksWithResponse(ctx context.Context, params *GetWebhooksParams, reqEditors ...RequestEditorFn) (*GetWebhooksResponse, error)

	// CreateWebhook request  with any body
	CreateWebhookWithBodyWithResponse(ctx context.Context, params *CreateWebhookParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWebhookResponse, error)

	CreateWebhookWithResponse(ctx context.Context, params *CreateWebhookParams, body CreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWebhookResponse, error)

	// DeleteWebhook request
	DeleteWebhookWithResponse(ctx context.Context, webhookGid WebhookPathGid, params *DeleteWebhookParams, reqEditors ...RequestEditorFn) (*DeleteWebhookResponse, error)

	// GetWebhook request
	GetWebhookWithResponse(ctx context.Context, webhookGid WebhookPathGid, params *GetWebhookParams, reqEditors ...RequestEditorFn) (*GetWebhookResponse, error)

	// GetWorkspaceMembership request
	GetWorkspaceMembershipWithResponse(ctx context.Context, workspaceMembershipGid WorkspaceMembershipPathGid, params *GetWorkspaceMembershipParams, reqEditors ...RequestEditorFn) (*GetWorkspaceMembershipResponse, error)

	// GetWorkspaces request
	GetWorkspacesWithResponse(ctx context.Context, params *GetWorkspacesParams, reqEditors ...RequestEditorFn) (*GetWorkspacesResponse, error)

	// GetWorkspace request
	GetWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *GetWorkspaceParams, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error)

	// UpdateWorkspace request  with any body
	UpdateWorkspaceWithBodyWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *UpdateWorkspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error)

	UpdateWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *UpdateWorkspaceParams, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error)

	// AddUserForWorkspace request  with any body
	AddUserForWorkspaceWithBodyWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *AddUserForWorkspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUserForWorkspaceResponse, error)

	AddUserForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *AddUserForWorkspaceParams, body AddUserForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUserForWorkspaceResponse, error)

	// GetCustomFieldsForWorkspace request
	GetCustomFieldsForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *GetCustomFieldsForWorkspaceParams, reqEditors ...RequestEditorFn) (*GetCustomFieldsForWorkspaceResponse, error)

	// GetProjectsForWorkspace request
	GetProjectsForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *GetProjectsForWorkspaceParams, reqEditors ...RequestEditorFn) (*GetProjectsForWorkspaceResponse, error)

	// CreateProjectForWorkspace request  with any body
	CreateProjectForWorkspaceWithBodyWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *CreateProjectForWorkspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectForWorkspaceResponse, error)

	CreateProjectForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *CreateProjectForWorkspaceParams, body CreateProjectForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectForWorkspaceResponse, error)

	// RemoveUserForWorkspace request  with any body
	RemoveUserForWorkspaceWithBodyWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *RemoveUserForWorkspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveUserForWorkspaceResponse, error)

	RemoveUserForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *RemoveUserForWorkspaceParams, body RemoveUserForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveUserForWorkspaceResponse, error)

	// GetTagsForWorkspace request
	GetTagsForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *GetTagsForWorkspaceParams, reqEditors ...RequestEditorFn) (*GetTagsForWorkspaceResponse, error)

	// CreateTagForWorkspace request  with any body
	CreateTagForWorkspaceWithBodyWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *CreateTagForWorkspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagForWorkspaceResponse, error)

	CreateTagForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *CreateTagForWorkspaceParams, body CreateTagForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagForWorkspaceResponse, error)

	// SearchTasksForWorkspace request
	SearchTasksForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *SearchTasksForWorkspaceParams, reqEditors ...RequestEditorFn) (*SearchTasksForWorkspaceResponse, error)

	// TypeaheadForWorkspace request
	TypeaheadForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *TypeaheadForWorkspaceParams, reqEditors ...RequestEditorFn) (*TypeaheadForWorkspaceResponse, error)

	// GetUsersForWorkspace request
	GetUsersForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *GetUsersForWorkspaceParams, reqEditors ...RequestEditorFn) (*GetUsersForWorkspaceResponse, error)

	// GetWorkspaceMembershipsForWorkspace request
	GetWorkspaceMembershipsForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *GetWorkspaceMembershipsForWorkspaceParams, reqEditors ...RequestEditorFn) (*GetWorkspaceMembershipsForWorkspaceResponse, error)
}

type DeleteAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *AttachmentResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON424 *ErrorResponse
	JSON500 *ErrorResponse
	JSON501 *ErrorResponse
	JSON503 *ErrorResponse
	JSON504 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBatchRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]BatchResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateBatchRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBatchRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *CustomFieldResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *CustomFieldResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *CustomFieldResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnumOptionForCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *EnumOption `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateEnumOptionForCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnumOptionForCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsertEnumOptionForCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *EnumOption `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r InsertEnumOptionForCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsertEnumOptionForCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEnumOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *EnumOption `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateEnumOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEnumOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]EventResponse `json:"data,omitempty"`

		// A sync token to be used with the next call to the events endpoint.
		Sync *string `json:"sync,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGoalsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]GoalCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGoalsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGoalsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGoalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteGoalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGoalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGoalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *GoalResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGoalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGoalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateGoalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *GoalResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateGoalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGoalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddFollowersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *GoalResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddFollowersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddFollowersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddSubgoalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddSubgoalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddSubgoalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddSupportingWorkForGoalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddSupportingWorkForGoalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddSupportingWorkForGoalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetParentGoalsForGoalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]GoalCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetParentGoalsForGoalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetParentGoalsForGoalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveFollowersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *GoalResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RemoveFollowersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveFollowersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveSubgoalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RemoveSubgoalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveSubgoalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveSupportingWorkForGoalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RemoveSupportingWorkForGoalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveSupportingWorkForGoalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGoalMetricResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *GoalResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateGoalMetricResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGoalMetricResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateGoalMetricResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *GoalResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateGoalMetricResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGoalMetricResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubgoalsForGoalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]GoalCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSubgoalsForGoalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubgoalsForGoalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SupportingWorkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]ProjectCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SupportingWorkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SupportingWorkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *JobResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *OrganizationExportResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *OrganizationExportResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrganizationExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsForOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]TeamCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTeamsForOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsForOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPortfolioMembershipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]PortfolioMembershipCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPortfolioMembershipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPortfolioMembershipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPortfolioMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *PortfolioMembershipResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPortfolioMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPortfolioMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPortfoliosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]PortfolioCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPortfoliosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPortfoliosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePortfolioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *PortfolioResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreatePortfolioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePortfolioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePortfolioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePortfolioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePortfolioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPortfolioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *PortfolioResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPortfolioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPortfolioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePortfolioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *PortfolioResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdatePortfolioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePortfolioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCustomFieldSettingForPortfolioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddCustomFieldSettingForPortfolioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCustomFieldSettingForPortfolioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddItemForPortfolioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddItemForPortfolioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddItemForPortfolioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddMembersForPortfolioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddMembersForPortfolioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddMembersForPortfolioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomFieldSettingsForPortfolioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]CustomFieldSettingResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCustomFieldSettingsForPortfolioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomFieldSettingsForPortfolioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetItemsForPortfolioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]ProjectCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetItemsForPortfolioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetItemsForPortfolioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPortfolioMembershipsForPortfolioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]PortfolioMembershipCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPortfolioMembershipsForPortfolioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPortfolioMembershipsForPortfolioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveCustomFieldSettingForPortfolioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RemoveCustomFieldSettingForPortfolioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveCustomFieldSettingForPortfolioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveItemForPortfolioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RemoveItemForPortfolioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveItemForPortfolioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveMembersForPortfolioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RemoveMembersForPortfolioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveMembersForPortfolioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *ProjectMembershipResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProjectMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteProjectStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *ProjectStatusResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProjectStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]ProjectCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *ProjectResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *ProjectResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *ProjectResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCustomFieldSettingForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *CustomFieldSettingResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddCustomFieldSettingForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCustomFieldSettingForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddFollowersForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddFollowersForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddFollowersForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddMembersForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddMembersForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddMembersForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomFieldSettingsForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]CustomFieldSettingResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCustomFieldSettingsForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomFieldSettingsForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DuplicateProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *JobResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DuplicateProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DuplicateProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectMembershipsForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]ProjectMembershipCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProjectMembershipsForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectMembershipsForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectStatusesForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]ProjectStatusCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProjectStatusesForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectStatusesForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProjectStatusForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *ProjectStatusResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateProjectStatusForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProjectStatusForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveCustomFieldSettingForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RemoveCustomFieldSettingForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveCustomFieldSettingForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveFollowersForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RemoveFollowersForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveFollowersForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveMembersForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RemoveMembersForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveMembersForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSectionsForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]SectionCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSectionsForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSectionsForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSectionForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *SectionResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateSectionForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSectionForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsertSectionForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r InsertSectionForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsertSectionForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskCountsForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// A response object returned from the task count endpoint.
		Data *TaskCountResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTaskCountsForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskCountsForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTasksForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]TaskCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTasksForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTasksForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *SectionResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *SectionResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddTaskForSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddTaskForSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddTaskForSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTasksForSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]TaskCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTasksForSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTasksForSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteStoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *StoryResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetStoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *StoryResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateStoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]TagCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *TagResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *TagResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *TagResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTasksForTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]TaskCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTasksForTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTasksForTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]TaskCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *TaskResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *TaskResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *TaskResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddDependenciesForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddDependenciesForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddDependenciesForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddDependentsForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]TaskCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddDependentsForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddDependentsForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddFollowersForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddFollowersForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddFollowersForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddProjectForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddProjectForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddProjectForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddTagForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddTagForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddTagForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAttachmentsForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]AttachmentCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAttachmentsForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAttachmentsForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAttachmentForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *AttachmentResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateAttachmentForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAttachmentForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDependenciesForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]TaskCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetDependenciesForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDependenciesForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDependentsForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]TaskCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetDependentsForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDependentsForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DuplicateTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *JobResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DuplicateTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DuplicateTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]ProjectCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProjectsForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveDependenciesForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RemoveDependenciesForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveDependenciesForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveDependentsForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON402 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RemoveDependentsForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveDependentsForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveFollowerForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RemoveFollowerForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveFollowerForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveProjectForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RemoveProjectForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveProjectForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveTagForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RemoveTagForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveTagForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetParentForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *TaskResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SetParentForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetParentForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStoriesForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *interface{} `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetStoriesForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStoriesForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStoryForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *StoryResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateStoryForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStoryForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubtasksForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]TaskCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSubtasksForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubtasksForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSubtaskForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *TaskResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateSubtaskForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSubtaskForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsForTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]TagCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTagsForTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsForTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamMembershipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]TeamMembershipCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTeamMembershipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamMembershipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *TeamMembershipResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTeamMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *TeamResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *TeamResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddUserForTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *UserResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddUserForTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddUserForTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsForTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]ProjectCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProjectsForTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsForTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProjectForTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *ProjectResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateProjectForTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProjectForTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveUserForTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RemoveUserForTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveUserForTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamMembershipsForTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]TeamMembershipCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTeamMembershipsForTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamMembershipsForTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersForTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]UserCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUsersForTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersForTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserTaskListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *UserTaskListResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserTaskListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserTaskListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTasksForUserTaskListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]TaskCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTasksForUserTaskListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTasksForUserTaskListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]UserCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *UserResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFavoritesForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]AsanaNamedResource `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetFavoritesForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFavoritesForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamMembershipsForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]TeamMembershipCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTeamMembershipsForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamMembershipsForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]TeamCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTeamsForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserTaskListForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *UserTaskListResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserTaskListForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserTaskListForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceMembershipsForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]WorkspaceMembershipCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceMembershipsForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceMembershipsForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]WebhookResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *WebhookResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *WebhookResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *WorkspaceMembershipResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]WorkspaceCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *WorkspaceResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *WorkspaceResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddUserForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *UserResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddUserForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddUserForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomFieldsForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]CustomFieldResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCustomFieldsForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomFieldsForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]ProjectCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProjectsForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProjectForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *ProjectResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateProjectForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProjectForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveUserForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *struct {

		// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		Data *EmptyResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RemoveUserForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveUserForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]TagCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTagsForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTagForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *TagResponse `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateTagForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTagForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchTasksForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]TaskCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SearchTasksForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchTasksForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TypeaheadForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]AsanaNamedResource `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r TypeaheadForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TypeaheadForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]UserCompact `json:"data,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUsersForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceMembershipsForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]WorkspaceMembershipCompact `json:"data,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceMembershipsForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceMembershipsForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteAttachmentWithResponse request returning *DeleteAttachmentResponse
func (c *ClientWithResponses) DeleteAttachmentWithResponse(ctx context.Context, attachmentGid AttachmentPathGid, params *DeleteAttachmentParams, reqEditors ...RequestEditorFn) (*DeleteAttachmentResponse, error) {
	rsp, err := c.DeleteAttachment(ctx, attachmentGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAttachmentResponse(rsp)
}

// GetAttachmentWithResponse request returning *GetAttachmentResponse
func (c *ClientWithResponses) GetAttachmentWithResponse(ctx context.Context, attachmentGid AttachmentPathGid, params *GetAttachmentParams, reqEditors ...RequestEditorFn) (*GetAttachmentResponse, error) {
	rsp, err := c.GetAttachment(ctx, attachmentGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAttachmentResponse(rsp)
}

// CreateBatchRequestWithBodyWithResponse request with arbitrary body returning *CreateBatchRequestResponse
func (c *ClientWithResponses) CreateBatchRequestWithBodyWithResponse(ctx context.Context, params *CreateBatchRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBatchRequestResponse, error) {
	rsp, err := c.CreateBatchRequestWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBatchRequestResponse(rsp)
}

func (c *ClientWithResponses) CreateBatchRequestWithResponse(ctx context.Context, params *CreateBatchRequestParams, body CreateBatchRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBatchRequestResponse, error) {
	rsp, err := c.CreateBatchRequest(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBatchRequestResponse(rsp)
}

// CreateCustomFieldWithBodyWithResponse request with arbitrary body returning *CreateCustomFieldResponse
func (c *ClientWithResponses) CreateCustomFieldWithBodyWithResponse(ctx context.Context, params *CreateCustomFieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldResponse, error) {
	rsp, err := c.CreateCustomFieldWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomFieldResponse(rsp)
}

func (c *ClientWithResponses) CreateCustomFieldWithResponse(ctx context.Context, params *CreateCustomFieldParams, body CreateCustomFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomFieldResponse, error) {
	rsp, err := c.CreateCustomField(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomFieldResponse(rsp)
}

// DeleteCustomFieldWithResponse request returning *DeleteCustomFieldResponse
func (c *ClientWithResponses) DeleteCustomFieldWithResponse(ctx context.Context, customFieldGid CustomFieldPathGid, params *DeleteCustomFieldParams, reqEditors ...RequestEditorFn) (*DeleteCustomFieldResponse, error) {
	rsp, err := c.DeleteCustomField(ctx, customFieldGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomFieldResponse(rsp)
}

// GetCustomFieldWithResponse request returning *GetCustomFieldResponse
func (c *ClientWithResponses) GetCustomFieldWithResponse(ctx context.Context, customFieldGid CustomFieldPathGid, params *GetCustomFieldParams, reqEditors ...RequestEditorFn) (*GetCustomFieldResponse, error) {
	rsp, err := c.GetCustomField(ctx, customFieldGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomFieldResponse(rsp)
}

// UpdateCustomFieldWithBodyWithResponse request with arbitrary body returning *UpdateCustomFieldResponse
func (c *ClientWithResponses) UpdateCustomFieldWithBodyWithResponse(ctx context.Context, customFieldGid CustomFieldPathGid, params *UpdateCustomFieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldResponse, error) {
	rsp, err := c.UpdateCustomFieldWithBody(ctx, customFieldGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomFieldResponse(rsp)
}

func (c *ClientWithResponses) UpdateCustomFieldWithResponse(ctx context.Context, customFieldGid CustomFieldPathGid, params *UpdateCustomFieldParams, body UpdateCustomFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomFieldResponse, error) {
	rsp, err := c.UpdateCustomField(ctx, customFieldGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomFieldResponse(rsp)
}

// CreateEnumOptionForCustomFieldWithBodyWithResponse request with arbitrary body returning *CreateEnumOptionForCustomFieldResponse
func (c *ClientWithResponses) CreateEnumOptionForCustomFieldWithBodyWithResponse(ctx context.Context, customFieldGid CustomFieldPathGid, params *CreateEnumOptionForCustomFieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnumOptionForCustomFieldResponse, error) {
	rsp, err := c.CreateEnumOptionForCustomFieldWithBody(ctx, customFieldGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnumOptionForCustomFieldResponse(rsp)
}

func (c *ClientWithResponses) CreateEnumOptionForCustomFieldWithResponse(ctx context.Context, customFieldGid CustomFieldPathGid, params *CreateEnumOptionForCustomFieldParams, body CreateEnumOptionForCustomFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnumOptionForCustomFieldResponse, error) {
	rsp, err := c.CreateEnumOptionForCustomField(ctx, customFieldGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnumOptionForCustomFieldResponse(rsp)
}

// InsertEnumOptionForCustomFieldWithBodyWithResponse request with arbitrary body returning *InsertEnumOptionForCustomFieldResponse
func (c *ClientWithResponses) InsertEnumOptionForCustomFieldWithBodyWithResponse(ctx context.Context, customFieldGid CustomFieldPathGid, params *InsertEnumOptionForCustomFieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertEnumOptionForCustomFieldResponse, error) {
	rsp, err := c.InsertEnumOptionForCustomFieldWithBody(ctx, customFieldGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsertEnumOptionForCustomFieldResponse(rsp)
}

func (c *ClientWithResponses) InsertEnumOptionForCustomFieldWithResponse(ctx context.Context, customFieldGid CustomFieldPathGid, params *InsertEnumOptionForCustomFieldParams, body InsertEnumOptionForCustomFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*InsertEnumOptionForCustomFieldResponse, error) {
	rsp, err := c.InsertEnumOptionForCustomField(ctx, customFieldGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsertEnumOptionForCustomFieldResponse(rsp)
}

// UpdateEnumOptionWithBodyWithResponse request with arbitrary body returning *UpdateEnumOptionResponse
func (c *ClientWithResponses) UpdateEnumOptionWithBodyWithResponse(ctx context.Context, enumOptionGid string, params *UpdateEnumOptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnumOptionResponse, error) {
	rsp, err := c.UpdateEnumOptionWithBody(ctx, enumOptionGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnumOptionResponse(rsp)
}

func (c *ClientWithResponses) UpdateEnumOptionWithResponse(ctx context.Context, enumOptionGid string, params *UpdateEnumOptionParams, body UpdateEnumOptionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEnumOptionResponse, error) {
	rsp, err := c.UpdateEnumOption(ctx, enumOptionGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnumOptionResponse(rsp)
}

// GetEventsWithResponse request returning *GetEventsResponse
func (c *ClientWithResponses) GetEventsWithResponse(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*GetEventsResponse, error) {
	rsp, err := c.GetEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventsResponse(rsp)
}

// GetGoalsWithResponse request returning *GetGoalsResponse
func (c *ClientWithResponses) GetGoalsWithResponse(ctx context.Context, params *GetGoalsParams, reqEditors ...RequestEditorFn) (*GetGoalsResponse, error) {
	rsp, err := c.GetGoals(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGoalsResponse(rsp)
}

// DeleteGoalWithResponse request returning *DeleteGoalResponse
func (c *ClientWithResponses) DeleteGoalWithResponse(ctx context.Context, goalGid GoalPathGid, params *DeleteGoalParams, reqEditors ...RequestEditorFn) (*DeleteGoalResponse, error) {
	rsp, err := c.DeleteGoal(ctx, goalGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGoalResponse(rsp)
}

// GetGoalWithResponse request returning *GetGoalResponse
func (c *ClientWithResponses) GetGoalWithResponse(ctx context.Context, goalGid GoalPathGid, params *GetGoalParams, reqEditors ...RequestEditorFn) (*GetGoalResponse, error) {
	rsp, err := c.GetGoal(ctx, goalGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGoalResponse(rsp)
}

// UpdateGoalWithBodyWithResponse request with arbitrary body returning *UpdateGoalResponse
func (c *ClientWithResponses) UpdateGoalWithBodyWithResponse(ctx context.Context, goalGid GoalPathGid, params *UpdateGoalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGoalResponse, error) {
	rsp, err := c.UpdateGoalWithBody(ctx, goalGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGoalResponse(rsp)
}

func (c *ClientWithResponses) UpdateGoalWithResponse(ctx context.Context, goalGid GoalPathGid, params *UpdateGoalParams, body UpdateGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGoalResponse, error) {
	rsp, err := c.UpdateGoal(ctx, goalGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGoalResponse(rsp)
}

// AddFollowersWithBodyWithResponse request with arbitrary body returning *AddFollowersResponse
func (c *ClientWithResponses) AddFollowersWithBodyWithResponse(ctx context.Context, goalGid GoalPathGid, params *AddFollowersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddFollowersResponse, error) {
	rsp, err := c.AddFollowersWithBody(ctx, goalGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddFollowersResponse(rsp)
}

func (c *ClientWithResponses) AddFollowersWithResponse(ctx context.Context, goalGid GoalPathGid, params *AddFollowersParams, body AddFollowersJSONRequestBody, reqEditors ...RequestEditorFn) (*AddFollowersResponse, error) {
	rsp, err := c.AddFollowers(ctx, goalGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddFollowersResponse(rsp)
}

// AddSubgoalWithBodyWithResponse request with arbitrary body returning *AddSubgoalResponse
func (c *ClientWithResponses) AddSubgoalWithBodyWithResponse(ctx context.Context, goalGid GoalPathGid, params *AddSubgoalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddSubgoalResponse, error) {
	rsp, err := c.AddSubgoalWithBody(ctx, goalGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddSubgoalResponse(rsp)
}

func (c *ClientWithResponses) AddSubgoalWithResponse(ctx context.Context, goalGid GoalPathGid, params *AddSubgoalParams, body AddSubgoalJSONRequestBody, reqEditors ...RequestEditorFn) (*AddSubgoalResponse, error) {
	rsp, err := c.AddSubgoal(ctx, goalGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddSubgoalResponse(rsp)
}

// AddSupportingWorkForGoalWithBodyWithResponse request with arbitrary body returning *AddSupportingWorkForGoalResponse
func (c *ClientWithResponses) AddSupportingWorkForGoalWithBodyWithResponse(ctx context.Context, goalGid GoalPathGid, params *AddSupportingWorkForGoalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddSupportingWorkForGoalResponse, error) {
	rsp, err := c.AddSupportingWorkForGoalWithBody(ctx, goalGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddSupportingWorkForGoalResponse(rsp)
}

func (c *ClientWithResponses) AddSupportingWorkForGoalWithResponse(ctx context.Context, goalGid GoalPathGid, params *AddSupportingWorkForGoalParams, body AddSupportingWorkForGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*AddSupportingWorkForGoalResponse, error) {
	rsp, err := c.AddSupportingWorkForGoal(ctx, goalGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddSupportingWorkForGoalResponse(rsp)
}

// GetParentGoalsForGoalWithResponse request returning *GetParentGoalsForGoalResponse
func (c *ClientWithResponses) GetParentGoalsForGoalWithResponse(ctx context.Context, goalGid GoalPathGid, params *GetParentGoalsForGoalParams, reqEditors ...RequestEditorFn) (*GetParentGoalsForGoalResponse, error) {
	rsp, err := c.GetParentGoalsForGoal(ctx, goalGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetParentGoalsForGoalResponse(rsp)
}

// RemoveFollowersWithBodyWithResponse request with arbitrary body returning *RemoveFollowersResponse
func (c *ClientWithResponses) RemoveFollowersWithBodyWithResponse(ctx context.Context, goalGid GoalPathGid, params *RemoveFollowersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveFollowersResponse, error) {
	rsp, err := c.RemoveFollowersWithBody(ctx, goalGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveFollowersResponse(rsp)
}

func (c *ClientWithResponses) RemoveFollowersWithResponse(ctx context.Context, goalGid GoalPathGid, params *RemoveFollowersParams, body RemoveFollowersJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveFollowersResponse, error) {
	rsp, err := c.RemoveFollowers(ctx, goalGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveFollowersResponse(rsp)
}

// RemoveSubgoalWithBodyWithResponse request with arbitrary body returning *RemoveSubgoalResponse
func (c *ClientWithResponses) RemoveSubgoalWithBodyWithResponse(ctx context.Context, goalGid GoalPathGid, params *RemoveSubgoalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveSubgoalResponse, error) {
	rsp, err := c.RemoveSubgoalWithBody(ctx, goalGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveSubgoalResponse(rsp)
}

func (c *ClientWithResponses) RemoveSubgoalWithResponse(ctx context.Context, goalGid GoalPathGid, params *RemoveSubgoalParams, body RemoveSubgoalJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveSubgoalResponse, error) {
	rsp, err := c.RemoveSubgoal(ctx, goalGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveSubgoalResponse(rsp)
}

// RemoveSupportingWorkForGoalWithBodyWithResponse request with arbitrary body returning *RemoveSupportingWorkForGoalResponse
func (c *ClientWithResponses) RemoveSupportingWorkForGoalWithBodyWithResponse(ctx context.Context, goalGid GoalPathGid, params *RemoveSupportingWorkForGoalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveSupportingWorkForGoalResponse, error) {
	rsp, err := c.RemoveSupportingWorkForGoalWithBody(ctx, goalGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveSupportingWorkForGoalResponse(rsp)
}

func (c *ClientWithResponses) RemoveSupportingWorkForGoalWithResponse(ctx context.Context, goalGid GoalPathGid, params *RemoveSupportingWorkForGoalParams, body RemoveSupportingWorkForGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveSupportingWorkForGoalResponse, error) {
	rsp, err := c.RemoveSupportingWorkForGoal(ctx, goalGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveSupportingWorkForGoalResponse(rsp)
}

// CreateGoalMetricWithBodyWithResponse request with arbitrary body returning *CreateGoalMetricResponse
func (c *ClientWithResponses) CreateGoalMetricWithBodyWithResponse(ctx context.Context, goalGid GoalPathGid, params *CreateGoalMetricParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGoalMetricResponse, error) {
	rsp, err := c.CreateGoalMetricWithBody(ctx, goalGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGoalMetricResponse(rsp)
}

func (c *ClientWithResponses) CreateGoalMetricWithResponse(ctx context.Context, goalGid GoalPathGid, params *CreateGoalMetricParams, body CreateGoalMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGoalMetricResponse, error) {
	rsp, err := c.CreateGoalMetric(ctx, goalGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGoalMetricResponse(rsp)
}

// UpdateGoalMetricWithBodyWithResponse request with arbitrary body returning *UpdateGoalMetricResponse
func (c *ClientWithResponses) UpdateGoalMetricWithBodyWithResponse(ctx context.Context, goalGid GoalPathGid, params *UpdateGoalMetricParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGoalMetricResponse, error) {
	rsp, err := c.UpdateGoalMetricWithBody(ctx, goalGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGoalMetricResponse(rsp)
}

func (c *ClientWithResponses) UpdateGoalMetricWithResponse(ctx context.Context, goalGid GoalPathGid, params *UpdateGoalMetricParams, body UpdateGoalMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGoalMetricResponse, error) {
	rsp, err := c.UpdateGoalMetric(ctx, goalGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGoalMetricResponse(rsp)
}

// GetSubgoalsForGoalWithResponse request returning *GetSubgoalsForGoalResponse
func (c *ClientWithResponses) GetSubgoalsForGoalWithResponse(ctx context.Context, goalGid GoalPathGid, params *GetSubgoalsForGoalParams, reqEditors ...RequestEditorFn) (*GetSubgoalsForGoalResponse, error) {
	rsp, err := c.GetSubgoalsForGoal(ctx, goalGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubgoalsForGoalResponse(rsp)
}

// SupportingWorkWithResponse request returning *SupportingWorkResponse
func (c *ClientWithResponses) SupportingWorkWithResponse(ctx context.Context, goalGid GoalPathGid, params *SupportingWorkParams, reqEditors ...RequestEditorFn) (*SupportingWorkResponse, error) {
	rsp, err := c.SupportingWork(ctx, goalGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSupportingWorkResponse(rsp)
}

// GetJobWithResponse request returning *GetJobResponse
func (c *ClientWithResponses) GetJobWithResponse(ctx context.Context, jobGid JobPathGid, params *GetJobParams, reqEditors ...RequestEditorFn) (*GetJobResponse, error) {
	rsp, err := c.GetJob(ctx, jobGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobResponse(rsp)
}

// CreateOrganizationExportWithBodyWithResponse request with arbitrary body returning *CreateOrganizationExportResponse
func (c *ClientWithResponses) CreateOrganizationExportWithBodyWithResponse(ctx context.Context, params *CreateOrganizationExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationExportResponse, error) {
	rsp, err := c.CreateOrganizationExportWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationExportResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationExportWithResponse(ctx context.Context, params *CreateOrganizationExportParams, body CreateOrganizationExportJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationExportResponse, error) {
	rsp, err := c.CreateOrganizationExport(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationExportResponse(rsp)
}

// GetOrganizationExportWithResponse request returning *GetOrganizationExportResponse
func (c *ClientWithResponses) GetOrganizationExportWithResponse(ctx context.Context, organizationExportGid OrganizationExportPathGid, params *GetOrganizationExportParams, reqEditors ...RequestEditorFn) (*GetOrganizationExportResponse, error) {
	rsp, err := c.GetOrganizationExport(ctx, organizationExportGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationExportResponse(rsp)
}

// GetTeamsForOrganizationWithResponse request returning *GetTeamsForOrganizationResponse
func (c *ClientWithResponses) GetTeamsForOrganizationWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *GetTeamsForOrganizationParams, reqEditors ...RequestEditorFn) (*GetTeamsForOrganizationResponse, error) {
	rsp, err := c.GetTeamsForOrganization(ctx, workspaceGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsForOrganizationResponse(rsp)
}

// GetPortfolioMembershipsWithResponse request returning *GetPortfolioMembershipsResponse
func (c *ClientWithResponses) GetPortfolioMembershipsWithResponse(ctx context.Context, params *GetPortfolioMembershipsParams, reqEditors ...RequestEditorFn) (*GetPortfolioMembershipsResponse, error) {
	rsp, err := c.GetPortfolioMemberships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPortfolioMembershipsResponse(rsp)
}

// GetPortfolioMembershipWithResponse request returning *GetPortfolioMembershipResponse
func (c *ClientWithResponses) GetPortfolioMembershipWithResponse(ctx context.Context, portfolioMembershipGid PortfolioMembershipPathGid, params *GetPortfolioMembershipParams, reqEditors ...RequestEditorFn) (*GetPortfolioMembershipResponse, error) {
	rsp, err := c.GetPortfolioMembership(ctx, portfolioMembershipGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPortfolioMembershipResponse(rsp)
}

// GetPortfoliosWithResponse request returning *GetPortfoliosResponse
func (c *ClientWithResponses) GetPortfoliosWithResponse(ctx context.Context, params *GetPortfoliosParams, reqEditors ...RequestEditorFn) (*GetPortfoliosResponse, error) {
	rsp, err := c.GetPortfolios(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPortfoliosResponse(rsp)
}

// CreatePortfolioWithBodyWithResponse request with arbitrary body returning *CreatePortfolioResponse
func (c *ClientWithResponses) CreatePortfolioWithBodyWithResponse(ctx context.Context, params *CreatePortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePortfolioResponse, error) {
	rsp, err := c.CreatePortfolioWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePortfolioResponse(rsp)
}

func (c *ClientWithResponses) CreatePortfolioWithResponse(ctx context.Context, params *CreatePortfolioParams, body CreatePortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePortfolioResponse, error) {
	rsp, err := c.CreatePortfolio(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePortfolioResponse(rsp)
}

// DeletePortfolioWithResponse request returning *DeletePortfolioResponse
func (c *ClientWithResponses) DeletePortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *DeletePortfolioParams, reqEditors ...RequestEditorFn) (*DeletePortfolioResponse, error) {
	rsp, err := c.DeletePortfolio(ctx, portfolioGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePortfolioResponse(rsp)
}

// GetPortfolioWithResponse request returning *GetPortfolioResponse
func (c *ClientWithResponses) GetPortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *GetPortfolioParams, reqEditors ...RequestEditorFn) (*GetPortfolioResponse, error) {
	rsp, err := c.GetPortfolio(ctx, portfolioGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPortfolioResponse(rsp)
}

// UpdatePortfolioWithBodyWithResponse request with arbitrary body returning *UpdatePortfolioResponse
func (c *ClientWithResponses) UpdatePortfolioWithBodyWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *UpdatePortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePortfolioResponse, error) {
	rsp, err := c.UpdatePortfolioWithBody(ctx, portfolioGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePortfolioResponse(rsp)
}

func (c *ClientWithResponses) UpdatePortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *UpdatePortfolioParams, body UpdatePortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePortfolioResponse, error) {
	rsp, err := c.UpdatePortfolio(ctx, portfolioGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePortfolioResponse(rsp)
}

// AddCustomFieldSettingForPortfolioWithBodyWithResponse request with arbitrary body returning *AddCustomFieldSettingForPortfolioResponse
func (c *ClientWithResponses) AddCustomFieldSettingForPortfolioWithBodyWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *AddCustomFieldSettingForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCustomFieldSettingForPortfolioResponse, error) {
	rsp, err := c.AddCustomFieldSettingForPortfolioWithBody(ctx, portfolioGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCustomFieldSettingForPortfolioResponse(rsp)
}

func (c *ClientWithResponses) AddCustomFieldSettingForPortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *AddCustomFieldSettingForPortfolioParams, body AddCustomFieldSettingForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCustomFieldSettingForPortfolioResponse, error) {
	rsp, err := c.AddCustomFieldSettingForPortfolio(ctx, portfolioGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCustomFieldSettingForPortfolioResponse(rsp)
}

// AddItemForPortfolioWithBodyWithResponse request with arbitrary body returning *AddItemForPortfolioResponse
func (c *ClientWithResponses) AddItemForPortfolioWithBodyWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *AddItemForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddItemForPortfolioResponse, error) {
	rsp, err := c.AddItemForPortfolioWithBody(ctx, portfolioGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddItemForPortfolioResponse(rsp)
}

func (c *ClientWithResponses) AddItemForPortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *AddItemForPortfolioParams, body AddItemForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*AddItemForPortfolioResponse, error) {
	rsp, err := c.AddItemForPortfolio(ctx, portfolioGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddItemForPortfolioResponse(rsp)
}

// AddMembersForPortfolioWithBodyWithResponse request with arbitrary body returning *AddMembersForPortfolioResponse
func (c *ClientWithResponses) AddMembersForPortfolioWithBodyWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *AddMembersForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMembersForPortfolioResponse, error) {
	rsp, err := c.AddMembersForPortfolioWithBody(ctx, portfolioGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMembersForPortfolioResponse(rsp)
}

func (c *ClientWithResponses) AddMembersForPortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *AddMembersForPortfolioParams, body AddMembersForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMembersForPortfolioResponse, error) {
	rsp, err := c.AddMembersForPortfolio(ctx, portfolioGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMembersForPortfolioResponse(rsp)
}

// GetCustomFieldSettingsForPortfolioWithResponse request returning *GetCustomFieldSettingsForPortfolioResponse
func (c *ClientWithResponses) GetCustomFieldSettingsForPortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *GetCustomFieldSettingsForPortfolioParams, reqEditors ...RequestEditorFn) (*GetCustomFieldSettingsForPortfolioResponse, error) {
	rsp, err := c.GetCustomFieldSettingsForPortfolio(ctx, portfolioGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomFieldSettingsForPortfolioResponse(rsp)
}

// GetItemsForPortfolioWithResponse request returning *GetItemsForPortfolioResponse
func (c *ClientWithResponses) GetItemsForPortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *GetItemsForPortfolioParams, reqEditors ...RequestEditorFn) (*GetItemsForPortfolioResponse, error) {
	rsp, err := c.GetItemsForPortfolio(ctx, portfolioGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetItemsForPortfolioResponse(rsp)
}

// GetPortfolioMembershipsForPortfolioWithResponse request returning *GetPortfolioMembershipsForPortfolioResponse
func (c *ClientWithResponses) GetPortfolioMembershipsForPortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *GetPortfolioMembershipsForPortfolioParams, reqEditors ...RequestEditorFn) (*GetPortfolioMembershipsForPortfolioResponse, error) {
	rsp, err := c.GetPortfolioMembershipsForPortfolio(ctx, portfolioGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPortfolioMembershipsForPortfolioResponse(rsp)
}

// RemoveCustomFieldSettingForPortfolioWithBodyWithResponse request with arbitrary body returning *RemoveCustomFieldSettingForPortfolioResponse
func (c *ClientWithResponses) RemoveCustomFieldSettingForPortfolioWithBodyWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveCustomFieldSettingForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveCustomFieldSettingForPortfolioResponse, error) {
	rsp, err := c.RemoveCustomFieldSettingForPortfolioWithBody(ctx, portfolioGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveCustomFieldSettingForPortfolioResponse(rsp)
}

func (c *ClientWithResponses) RemoveCustomFieldSettingForPortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveCustomFieldSettingForPortfolioParams, body RemoveCustomFieldSettingForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveCustomFieldSettingForPortfolioResponse, error) {
	rsp, err := c.RemoveCustomFieldSettingForPortfolio(ctx, portfolioGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveCustomFieldSettingForPortfolioResponse(rsp)
}

// RemoveItemForPortfolioWithBodyWithResponse request with arbitrary body returning *RemoveItemForPortfolioResponse
func (c *ClientWithResponses) RemoveItemForPortfolioWithBodyWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveItemForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveItemForPortfolioResponse, error) {
	rsp, err := c.RemoveItemForPortfolioWithBody(ctx, portfolioGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveItemForPortfolioResponse(rsp)
}

func (c *ClientWithResponses) RemoveItemForPortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveItemForPortfolioParams, body RemoveItemForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveItemForPortfolioResponse, error) {
	rsp, err := c.RemoveItemForPortfolio(ctx, portfolioGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveItemForPortfolioResponse(rsp)
}

// RemoveMembersForPortfolioWithBodyWithResponse request with arbitrary body returning *RemoveMembersForPortfolioResponse
func (c *ClientWithResponses) RemoveMembersForPortfolioWithBodyWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveMembersForPortfolioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveMembersForPortfolioResponse, error) {
	rsp, err := c.RemoveMembersForPortfolioWithBody(ctx, portfolioGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMembersForPortfolioResponse(rsp)
}

func (c *ClientWithResponses) RemoveMembersForPortfolioWithResponse(ctx context.Context, portfolioGid PortfolioPathGid, params *RemoveMembersForPortfolioParams, body RemoveMembersForPortfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveMembersForPortfolioResponse, error) {
	rsp, err := c.RemoveMembersForPortfolio(ctx, portfolioGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMembersForPortfolioResponse(rsp)
}

// GetProjectMembershipWithResponse request returning *GetProjectMembershipResponse
func (c *ClientWithResponses) GetProjectMembershipWithResponse(ctx context.Context, projectMembershipGid ProjectMembershipPathGid, params *GetProjectMembershipParams, reqEditors ...RequestEditorFn) (*GetProjectMembershipResponse, error) {
	rsp, err := c.GetProjectMembership(ctx, projectMembershipGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectMembershipResponse(rsp)
}

// DeleteProjectStatusWithResponse request returning *DeleteProjectStatusResponse
func (c *ClientWithResponses) DeleteProjectStatusWithResponse(ctx context.Context, projectStatusGid ProjectStatusPathGid, params *DeleteProjectStatusParams, reqEditors ...RequestEditorFn) (*DeleteProjectStatusResponse, error) {
	rsp, err := c.DeleteProjectStatus(ctx, projectStatusGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectStatusResponse(rsp)
}

// GetProjectStatusWithResponse request returning *GetProjectStatusResponse
func (c *ClientWithResponses) GetProjectStatusWithResponse(ctx context.Context, projectStatusGid ProjectStatusPathGid, params *GetProjectStatusParams, reqEditors ...RequestEditorFn) (*GetProjectStatusResponse, error) {
	rsp, err := c.GetProjectStatus(ctx, projectStatusGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectStatusResponse(rsp)
}

// GetProjectsWithResponse request returning *GetProjectsResponse
func (c *ClientWithResponses) GetProjectsWithResponse(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error) {
	rsp, err := c.GetProjects(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsResponse(rsp)
}

// CreateProjectWithBodyWithResponse request with arbitrary body returning *CreateProjectResponse
func (c *ClientWithResponses) CreateProjectWithBodyWithResponse(ctx context.Context, params *CreateProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error) {
	rsp, err := c.CreateProjectWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectResponse(rsp)
}

func (c *ClientWithResponses) CreateProjectWithResponse(ctx context.Context, params *CreateProjectParams, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error) {
	rsp, err := c.CreateProject(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectResponse(rsp)
}

// DeleteProjectWithResponse request returning *DeleteProjectResponse
func (c *ClientWithResponses) DeleteProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *DeleteProjectParams, reqEditors ...RequestEditorFn) (*DeleteProjectResponse, error) {
	rsp, err := c.DeleteProject(ctx, projectGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectResponse(rsp)
}

// GetProjectWithResponse request returning *GetProjectResponse
func (c *ClientWithResponses) GetProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *GetProjectParams, reqEditors ...RequestEditorFn) (*GetProjectResponse, error) {
	rsp, err := c.GetProject(ctx, projectGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectResponse(rsp)
}

// UpdateProjectWithBodyWithResponse request with arbitrary body returning *UpdateProjectResponse
func (c *ClientWithResponses) UpdateProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *UpdateProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProjectResponse, error) {
	rsp, err := c.UpdateProjectWithBody(ctx, projectGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProjectResponse(rsp)
}

func (c *ClientWithResponses) UpdateProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *UpdateProjectParams, body UpdateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProjectResponse, error) {
	rsp, err := c.UpdateProject(ctx, projectGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProjectResponse(rsp)
}

// AddCustomFieldSettingForProjectWithBodyWithResponse request with arbitrary body returning *AddCustomFieldSettingForProjectResponse
func (c *ClientWithResponses) AddCustomFieldSettingForProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *AddCustomFieldSettingForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCustomFieldSettingForProjectResponse, error) {
	rsp, err := c.AddCustomFieldSettingForProjectWithBody(ctx, projectGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCustomFieldSettingForProjectResponse(rsp)
}

func (c *ClientWithResponses) AddCustomFieldSettingForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *AddCustomFieldSettingForProjectParams, body AddCustomFieldSettingForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCustomFieldSettingForProjectResponse, error) {
	rsp, err := c.AddCustomFieldSettingForProject(ctx, projectGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCustomFieldSettingForProjectResponse(rsp)
}

// AddFollowersForProjectWithBodyWithResponse request with arbitrary body returning *AddFollowersForProjectResponse
func (c *ClientWithResponses) AddFollowersForProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *AddFollowersForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddFollowersForProjectResponse, error) {
	rsp, err := c.AddFollowersForProjectWithBody(ctx, projectGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddFollowersForProjectResponse(rsp)
}

func (c *ClientWithResponses) AddFollowersForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *AddFollowersForProjectParams, body AddFollowersForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*AddFollowersForProjectResponse, error) {
	rsp, err := c.AddFollowersForProject(ctx, projectGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddFollowersForProjectResponse(rsp)
}

// AddMembersForProjectWithBodyWithResponse request with arbitrary body returning *AddMembersForProjectResponse
func (c *ClientWithResponses) AddMembersForProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *AddMembersForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMembersForProjectResponse, error) {
	rsp, err := c.AddMembersForProjectWithBody(ctx, projectGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMembersForProjectResponse(rsp)
}

func (c *ClientWithResponses) AddMembersForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *AddMembersForProjectParams, body AddMembersForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMembersForProjectResponse, error) {
	rsp, err := c.AddMembersForProject(ctx, projectGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMembersForProjectResponse(rsp)
}

// GetCustomFieldSettingsForProjectWithResponse request returning *GetCustomFieldSettingsForProjectResponse
func (c *ClientWithResponses) GetCustomFieldSettingsForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *GetCustomFieldSettingsForProjectParams, reqEditors ...RequestEditorFn) (*GetCustomFieldSettingsForProjectResponse, error) {
	rsp, err := c.GetCustomFieldSettingsForProject(ctx, projectGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomFieldSettingsForProjectResponse(rsp)
}

// DuplicateProjectWithBodyWithResponse request with arbitrary body returning *DuplicateProjectResponse
func (c *ClientWithResponses) DuplicateProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *DuplicateProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DuplicateProjectResponse, error) {
	rsp, err := c.DuplicateProjectWithBody(ctx, projectGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDuplicateProjectResponse(rsp)
}

func (c *ClientWithResponses) DuplicateProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *DuplicateProjectParams, body DuplicateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*DuplicateProjectResponse, error) {
	rsp, err := c.DuplicateProject(ctx, projectGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDuplicateProjectResponse(rsp)
}

// GetProjectMembershipsForProjectWithResponse request returning *GetProjectMembershipsForProjectResponse
func (c *ClientWithResponses) GetProjectMembershipsForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *GetProjectMembershipsForProjectParams, reqEditors ...RequestEditorFn) (*GetProjectMembershipsForProjectResponse, error) {
	rsp, err := c.GetProjectMembershipsForProject(ctx, projectGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectMembershipsForProjectResponse(rsp)
}

// GetProjectStatusesForProjectWithResponse request returning *GetProjectStatusesForProjectResponse
func (c *ClientWithResponses) GetProjectStatusesForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *GetProjectStatusesForProjectParams, reqEditors ...RequestEditorFn) (*GetProjectStatusesForProjectResponse, error) {
	rsp, err := c.GetProjectStatusesForProject(ctx, projectGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectStatusesForProjectResponse(rsp)
}

// CreateProjectStatusForProjectWithBodyWithResponse request with arbitrary body returning *CreateProjectStatusForProjectResponse
func (c *ClientWithResponses) CreateProjectStatusForProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *CreateProjectStatusForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectStatusForProjectResponse, error) {
	rsp, err := c.CreateProjectStatusForProjectWithBody(ctx, projectGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectStatusForProjectResponse(rsp)
}

func (c *ClientWithResponses) CreateProjectStatusForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *CreateProjectStatusForProjectParams, body CreateProjectStatusForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectStatusForProjectResponse, error) {
	rsp, err := c.CreateProjectStatusForProject(ctx, projectGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectStatusForProjectResponse(rsp)
}

// RemoveCustomFieldSettingForProjectWithBodyWithResponse request with arbitrary body returning *RemoveCustomFieldSettingForProjectResponse
func (c *ClientWithResponses) RemoveCustomFieldSettingForProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *RemoveCustomFieldSettingForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveCustomFieldSettingForProjectResponse, error) {
	rsp, err := c.RemoveCustomFieldSettingForProjectWithBody(ctx, projectGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveCustomFieldSettingForProjectResponse(rsp)
}

func (c *ClientWithResponses) RemoveCustomFieldSettingForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *RemoveCustomFieldSettingForProjectParams, body RemoveCustomFieldSettingForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveCustomFieldSettingForProjectResponse, error) {
	rsp, err := c.RemoveCustomFieldSettingForProject(ctx, projectGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveCustomFieldSettingForProjectResponse(rsp)
}

// RemoveFollowersForProjectWithBodyWithResponse request with arbitrary body returning *RemoveFollowersForProjectResponse
func (c *ClientWithResponses) RemoveFollowersForProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *RemoveFollowersForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveFollowersForProjectResponse, error) {
	rsp, err := c.RemoveFollowersForProjectWithBody(ctx, projectGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveFollowersForProjectResponse(rsp)
}

func (c *ClientWithResponses) RemoveFollowersForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *RemoveFollowersForProjectParams, body RemoveFollowersForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveFollowersForProjectResponse, error) {
	rsp, err := c.RemoveFollowersForProject(ctx, projectGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveFollowersForProjectResponse(rsp)
}

// RemoveMembersForProjectWithBodyWithResponse request with arbitrary body returning *RemoveMembersForProjectResponse
func (c *ClientWithResponses) RemoveMembersForProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *RemoveMembersForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveMembersForProjectResponse, error) {
	rsp, err := c.RemoveMembersForProjectWithBody(ctx, projectGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMembersForProjectResponse(rsp)
}

func (c *ClientWithResponses) RemoveMembersForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *RemoveMembersForProjectParams, body RemoveMembersForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveMembersForProjectResponse, error) {
	rsp, err := c.RemoveMembersForProject(ctx, projectGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMembersForProjectResponse(rsp)
}

// GetSectionsForProjectWithResponse request returning *GetSectionsForProjectResponse
func (c *ClientWithResponses) GetSectionsForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *GetSectionsForProjectParams, reqEditors ...RequestEditorFn) (*GetSectionsForProjectResponse, error) {
	rsp, err := c.GetSectionsForProject(ctx, projectGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSectionsForProjectResponse(rsp)
}

// CreateSectionForProjectWithBodyWithResponse request with arbitrary body returning *CreateSectionForProjectResponse
func (c *ClientWithResponses) CreateSectionForProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *CreateSectionForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSectionForProjectResponse, error) {
	rsp, err := c.CreateSectionForProjectWithBody(ctx, projectGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSectionForProjectResponse(rsp)
}

func (c *ClientWithResponses) CreateSectionForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *CreateSectionForProjectParams, body CreateSectionForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSectionForProjectResponse, error) {
	rsp, err := c.CreateSectionForProject(ctx, projectGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSectionForProjectResponse(rsp)
}

// InsertSectionForProjectWithBodyWithResponse request with arbitrary body returning *InsertSectionForProjectResponse
func (c *ClientWithResponses) InsertSectionForProjectWithBodyWithResponse(ctx context.Context, projectGid ProjectPathGid, params *InsertSectionForProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertSectionForProjectResponse, error) {
	rsp, err := c.InsertSectionForProjectWithBody(ctx, projectGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsertSectionForProjectResponse(rsp)
}

func (c *ClientWithResponses) InsertSectionForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *InsertSectionForProjectParams, body InsertSectionForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*InsertSectionForProjectResponse, error) {
	rsp, err := c.InsertSectionForProject(ctx, projectGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsertSectionForProjectResponse(rsp)
}

// GetTaskCountsForProjectWithResponse request returning *GetTaskCountsForProjectResponse
func (c *ClientWithResponses) GetTaskCountsForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *GetTaskCountsForProjectParams, reqEditors ...RequestEditorFn) (*GetTaskCountsForProjectResponse, error) {
	rsp, err := c.GetTaskCountsForProject(ctx, projectGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskCountsForProjectResponse(rsp)
}

// GetTasksForProjectWithResponse request returning *GetTasksForProjectResponse
func (c *ClientWithResponses) GetTasksForProjectWithResponse(ctx context.Context, projectGid ProjectPathGid, params *GetTasksForProjectParams, reqEditors ...RequestEditorFn) (*GetTasksForProjectResponse, error) {
	rsp, err := c.GetTasksForProject(ctx, projectGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTasksForProjectResponse(rsp)
}

// DeleteSectionWithResponse request returning *DeleteSectionResponse
func (c *ClientWithResponses) DeleteSectionWithResponse(ctx context.Context, sectionGid SectionPathGid, params *DeleteSectionParams, reqEditors ...RequestEditorFn) (*DeleteSectionResponse, error) {
	rsp, err := c.DeleteSection(ctx, sectionGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSectionResponse(rsp)
}

// GetSectionWithResponse request returning *GetSectionResponse
func (c *ClientWithResponses) GetSectionWithResponse(ctx context.Context, sectionGid SectionPathGid, params *GetSectionParams, reqEditors ...RequestEditorFn) (*GetSectionResponse, error) {
	rsp, err := c.GetSection(ctx, sectionGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSectionResponse(rsp)
}

// UpdateSectionWithBodyWithResponse request with arbitrary body returning *UpdateSectionResponse
func (c *ClientWithResponses) UpdateSectionWithBodyWithResponse(ctx context.Context, sectionGid SectionPathGid, params *UpdateSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSectionResponse, error) {
	rsp, err := c.UpdateSectionWithBody(ctx, sectionGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSectionResponse(rsp)
}

func (c *ClientWithResponses) UpdateSectionWithResponse(ctx context.Context, sectionGid SectionPathGid, params *UpdateSectionParams, body UpdateSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSectionResponse, error) {
	rsp, err := c.UpdateSection(ctx, sectionGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSectionResponse(rsp)
}

// AddTaskForSectionWithBodyWithResponse request with arbitrary body returning *AddTaskForSectionResponse
func (c *ClientWithResponses) AddTaskForSectionWithBodyWithResponse(ctx context.Context, sectionGid SectionPathGid, params *AddTaskForSectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTaskForSectionResponse, error) {
	rsp, err := c.AddTaskForSectionWithBody(ctx, sectionGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTaskForSectionResponse(rsp)
}

func (c *ClientWithResponses) AddTaskForSectionWithResponse(ctx context.Context, sectionGid SectionPathGid, params *AddTaskForSectionParams, body AddTaskForSectionJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTaskForSectionResponse, error) {
	rsp, err := c.AddTaskForSection(ctx, sectionGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTaskForSectionResponse(rsp)
}

// GetTasksForSectionWithResponse request returning *GetTasksForSectionResponse
func (c *ClientWithResponses) GetTasksForSectionWithResponse(ctx context.Context, sectionGid SectionPathGid, params *GetTasksForSectionParams, reqEditors ...RequestEditorFn) (*GetTasksForSectionResponse, error) {
	rsp, err := c.GetTasksForSection(ctx, sectionGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTasksForSectionResponse(rsp)
}

// DeleteStoryWithResponse request returning *DeleteStoryResponse
func (c *ClientWithResponses) DeleteStoryWithResponse(ctx context.Context, storyGid StoryPathGid, params *DeleteStoryParams, reqEditors ...RequestEditorFn) (*DeleteStoryResponse, error) {
	rsp, err := c.DeleteStory(ctx, storyGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStoryResponse(rsp)
}

// GetStoryWithResponse request returning *GetStoryResponse
func (c *ClientWithResponses) GetStoryWithResponse(ctx context.Context, storyGid StoryPathGid, params *GetStoryParams, reqEditors ...RequestEditorFn) (*GetStoryResponse, error) {
	rsp, err := c.GetStory(ctx, storyGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStoryResponse(rsp)
}

// UpdateStoryWithBodyWithResponse request with arbitrary body returning *UpdateStoryResponse
func (c *ClientWithResponses) UpdateStoryWithBodyWithResponse(ctx context.Context, storyGid StoryPathGid, params *UpdateStoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStoryResponse, error) {
	rsp, err := c.UpdateStoryWithBody(ctx, storyGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStoryResponse(rsp)
}

func (c *ClientWithResponses) UpdateStoryWithResponse(ctx context.Context, storyGid StoryPathGid, params *UpdateStoryParams, body UpdateStoryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStoryResponse, error) {
	rsp, err := c.UpdateStory(ctx, storyGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStoryResponse(rsp)
}

// GetTagsWithResponse request returning *GetTagsResponse
func (c *ClientWithResponses) GetTagsWithResponse(ctx context.Context, params *GetTagsParams, reqEditors ...RequestEditorFn) (*GetTagsResponse, error) {
	rsp, err := c.GetTags(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsResponse(rsp)
}

// CreateTagWithBodyWithResponse request with arbitrary body returning *CreateTagResponse
func (c *ClientWithResponses) CreateTagWithBodyWithResponse(ctx context.Context, params *CreateTagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagResponse, error) {
	rsp, err := c.CreateTagWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagResponse(rsp)
}

func (c *ClientWithResponses) CreateTagWithResponse(ctx context.Context, params *CreateTagParams, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagResponse, error) {
	rsp, err := c.CreateTag(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagResponse(rsp)
}

// DeleteTagWithResponse request returning *DeleteTagResponse
func (c *ClientWithResponses) DeleteTagWithResponse(ctx context.Context, tagGid TagPathGid, params *DeleteTagParams, reqEditors ...RequestEditorFn) (*DeleteTagResponse, error) {
	rsp, err := c.DeleteTag(ctx, tagGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagResponse(rsp)
}

// GetTagWithResponse request returning *GetTagResponse
func (c *ClientWithResponses) GetTagWithResponse(ctx context.Context, tagGid TagPathGid, params *GetTagParams, reqEditors ...RequestEditorFn) (*GetTagResponse, error) {
	rsp, err := c.GetTag(ctx, tagGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagResponse(rsp)
}

// UpdateTagWithResponse request returning *UpdateTagResponse
func (c *ClientWithResponses) UpdateTagWithResponse(ctx context.Context, tagGid TagPathGid, params *UpdateTagParams, reqEditors ...RequestEditorFn) (*UpdateTagResponse, error) {
	rsp, err := c.UpdateTag(ctx, tagGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTagResponse(rsp)
}

// GetTasksForTagWithResponse request returning *GetTasksForTagResponse
func (c *ClientWithResponses) GetTasksForTagWithResponse(ctx context.Context, tagGid TagPathGid, params *GetTasksForTagParams, reqEditors ...RequestEditorFn) (*GetTasksForTagResponse, error) {
	rsp, err := c.GetTasksForTag(ctx, tagGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTasksForTagResponse(rsp)
}

// GetTasksWithResponse request returning *GetTasksResponse
func (c *ClientWithResponses) GetTasksWithResponse(ctx context.Context, params *GetTasksParams, reqEditors ...RequestEditorFn) (*GetTasksResponse, error) {
	rsp, err := c.GetTasks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTasksResponse(rsp)
}

// CreateTaskWithBodyWithResponse request with arbitrary body returning *CreateTaskResponse
func (c *ClientWithResponses) CreateTaskWithBodyWithResponse(ctx context.Context, params *CreateTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTaskResponse, error) {
	rsp, err := c.CreateTaskWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTaskResponse(rsp)
}

func (c *ClientWithResponses) CreateTaskWithResponse(ctx context.Context, params *CreateTaskParams, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTaskResponse, error) {
	rsp, err := c.CreateTask(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTaskResponse(rsp)
}

// DeleteTaskWithResponse request returning *DeleteTaskResponse
func (c *ClientWithResponses) DeleteTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *DeleteTaskParams, reqEditors ...RequestEditorFn) (*DeleteTaskResponse, error) {
	rsp, err := c.DeleteTask(ctx, taskGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTaskResponse(rsp)
}

// GetTaskWithResponse request returning *GetTaskResponse
func (c *ClientWithResponses) GetTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *GetTaskParams, reqEditors ...RequestEditorFn) (*GetTaskResponse, error) {
	rsp, err := c.GetTask(ctx, taskGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskResponse(rsp)
}

// UpdateTaskWithBodyWithResponse request with arbitrary body returning *UpdateTaskResponse
func (c *ClientWithResponses) UpdateTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *UpdateTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTaskResponse, error) {
	rsp, err := c.UpdateTaskWithBody(ctx, taskGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTaskResponse(rsp)
}

func (c *ClientWithResponses) UpdateTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *UpdateTaskParams, body UpdateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTaskResponse, error) {
	rsp, err := c.UpdateTask(ctx, taskGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTaskResponse(rsp)
}

// AddDependenciesForTaskWithBodyWithResponse request with arbitrary body returning *AddDependenciesForTaskResponse
func (c *ClientWithResponses) AddDependenciesForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *AddDependenciesForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddDependenciesForTaskResponse, error) {
	rsp, err := c.AddDependenciesForTaskWithBody(ctx, taskGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddDependenciesForTaskResponse(rsp)
}

func (c *ClientWithResponses) AddDependenciesForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *AddDependenciesForTaskParams, body AddDependenciesForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddDependenciesForTaskResponse, error) {
	rsp, err := c.AddDependenciesForTask(ctx, taskGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddDependenciesForTaskResponse(rsp)
}

// AddDependentsForTaskWithBodyWithResponse request with arbitrary body returning *AddDependentsForTaskResponse
func (c *ClientWithResponses) AddDependentsForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *AddDependentsForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddDependentsForTaskResponse, error) {
	rsp, err := c.AddDependentsForTaskWithBody(ctx, taskGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddDependentsForTaskResponse(rsp)
}

func (c *ClientWithResponses) AddDependentsForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *AddDependentsForTaskParams, body AddDependentsForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddDependentsForTaskResponse, error) {
	rsp, err := c.AddDependentsForTask(ctx, taskGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddDependentsForTaskResponse(rsp)
}

// AddFollowersForTaskWithBodyWithResponse request with arbitrary body returning *AddFollowersForTaskResponse
func (c *ClientWithResponses) AddFollowersForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *AddFollowersForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddFollowersForTaskResponse, error) {
	rsp, err := c.AddFollowersForTaskWithBody(ctx, taskGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddFollowersForTaskResponse(rsp)
}

func (c *ClientWithResponses) AddFollowersForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *AddFollowersForTaskParams, body AddFollowersForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddFollowersForTaskResponse, error) {
	rsp, err := c.AddFollowersForTask(ctx, taskGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddFollowersForTaskResponse(rsp)
}

// AddProjectForTaskWithBodyWithResponse request with arbitrary body returning *AddProjectForTaskResponse
func (c *ClientWithResponses) AddProjectForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *AddProjectForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddProjectForTaskResponse, error) {
	rsp, err := c.AddProjectForTaskWithBody(ctx, taskGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddProjectForTaskResponse(rsp)
}

func (c *ClientWithResponses) AddProjectForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *AddProjectForTaskParams, body AddProjectForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddProjectForTaskResponse, error) {
	rsp, err := c.AddProjectForTask(ctx, taskGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddProjectForTaskResponse(rsp)
}

// AddTagForTaskWithBodyWithResponse request with arbitrary body returning *AddTagForTaskResponse
func (c *ClientWithResponses) AddTagForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *AddTagForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTagForTaskResponse, error) {
	rsp, err := c.AddTagForTaskWithBody(ctx, taskGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTagForTaskResponse(rsp)
}

func (c *ClientWithResponses) AddTagForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *AddTagForTaskParams, body AddTagForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTagForTaskResponse, error) {
	rsp, err := c.AddTagForTask(ctx, taskGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTagForTaskResponse(rsp)
}

// GetAttachmentsForTaskWithResponse request returning *GetAttachmentsForTaskResponse
func (c *ClientWithResponses) GetAttachmentsForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *GetAttachmentsForTaskParams, reqEditors ...RequestEditorFn) (*GetAttachmentsForTaskResponse, error) {
	rsp, err := c.GetAttachmentsForTask(ctx, taskGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAttachmentsForTaskResponse(rsp)
}

// CreateAttachmentForTaskWithBodyWithResponse request with arbitrary body returning *CreateAttachmentForTaskResponse
func (c *ClientWithResponses) CreateAttachmentForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *CreateAttachmentForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAttachmentForTaskResponse, error) {
	rsp, err := c.CreateAttachmentForTaskWithBody(ctx, taskGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAttachmentForTaskResponse(rsp)
}

// GetDependenciesForTaskWithResponse request returning *GetDependenciesForTaskResponse
func (c *ClientWithResponses) GetDependenciesForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *GetDependenciesForTaskParams, reqEditors ...RequestEditorFn) (*GetDependenciesForTaskResponse, error) {
	rsp, err := c.GetDependenciesForTask(ctx, taskGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDependenciesForTaskResponse(rsp)
}

// GetDependentsForTaskWithResponse request returning *GetDependentsForTaskResponse
func (c *ClientWithResponses) GetDependentsForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *GetDependentsForTaskParams, reqEditors ...RequestEditorFn) (*GetDependentsForTaskResponse, error) {
	rsp, err := c.GetDependentsForTask(ctx, taskGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDependentsForTaskResponse(rsp)
}

// DuplicateTaskWithBodyWithResponse request with arbitrary body returning *DuplicateTaskResponse
func (c *ClientWithResponses) DuplicateTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *DuplicateTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DuplicateTaskResponse, error) {
	rsp, err := c.DuplicateTaskWithBody(ctx, taskGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDuplicateTaskResponse(rsp)
}

func (c *ClientWithResponses) DuplicateTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *DuplicateTaskParams, body DuplicateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*DuplicateTaskResponse, error) {
	rsp, err := c.DuplicateTask(ctx, taskGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDuplicateTaskResponse(rsp)
}

// GetProjectsForTaskWithResponse request returning *GetProjectsForTaskResponse
func (c *ClientWithResponses) GetProjectsForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *GetProjectsForTaskParams, reqEditors ...RequestEditorFn) (*GetProjectsForTaskResponse, error) {
	rsp, err := c.GetProjectsForTask(ctx, taskGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsForTaskResponse(rsp)
}

// RemoveDependenciesForTaskWithBodyWithResponse request with arbitrary body returning *RemoveDependenciesForTaskResponse
func (c *ClientWithResponses) RemoveDependenciesForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *RemoveDependenciesForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveDependenciesForTaskResponse, error) {
	rsp, err := c.RemoveDependenciesForTaskWithBody(ctx, taskGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveDependenciesForTaskResponse(rsp)
}

func (c *ClientWithResponses) RemoveDependenciesForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *RemoveDependenciesForTaskParams, body RemoveDependenciesForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveDependenciesForTaskResponse, error) {
	rsp, err := c.RemoveDependenciesForTask(ctx, taskGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveDependenciesForTaskResponse(rsp)
}

// RemoveDependentsForTaskWithBodyWithResponse request with arbitrary body returning *RemoveDependentsForTaskResponse
func (c *ClientWithResponses) RemoveDependentsForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *RemoveDependentsForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveDependentsForTaskResponse, error) {
	rsp, err := c.RemoveDependentsForTaskWithBody(ctx, taskGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveDependentsForTaskResponse(rsp)
}

func (c *ClientWithResponses) RemoveDependentsForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *RemoveDependentsForTaskParams, body RemoveDependentsForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveDependentsForTaskResponse, error) {
	rsp, err := c.RemoveDependentsForTask(ctx, taskGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveDependentsForTaskResponse(rsp)
}

// RemoveFollowerForTaskWithBodyWithResponse request with arbitrary body returning *RemoveFollowerForTaskResponse
func (c *ClientWithResponses) RemoveFollowerForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *RemoveFollowerForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveFollowerForTaskResponse, error) {
	rsp, err := c.RemoveFollowerForTaskWithBody(ctx, taskGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveFollowerForTaskResponse(rsp)
}

func (c *ClientWithResponses) RemoveFollowerForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *RemoveFollowerForTaskParams, body RemoveFollowerForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveFollowerForTaskResponse, error) {
	rsp, err := c.RemoveFollowerForTask(ctx, taskGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveFollowerForTaskResponse(rsp)
}

// RemoveProjectForTaskWithBodyWithResponse request with arbitrary body returning *RemoveProjectForTaskResponse
func (c *ClientWithResponses) RemoveProjectForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *RemoveProjectForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveProjectForTaskResponse, error) {
	rsp, err := c.RemoveProjectForTaskWithBody(ctx, taskGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveProjectForTaskResponse(rsp)
}

func (c *ClientWithResponses) RemoveProjectForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *RemoveProjectForTaskParams, body RemoveProjectForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveProjectForTaskResponse, error) {
	rsp, err := c.RemoveProjectForTask(ctx, taskGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveProjectForTaskResponse(rsp)
}

// RemoveTagForTaskWithBodyWithResponse request with arbitrary body returning *RemoveTagForTaskResponse
func (c *ClientWithResponses) RemoveTagForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *RemoveTagForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveTagForTaskResponse, error) {
	rsp, err := c.RemoveTagForTaskWithBody(ctx, taskGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveTagForTaskResponse(rsp)
}

func (c *ClientWithResponses) RemoveTagForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *RemoveTagForTaskParams, body RemoveTagForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveTagForTaskResponse, error) {
	rsp, err := c.RemoveTagForTask(ctx, taskGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveTagForTaskResponse(rsp)
}

// SetParentForTaskWithBodyWithResponse request with arbitrary body returning *SetParentForTaskResponse
func (c *ClientWithResponses) SetParentForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *SetParentForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetParentForTaskResponse, error) {
	rsp, err := c.SetParentForTaskWithBody(ctx, taskGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetParentForTaskResponse(rsp)
}

func (c *ClientWithResponses) SetParentForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *SetParentForTaskParams, body SetParentForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*SetParentForTaskResponse, error) {
	rsp, err := c.SetParentForTask(ctx, taskGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetParentForTaskResponse(rsp)
}

// GetStoriesForTaskWithResponse request returning *GetStoriesForTaskResponse
func (c *ClientWithResponses) GetStoriesForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *GetStoriesForTaskParams, reqEditors ...RequestEditorFn) (*GetStoriesForTaskResponse, error) {
	rsp, err := c.GetStoriesForTask(ctx, taskGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStoriesForTaskResponse(rsp)
}

// CreateStoryForTaskWithBodyWithResponse request with arbitrary body returning *CreateStoryForTaskResponse
func (c *ClientWithResponses) CreateStoryForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *CreateStoryForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStoryForTaskResponse, error) {
	rsp, err := c.CreateStoryForTaskWithBody(ctx, taskGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStoryForTaskResponse(rsp)
}

func (c *ClientWithResponses) CreateStoryForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *CreateStoryForTaskParams, body CreateStoryForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStoryForTaskResponse, error) {
	rsp, err := c.CreateStoryForTask(ctx, taskGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStoryForTaskResponse(rsp)
}

// GetSubtasksForTaskWithResponse request returning *GetSubtasksForTaskResponse
func (c *ClientWithResponses) GetSubtasksForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *GetSubtasksForTaskParams, reqEditors ...RequestEditorFn) (*GetSubtasksForTaskResponse, error) {
	rsp, err := c.GetSubtasksForTask(ctx, taskGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubtasksForTaskResponse(rsp)
}

// CreateSubtaskForTaskWithBodyWithResponse request with arbitrary body returning *CreateSubtaskForTaskResponse
func (c *ClientWithResponses) CreateSubtaskForTaskWithBodyWithResponse(ctx context.Context, taskGid TaskPathGid, params *CreateSubtaskForTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSubtaskForTaskResponse, error) {
	rsp, err := c.CreateSubtaskForTaskWithBody(ctx, taskGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSubtaskForTaskResponse(rsp)
}

func (c *ClientWithResponses) CreateSubtaskForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *CreateSubtaskForTaskParams, body CreateSubtaskForTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSubtaskForTaskResponse, error) {
	rsp, err := c.CreateSubtaskForTask(ctx, taskGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSubtaskForTaskResponse(rsp)
}

// GetTagsForTaskWithResponse request returning *GetTagsForTaskResponse
func (c *ClientWithResponses) GetTagsForTaskWithResponse(ctx context.Context, taskGid TaskPathGid, params *GetTagsForTaskParams, reqEditors ...RequestEditorFn) (*GetTagsForTaskResponse, error) {
	rsp, err := c.GetTagsForTask(ctx, taskGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsForTaskResponse(rsp)
}

// GetTeamMembershipsWithResponse request returning *GetTeamMembershipsResponse
func (c *ClientWithResponses) GetTeamMembershipsWithResponse(ctx context.Context, params *GetTeamMembershipsParams, reqEditors ...RequestEditorFn) (*GetTeamMembershipsResponse, error) {
	rsp, err := c.GetTeamMemberships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamMembershipsResponse(rsp)
}

// GetTeamMembershipWithResponse request returning *GetTeamMembershipResponse
func (c *ClientWithResponses) GetTeamMembershipWithResponse(ctx context.Context, teamMembershipGid TeamMembershipPathGid, params *GetTeamMembershipParams, reqEditors ...RequestEditorFn) (*GetTeamMembershipResponse, error) {
	rsp, err := c.GetTeamMembership(ctx, teamMembershipGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamMembershipResponse(rsp)
}

// CreateTeamWithBodyWithResponse request with arbitrary body returning *CreateTeamResponse
func (c *ClientWithResponses) CreateTeamWithBodyWithResponse(ctx context.Context, params *CreateTeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeamWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

func (c *ClientWithResponses) CreateTeamWithResponse(ctx context.Context, params *CreateTeamParams, body CreateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeam(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

// GetTeamWithResponse request returning *GetTeamResponse
func (c *ClientWithResponses) GetTeamWithResponse(ctx context.Context, teamGid TeamPathGid, params *GetTeamParams, reqEditors ...RequestEditorFn) (*GetTeamResponse, error) {
	rsp, err := c.GetTeam(ctx, teamGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamResponse(rsp)
}

// AddUserForTeamWithBodyWithResponse request with arbitrary body returning *AddUserForTeamResponse
func (c *ClientWithResponses) AddUserForTeamWithBodyWithResponse(ctx context.Context, teamGid TeamPathGid, params *AddUserForTeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUserForTeamResponse, error) {
	rsp, err := c.AddUserForTeamWithBody(ctx, teamGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserForTeamResponse(rsp)
}

func (c *ClientWithResponses) AddUserForTeamWithResponse(ctx context.Context, teamGid TeamPathGid, params *AddUserForTeamParams, body AddUserForTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUserForTeamResponse, error) {
	rsp, err := c.AddUserForTeam(ctx, teamGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserForTeamResponse(rsp)
}

// GetProjectsForTeamWithResponse request returning *GetProjectsForTeamResponse
func (c *ClientWithResponses) GetProjectsForTeamWithResponse(ctx context.Context, teamGid TeamPathGid, params *GetProjectsForTeamParams, reqEditors ...RequestEditorFn) (*GetProjectsForTeamResponse, error) {
	rsp, err := c.GetProjectsForTeam(ctx, teamGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsForTeamResponse(rsp)
}

// CreateProjectForTeamWithBodyWithResponse request with arbitrary body returning *CreateProjectForTeamResponse
func (c *ClientWithResponses) CreateProjectForTeamWithBodyWithResponse(ctx context.Context, teamGid TeamPathGid, params *CreateProjectForTeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectForTeamResponse, error) {
	rsp, err := c.CreateProjectForTeamWithBody(ctx, teamGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectForTeamResponse(rsp)
}

func (c *ClientWithResponses) CreateProjectForTeamWithResponse(ctx context.Context, teamGid TeamPathGid, params *CreateProjectForTeamParams, body CreateProjectForTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectForTeamResponse, error) {
	rsp, err := c.CreateProjectForTeam(ctx, teamGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectForTeamResponse(rsp)
}

// RemoveUserForTeamWithBodyWithResponse request with arbitrary body returning *RemoveUserForTeamResponse
func (c *ClientWithResponses) RemoveUserForTeamWithBodyWithResponse(ctx context.Context, teamGid TeamPathGid, params *RemoveUserForTeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveUserForTeamResponse, error) {
	rsp, err := c.RemoveUserForTeamWithBody(ctx, teamGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserForTeamResponse(rsp)
}

func (c *ClientWithResponses) RemoveUserForTeamWithResponse(ctx context.Context, teamGid TeamPathGid, params *RemoveUserForTeamParams, body RemoveUserForTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveUserForTeamResponse, error) {
	rsp, err := c.RemoveUserForTeam(ctx, teamGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserForTeamResponse(rsp)
}

// GetTeamMembershipsForTeamWithResponse request returning *GetTeamMembershipsForTeamResponse
func (c *ClientWithResponses) GetTeamMembershipsForTeamWithResponse(ctx context.Context, teamGid TeamPathGid, params *GetTeamMembershipsForTeamParams, reqEditors ...RequestEditorFn) (*GetTeamMembershipsForTeamResponse, error) {
	rsp, err := c.GetTeamMembershipsForTeam(ctx, teamGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamMembershipsForTeamResponse(rsp)
}

// GetUsersForTeamWithResponse request returning *GetUsersForTeamResponse
func (c *ClientWithResponses) GetUsersForTeamWithResponse(ctx context.Context, teamGid TeamPathGid, params *GetUsersForTeamParams, reqEditors ...RequestEditorFn) (*GetUsersForTeamResponse, error) {
	rsp, err := c.GetUsersForTeam(ctx, teamGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersForTeamResponse(rsp)
}

// GetUserTaskListWithResponse request returning *GetUserTaskListResponse
func (c *ClientWithResponses) GetUserTaskListWithResponse(ctx context.Context, userTaskListGid UserTaskListPathGid, params *GetUserTaskListParams, reqEditors ...RequestEditorFn) (*GetUserTaskListResponse, error) {
	rsp, err := c.GetUserTaskList(ctx, userTaskListGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserTaskListResponse(rsp)
}

// GetTasksForUserTaskListWithResponse request returning *GetTasksForUserTaskListResponse
func (c *ClientWithResponses) GetTasksForUserTaskListWithResponse(ctx context.Context, userTaskListGid UserTaskListPathGid, params *GetTasksForUserTaskListParams, reqEditors ...RequestEditorFn) (*GetTasksForUserTaskListResponse, error) {
	rsp, err := c.GetTasksForUserTaskList(ctx, userTaskListGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTasksForUserTaskListResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, userGid UserPathGid, params *GetUserParams, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, userGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// GetFavoritesForUserWithResponse request returning *GetFavoritesForUserResponse
func (c *ClientWithResponses) GetFavoritesForUserWithResponse(ctx context.Context, userGid UserPathGid, params *GetFavoritesForUserParams, reqEditors ...RequestEditorFn) (*GetFavoritesForUserResponse, error) {
	rsp, err := c.GetFavoritesForUser(ctx, userGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFavoritesForUserResponse(rsp)
}

// GetTeamMembershipsForUserWithResponse request returning *GetTeamMembershipsForUserResponse
func (c *ClientWithResponses) GetTeamMembershipsForUserWithResponse(ctx context.Context, userGid UserPathGid, params *GetTeamMembershipsForUserParams, reqEditors ...RequestEditorFn) (*GetTeamMembershipsForUserResponse, error) {
	rsp, err := c.GetTeamMembershipsForUser(ctx, userGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamMembershipsForUserResponse(rsp)
}

// GetTeamsForUserWithResponse request returning *GetTeamsForUserResponse
func (c *ClientWithResponses) GetTeamsForUserWithResponse(ctx context.Context, userGid UserPathGid, params *GetTeamsForUserParams, reqEditors ...RequestEditorFn) (*GetTeamsForUserResponse, error) {
	rsp, err := c.GetTeamsForUser(ctx, userGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsForUserResponse(rsp)
}

// GetUserTaskListForUserWithResponse request returning *GetUserTaskListForUserResponse
func (c *ClientWithResponses) GetUserTaskListForUserWithResponse(ctx context.Context, userGid UserPathGid, params *GetUserTaskListForUserParams, reqEditors ...RequestEditorFn) (*GetUserTaskListForUserResponse, error) {
	rsp, err := c.GetUserTaskListForUser(ctx, userGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserTaskListForUserResponse(rsp)
}

// GetWorkspaceMembershipsForUserWithResponse request returning *GetWorkspaceMembershipsForUserResponse
func (c *ClientWithResponses) GetWorkspaceMembershipsForUserWithResponse(ctx context.Context, userGid UserPathGid, params *GetWorkspaceMembershipsForUserParams, reqEditors ...RequestEditorFn) (*GetWorkspaceMembershipsForUserResponse, error) {
	rsp, err := c.GetWorkspaceMembershipsForUser(ctx, userGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceMembershipsForUserResponse(rsp)
}

// GetWebhooksWithResponse request returning *GetWebhooksResponse
func (c *ClientWithResponses) GetWebhooksWithResponse(ctx context.Context, params *GetWebhooksParams, reqEditors ...RequestEditorFn) (*GetWebhooksResponse, error) {
	rsp, err := c.GetWebhooks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhooksResponse(rsp)
}

// CreateWebhookWithBodyWithResponse request with arbitrary body returning *CreateWebhookResponse
func (c *ClientWithResponses) CreateWebhookWithBodyWithResponse(ctx context.Context, params *CreateWebhookParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWebhookResponse, error) {
	rsp, err := c.CreateWebhookWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhookResponse(rsp)
}

func (c *ClientWithResponses) CreateWebhookWithResponse(ctx context.Context, params *CreateWebhookParams, body CreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWebhookResponse, error) {
	rsp, err := c.CreateWebhook(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhookResponse(rsp)
}

// DeleteWebhookWithResponse request returning *DeleteWebhookResponse
func (c *ClientWithResponses) DeleteWebhookWithResponse(ctx context.Context, webhookGid WebhookPathGid, params *DeleteWebhookParams, reqEditors ...RequestEditorFn) (*DeleteWebhookResponse, error) {
	rsp, err := c.DeleteWebhook(ctx, webhookGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWebhookResponse(rsp)
}

// GetWebhookWithResponse request returning *GetWebhookResponse
func (c *ClientWithResponses) GetWebhookWithResponse(ctx context.Context, webhookGid WebhookPathGid, params *GetWebhookParams, reqEditors ...RequestEditorFn) (*GetWebhookResponse, error) {
	rsp, err := c.GetWebhook(ctx, webhookGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhookResponse(rsp)
}

// GetWorkspaceMembershipWithResponse request returning *GetWorkspaceMembershipResponse
func (c *ClientWithResponses) GetWorkspaceMembershipWithResponse(ctx context.Context, workspaceMembershipGid WorkspaceMembershipPathGid, params *GetWorkspaceMembershipParams, reqEditors ...RequestEditorFn) (*GetWorkspaceMembershipResponse, error) {
	rsp, err := c.GetWorkspaceMembership(ctx, workspaceMembershipGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceMembershipResponse(rsp)
}

// GetWorkspacesWithResponse request returning *GetWorkspacesResponse
func (c *ClientWithResponses) GetWorkspacesWithResponse(ctx context.Context, params *GetWorkspacesParams, reqEditors ...RequestEditorFn) (*GetWorkspacesResponse, error) {
	rsp, err := c.GetWorkspaces(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesResponse(rsp)
}

// GetWorkspaceWithResponse request returning *GetWorkspaceResponse
func (c *ClientWithResponses) GetWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *GetWorkspaceParams, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error) {
	rsp, err := c.GetWorkspace(ctx, workspaceGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceResponse(rsp)
}

// UpdateWorkspaceWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceResponse
func (c *ClientWithResponses) UpdateWorkspaceWithBodyWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *UpdateWorkspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error) {
	rsp, err := c.UpdateWorkspaceWithBody(ctx, workspaceGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *UpdateWorkspaceParams, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error) {
	rsp, err := c.UpdateWorkspace(ctx, workspaceGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceResponse(rsp)
}

// AddUserForWorkspaceWithBodyWithResponse request with arbitrary body returning *AddUserForWorkspaceResponse
func (c *ClientWithResponses) AddUserForWorkspaceWithBodyWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *AddUserForWorkspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUserForWorkspaceResponse, error) {
	rsp, err := c.AddUserForWorkspaceWithBody(ctx, workspaceGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserForWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) AddUserForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *AddUserForWorkspaceParams, body AddUserForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUserForWorkspaceResponse, error) {
	rsp, err := c.AddUserForWorkspace(ctx, workspaceGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserForWorkspaceResponse(rsp)
}

// GetCustomFieldsForWorkspaceWithResponse request returning *GetCustomFieldsForWorkspaceResponse
func (c *ClientWithResponses) GetCustomFieldsForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *GetCustomFieldsForWorkspaceParams, reqEditors ...RequestEditorFn) (*GetCustomFieldsForWorkspaceResponse, error) {
	rsp, err := c.GetCustomFieldsForWorkspace(ctx, workspaceGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomFieldsForWorkspaceResponse(rsp)
}

// GetProjectsForWorkspaceWithResponse request returning *GetProjectsForWorkspaceResponse
func (c *ClientWithResponses) GetProjectsForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *GetProjectsForWorkspaceParams, reqEditors ...RequestEditorFn) (*GetProjectsForWorkspaceResponse, error) {
	rsp, err := c.GetProjectsForWorkspace(ctx, workspaceGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsForWorkspaceResponse(rsp)
}

// CreateProjectForWorkspaceWithBodyWithResponse request with arbitrary body returning *CreateProjectForWorkspaceResponse
func (c *ClientWithResponses) CreateProjectForWorkspaceWithBodyWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *CreateProjectForWorkspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectForWorkspaceResponse, error) {
	rsp, err := c.CreateProjectForWorkspaceWithBody(ctx, workspaceGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectForWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) CreateProjectForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *CreateProjectForWorkspaceParams, body CreateProjectForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectForWorkspaceResponse, error) {
	rsp, err := c.CreateProjectForWorkspace(ctx, workspaceGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectForWorkspaceResponse(rsp)
}

// RemoveUserForWorkspaceWithBodyWithResponse request with arbitrary body returning *RemoveUserForWorkspaceResponse
func (c *ClientWithResponses) RemoveUserForWorkspaceWithBodyWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *RemoveUserForWorkspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveUserForWorkspaceResponse, error) {
	rsp, err := c.RemoveUserForWorkspaceWithBody(ctx, workspaceGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserForWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) RemoveUserForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *RemoveUserForWorkspaceParams, body RemoveUserForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveUserForWorkspaceResponse, error) {
	rsp, err := c.RemoveUserForWorkspace(ctx, workspaceGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserForWorkspaceResponse(rsp)
}

// GetTagsForWorkspaceWithResponse request returning *GetTagsForWorkspaceResponse
func (c *ClientWithResponses) GetTagsForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *GetTagsForWorkspaceParams, reqEditors ...RequestEditorFn) (*GetTagsForWorkspaceResponse, error) {
	rsp, err := c.GetTagsForWorkspace(ctx, workspaceGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsForWorkspaceResponse(rsp)
}

// CreateTagForWorkspaceWithBodyWithResponse request with arbitrary body returning *CreateTagForWorkspaceResponse
func (c *ClientWithResponses) CreateTagForWorkspaceWithBodyWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *CreateTagForWorkspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagForWorkspaceResponse, error) {
	rsp, err := c.CreateTagForWorkspaceWithBody(ctx, workspaceGid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagForWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) CreateTagForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *CreateTagForWorkspaceParams, body CreateTagForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagForWorkspaceResponse, error) {
	rsp, err := c.CreateTagForWorkspace(ctx, workspaceGid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagForWorkspaceResponse(rsp)
}

// SearchTasksForWorkspaceWithResponse request returning *SearchTasksForWorkspaceResponse
func (c *ClientWithResponses) SearchTasksForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *SearchTasksForWorkspaceParams, reqEditors ...RequestEditorFn) (*SearchTasksForWorkspaceResponse, error) {
	rsp, err := c.SearchTasksForWorkspace(ctx, workspaceGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchTasksForWorkspaceResponse(rsp)
}

// TypeaheadForWorkspaceWithResponse request returning *TypeaheadForWorkspaceResponse
func (c *ClientWithResponses) TypeaheadForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *TypeaheadForWorkspaceParams, reqEditors ...RequestEditorFn) (*TypeaheadForWorkspaceResponse, error) {
	rsp, err := c.TypeaheadForWorkspace(ctx, workspaceGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTypeaheadForWorkspaceResponse(rsp)
}

// GetUsersForWorkspaceWithResponse request returning *GetUsersForWorkspaceResponse
func (c *ClientWithResponses) GetUsersForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *GetUsersForWorkspaceParams, reqEditors ...RequestEditorFn) (*GetUsersForWorkspaceResponse, error) {
	rsp, err := c.GetUsersForWorkspace(ctx, workspaceGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersForWorkspaceResponse(rsp)
}

// GetWorkspaceMembershipsForWorkspaceWithResponse request returning *GetWorkspaceMembershipsForWorkspaceResponse
func (c *ClientWithResponses) GetWorkspaceMembershipsForWorkspaceWithResponse(ctx context.Context, workspaceGid WorkspacePathGid, params *GetWorkspaceMembershipsForWorkspaceParams, reqEditors ...RequestEditorFn) (*GetWorkspaceMembershipsForWorkspaceResponse, error) {
	rsp, err := c.GetWorkspaceMembershipsForWorkspace(ctx, workspaceGid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceMembershipsForWorkspaceResponse(rsp)
}

// ParseDeleteAttachmentResponse parses an HTTP response from a DeleteAttachmentWithResponse call
func ParseDeleteAttachmentResponse(rsp *http.Response) (*DeleteAttachmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAttachmentResponse parses an HTTP response from a GetAttachmentWithResponse call
func ParseGetAttachmentResponse(rsp *http.Response) (*GetAttachmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *AttachmentResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 424:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON424 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseCreateBatchRequestResponse parses an HTTP response from a CreateBatchRequestWithResponse call
func ParseCreateBatchRequestResponse(rsp *http.Response) (*CreateBatchRequestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateBatchRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]BatchResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateCustomFieldResponse parses an HTTP response from a CreateCustomFieldWithResponse call
func ParseCreateCustomFieldResponse(rsp *http.Response) (*CreateCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *CustomFieldResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteCustomFieldResponse parses an HTTP response from a DeleteCustomFieldWithResponse call
func ParseDeleteCustomFieldResponse(rsp *http.Response) (*DeleteCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCustomFieldResponse parses an HTTP response from a GetCustomFieldWithResponse call
func ParseGetCustomFieldResponse(rsp *http.Response) (*GetCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *CustomFieldResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateCustomFieldResponse parses an HTTP response from a UpdateCustomFieldWithResponse call
func ParseUpdateCustomFieldResponse(rsp *http.Response) (*UpdateCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *CustomFieldResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateEnumOptionForCustomFieldResponse parses an HTTP response from a CreateEnumOptionForCustomFieldWithResponse call
func ParseCreateEnumOptionForCustomFieldResponse(rsp *http.Response) (*CreateEnumOptionForCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateEnumOptionForCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *EnumOption `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseInsertEnumOptionForCustomFieldResponse parses an HTTP response from a InsertEnumOptionForCustomFieldWithResponse call
func ParseInsertEnumOptionForCustomFieldResponse(rsp *http.Response) (*InsertEnumOptionForCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsertEnumOptionForCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *EnumOption `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateEnumOptionResponse parses an HTTP response from a UpdateEnumOptionWithResponse call
func ParseUpdateEnumOptionResponse(rsp *http.Response) (*UpdateEnumOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateEnumOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *EnumOption `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetEventsResponse parses an HTTP response from a GetEventsWithResponse call
func ParseGetEventsResponse(rsp *http.Response) (*GetEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]EventResponse `json:"data,omitempty"`

			// A sync token to be used with the next call to the events endpoint.
			Sync *string `json:"sync,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGoalsResponse parses an HTTP response from a GetGoalsWithResponse call
func ParseGetGoalsResponse(rsp *http.Response) (*GetGoalsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetGoalsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]GoalCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteGoalResponse parses an HTTP response from a DeleteGoalWithResponse call
func ParseDeleteGoalResponse(rsp *http.Response) (*DeleteGoalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteGoalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGoalResponse parses an HTTP response from a GetGoalWithResponse call
func ParseGetGoalResponse(rsp *http.Response) (*GetGoalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetGoalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *GoalResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateGoalResponse parses an HTTP response from a UpdateGoalWithResponse call
func ParseUpdateGoalResponse(rsp *http.Response) (*UpdateGoalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateGoalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *GoalResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddFollowersResponse parses an HTTP response from a AddFollowersWithResponse call
func ParseAddFollowersResponse(rsp *http.Response) (*AddFollowersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddFollowersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *GoalResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddSubgoalResponse parses an HTTP response from a AddSubgoalWithResponse call
func ParseAddSubgoalResponse(rsp *http.Response) (*AddSubgoalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddSubgoalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddSupportingWorkForGoalResponse parses an HTTP response from a AddSupportingWorkForGoalWithResponse call
func ParseAddSupportingWorkForGoalResponse(rsp *http.Response) (*AddSupportingWorkForGoalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddSupportingWorkForGoalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetParentGoalsForGoalResponse parses an HTTP response from a GetParentGoalsForGoalWithResponse call
func ParseGetParentGoalsForGoalResponse(rsp *http.Response) (*GetParentGoalsForGoalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetParentGoalsForGoalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]GoalCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveFollowersResponse parses an HTTP response from a RemoveFollowersWithResponse call
func ParseRemoveFollowersResponse(rsp *http.Response) (*RemoveFollowersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveFollowersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *GoalResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveSubgoalResponse parses an HTTP response from a RemoveSubgoalWithResponse call
func ParseRemoveSubgoalResponse(rsp *http.Response) (*RemoveSubgoalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveSubgoalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveSupportingWorkForGoalResponse parses an HTTP response from a RemoveSupportingWorkForGoalWithResponse call
func ParseRemoveSupportingWorkForGoalResponse(rsp *http.Response) (*RemoveSupportingWorkForGoalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveSupportingWorkForGoalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateGoalMetricResponse parses an HTTP response from a CreateGoalMetricWithResponse call
func ParseCreateGoalMetricResponse(rsp *http.Response) (*CreateGoalMetricResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateGoalMetricResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *GoalResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateGoalMetricResponse parses an HTTP response from a UpdateGoalMetricWithResponse call
func ParseUpdateGoalMetricResponse(rsp *http.Response) (*UpdateGoalMetricResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateGoalMetricResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *GoalResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSubgoalsForGoalResponse parses an HTTP response from a GetSubgoalsForGoalWithResponse call
func ParseGetSubgoalsForGoalResponse(rsp *http.Response) (*GetSubgoalsForGoalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSubgoalsForGoalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]GoalCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSupportingWorkResponse parses an HTTP response from a SupportingWorkWithResponse call
func ParseSupportingWorkResponse(rsp *http.Response) (*SupportingWorkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SupportingWorkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]ProjectCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetJobResponse parses an HTTP response from a GetJobWithResponse call
func ParseGetJobResponse(rsp *http.Response) (*GetJobResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *JobResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationExportResponse parses an HTTP response from a CreateOrganizationExportWithResponse call
func ParseCreateOrganizationExportResponse(rsp *http.Response) (*CreateOrganizationExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *OrganizationExportResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrganizationExportResponse parses an HTTP response from a GetOrganizationExportWithResponse call
func ParseGetOrganizationExportResponse(rsp *http.Response) (*GetOrganizationExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *OrganizationExportResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTeamsForOrganizationResponse parses an HTTP response from a GetTeamsForOrganizationWithResponse call
func ParseGetTeamsForOrganizationResponse(rsp *http.Response) (*GetTeamsForOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsForOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]TeamCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPortfolioMembershipsResponse parses an HTTP response from a GetPortfolioMembershipsWithResponse call
func ParseGetPortfolioMembershipsResponse(rsp *http.Response) (*GetPortfolioMembershipsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPortfolioMembershipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]PortfolioMembershipCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPortfolioMembershipResponse parses an HTTP response from a GetPortfolioMembershipWithResponse call
func ParseGetPortfolioMembershipResponse(rsp *http.Response) (*GetPortfolioMembershipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPortfolioMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *PortfolioMembershipResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPortfoliosResponse parses an HTTP response from a GetPortfoliosWithResponse call
func ParseGetPortfoliosResponse(rsp *http.Response) (*GetPortfoliosResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPortfoliosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]PortfolioCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreatePortfolioResponse parses an HTTP response from a CreatePortfolioWithResponse call
func ParseCreatePortfolioResponse(rsp *http.Response) (*CreatePortfolioResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePortfolioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *PortfolioResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeletePortfolioResponse parses an HTTP response from a DeletePortfolioWithResponse call
func ParseDeletePortfolioResponse(rsp *http.Response) (*DeletePortfolioResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePortfolioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPortfolioResponse parses an HTTP response from a GetPortfolioWithResponse call
func ParseGetPortfolioResponse(rsp *http.Response) (*GetPortfolioResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPortfolioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *PortfolioResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdatePortfolioResponse parses an HTTP response from a UpdatePortfolioWithResponse call
func ParseUpdatePortfolioResponse(rsp *http.Response) (*UpdatePortfolioResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePortfolioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *PortfolioResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddCustomFieldSettingForPortfolioResponse parses an HTTP response from a AddCustomFieldSettingForPortfolioWithResponse call
func ParseAddCustomFieldSettingForPortfolioResponse(rsp *http.Response) (*AddCustomFieldSettingForPortfolioResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddCustomFieldSettingForPortfolioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddItemForPortfolioResponse parses an HTTP response from a AddItemForPortfolioWithResponse call
func ParseAddItemForPortfolioResponse(rsp *http.Response) (*AddItemForPortfolioResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddItemForPortfolioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddMembersForPortfolioResponse parses an HTTP response from a AddMembersForPortfolioWithResponse call
func ParseAddMembersForPortfolioResponse(rsp *http.Response) (*AddMembersForPortfolioResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddMembersForPortfolioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCustomFieldSettingsForPortfolioResponse parses an HTTP response from a GetCustomFieldSettingsForPortfolioWithResponse call
func ParseGetCustomFieldSettingsForPortfolioResponse(rsp *http.Response) (*GetCustomFieldSettingsForPortfolioResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCustomFieldSettingsForPortfolioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]CustomFieldSettingResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetItemsForPortfolioResponse parses an HTTP response from a GetItemsForPortfolioWithResponse call
func ParseGetItemsForPortfolioResponse(rsp *http.Response) (*GetItemsForPortfolioResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetItemsForPortfolioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]ProjectCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPortfolioMembershipsForPortfolioResponse parses an HTTP response from a GetPortfolioMembershipsForPortfolioWithResponse call
func ParseGetPortfolioMembershipsForPortfolioResponse(rsp *http.Response) (*GetPortfolioMembershipsForPortfolioResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPortfolioMembershipsForPortfolioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]PortfolioMembershipCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveCustomFieldSettingForPortfolioResponse parses an HTTP response from a RemoveCustomFieldSettingForPortfolioWithResponse call
func ParseRemoveCustomFieldSettingForPortfolioResponse(rsp *http.Response) (*RemoveCustomFieldSettingForPortfolioResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveCustomFieldSettingForPortfolioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveItemForPortfolioResponse parses an HTTP response from a RemoveItemForPortfolioWithResponse call
func ParseRemoveItemForPortfolioResponse(rsp *http.Response) (*RemoveItemForPortfolioResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveItemForPortfolioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveMembersForPortfolioResponse parses an HTTP response from a RemoveMembersForPortfolioWithResponse call
func ParseRemoveMembersForPortfolioResponse(rsp *http.Response) (*RemoveMembersForPortfolioResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveMembersForPortfolioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProjectMembershipResponse parses an HTTP response from a GetProjectMembershipWithResponse call
func ParseGetProjectMembershipResponse(rsp *http.Response) (*GetProjectMembershipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProjectMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *ProjectMembershipResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteProjectStatusResponse parses an HTTP response from a DeleteProjectStatusWithResponse call
func ParseDeleteProjectStatusResponse(rsp *http.Response) (*DeleteProjectStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProjectStatusResponse parses an HTTP response from a GetProjectStatusWithResponse call
func ParseGetProjectStatusResponse(rsp *http.Response) (*GetProjectStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProjectStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *ProjectStatusResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProjectsResponse parses an HTTP response from a GetProjectsWithResponse call
func ParseGetProjectsResponse(rsp *http.Response) (*GetProjectsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]ProjectCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateProjectResponse parses an HTTP response from a CreateProjectWithResponse call
func ParseCreateProjectResponse(rsp *http.Response) (*CreateProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *ProjectResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteProjectResponse parses an HTTP response from a DeleteProjectWithResponse call
func ParseDeleteProjectResponse(rsp *http.Response) (*DeleteProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProjectResponse parses an HTTP response from a GetProjectWithResponse call
func ParseGetProjectResponse(rsp *http.Response) (*GetProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *ProjectResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateProjectResponse parses an HTTP response from a UpdateProjectWithResponse call
func ParseUpdateProjectResponse(rsp *http.Response) (*UpdateProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *ProjectResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddCustomFieldSettingForProjectResponse parses an HTTP response from a AddCustomFieldSettingForProjectWithResponse call
func ParseAddCustomFieldSettingForProjectResponse(rsp *http.Response) (*AddCustomFieldSettingForProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddCustomFieldSettingForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *CustomFieldSettingResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddFollowersForProjectResponse parses an HTTP response from a AddFollowersForProjectWithResponse call
func ParseAddFollowersForProjectResponse(rsp *http.Response) (*AddFollowersForProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddFollowersForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddMembersForProjectResponse parses an HTTP response from a AddMembersForProjectWithResponse call
func ParseAddMembersForProjectResponse(rsp *http.Response) (*AddMembersForProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddMembersForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCustomFieldSettingsForProjectResponse parses an HTTP response from a GetCustomFieldSettingsForProjectWithResponse call
func ParseGetCustomFieldSettingsForProjectResponse(rsp *http.Response) (*GetCustomFieldSettingsForProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCustomFieldSettingsForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]CustomFieldSettingResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDuplicateProjectResponse parses an HTTP response from a DuplicateProjectWithResponse call
func ParseDuplicateProjectResponse(rsp *http.Response) (*DuplicateProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DuplicateProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *JobResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProjectMembershipsForProjectResponse parses an HTTP response from a GetProjectMembershipsForProjectWithResponse call
func ParseGetProjectMembershipsForProjectResponse(rsp *http.Response) (*GetProjectMembershipsForProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProjectMembershipsForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]ProjectMembershipCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProjectStatusesForProjectResponse parses an HTTP response from a GetProjectStatusesForProjectWithResponse call
func ParseGetProjectStatusesForProjectResponse(rsp *http.Response) (*GetProjectStatusesForProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProjectStatusesForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]ProjectStatusCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateProjectStatusForProjectResponse parses an HTTP response from a CreateProjectStatusForProjectWithResponse call
func ParseCreateProjectStatusForProjectResponse(rsp *http.Response) (*CreateProjectStatusForProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateProjectStatusForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *ProjectStatusResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveCustomFieldSettingForProjectResponse parses an HTTP response from a RemoveCustomFieldSettingForProjectWithResponse call
func ParseRemoveCustomFieldSettingForProjectResponse(rsp *http.Response) (*RemoveCustomFieldSettingForProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveCustomFieldSettingForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveFollowersForProjectResponse parses an HTTP response from a RemoveFollowersForProjectWithResponse call
func ParseRemoveFollowersForProjectResponse(rsp *http.Response) (*RemoveFollowersForProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveFollowersForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveMembersForProjectResponse parses an HTTP response from a RemoveMembersForProjectWithResponse call
func ParseRemoveMembersForProjectResponse(rsp *http.Response) (*RemoveMembersForProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveMembersForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSectionsForProjectResponse parses an HTTP response from a GetSectionsForProjectWithResponse call
func ParseGetSectionsForProjectResponse(rsp *http.Response) (*GetSectionsForProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSectionsForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]SectionCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSectionForProjectResponse parses an HTTP response from a CreateSectionForProjectWithResponse call
func ParseCreateSectionForProjectResponse(rsp *http.Response) (*CreateSectionForProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSectionForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *SectionResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseInsertSectionForProjectResponse parses an HTTP response from a InsertSectionForProjectWithResponse call
func ParseInsertSectionForProjectResponse(rsp *http.Response) (*InsertSectionForProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsertSectionForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTaskCountsForProjectResponse parses an HTTP response from a GetTaskCountsForProjectWithResponse call
func ParseGetTaskCountsForProjectResponse(rsp *http.Response) (*GetTaskCountsForProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTaskCountsForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// A response object returned from the task count endpoint.
			Data *TaskCountResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTasksForProjectResponse parses an HTTP response from a GetTasksForProjectWithResponse call
func ParseGetTasksForProjectResponse(rsp *http.Response) (*GetTasksForProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTasksForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]TaskCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSectionResponse parses an HTTP response from a DeleteSectionWithResponse call
func ParseDeleteSectionResponse(rsp *http.Response) (*DeleteSectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSectionResponse parses an HTTP response from a GetSectionWithResponse call
func ParseGetSectionResponse(rsp *http.Response) (*GetSectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *SectionResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSectionResponse parses an HTTP response from a UpdateSectionWithResponse call
func ParseUpdateSectionResponse(rsp *http.Response) (*UpdateSectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *SectionResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddTaskForSectionResponse parses an HTTP response from a AddTaskForSectionWithResponse call
func ParseAddTaskForSectionResponse(rsp *http.Response) (*AddTaskForSectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddTaskForSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTasksForSectionResponse parses an HTTP response from a GetTasksForSectionWithResponse call
func ParseGetTasksForSectionResponse(rsp *http.Response) (*GetTasksForSectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTasksForSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]TaskCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteStoryResponse parses an HTTP response from a DeleteStoryWithResponse call
func ParseDeleteStoryResponse(rsp *http.Response) (*DeleteStoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteStoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetStoryResponse parses an HTTP response from a GetStoryWithResponse call
func ParseGetStoryResponse(rsp *http.Response) (*GetStoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetStoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *StoryResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateStoryResponse parses an HTTP response from a UpdateStoryWithResponse call
func ParseUpdateStoryResponse(rsp *http.Response) (*UpdateStoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateStoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *StoryResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTagsResponse parses an HTTP response from a GetTagsWithResponse call
func ParseGetTagsResponse(rsp *http.Response) (*GetTagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]TagCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateTagResponse parses an HTTP response from a CreateTagWithResponse call
func ParseCreateTagResponse(rsp *http.Response) (*CreateTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *TagResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteTagResponse parses an HTTP response from a DeleteTagWithResponse call
func ParseDeleteTagResponse(rsp *http.Response) (*DeleteTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTagResponse parses an HTTP response from a GetTagWithResponse call
func ParseGetTagResponse(rsp *http.Response) (*GetTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *TagResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateTagResponse parses an HTTP response from a UpdateTagWithResponse call
func ParseUpdateTagResponse(rsp *http.Response) (*UpdateTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *TagResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTasksForTagResponse parses an HTTP response from a GetTasksForTagWithResponse call
func ParseGetTasksForTagResponse(rsp *http.Response) (*GetTasksForTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTasksForTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]TaskCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTasksResponse parses an HTTP response from a GetTasksWithResponse call
func ParseGetTasksResponse(rsp *http.Response) (*GetTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]TaskCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateTaskResponse parses an HTTP response from a CreateTaskWithResponse call
func ParseCreateTaskResponse(rsp *http.Response) (*CreateTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *TaskResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteTaskResponse parses an HTTP response from a DeleteTaskWithResponse call
func ParseDeleteTaskResponse(rsp *http.Response) (*DeleteTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTaskResponse parses an HTTP response from a GetTaskWithResponse call
func ParseGetTaskResponse(rsp *http.Response) (*GetTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *TaskResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateTaskResponse parses an HTTP response from a UpdateTaskWithResponse call
func ParseUpdateTaskResponse(rsp *http.Response) (*UpdateTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *TaskResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddDependenciesForTaskResponse parses an HTTP response from a AddDependenciesForTaskWithResponse call
func ParseAddDependenciesForTaskResponse(rsp *http.Response) (*AddDependenciesForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddDependenciesForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddDependentsForTaskResponse parses an HTTP response from a AddDependentsForTaskWithResponse call
func ParseAddDependentsForTaskResponse(rsp *http.Response) (*AddDependentsForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddDependentsForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]TaskCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddFollowersForTaskResponse parses an HTTP response from a AddFollowersForTaskWithResponse call
func ParseAddFollowersForTaskResponse(rsp *http.Response) (*AddFollowersForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddFollowersForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddProjectForTaskResponse parses an HTTP response from a AddProjectForTaskWithResponse call
func ParseAddProjectForTaskResponse(rsp *http.Response) (*AddProjectForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddProjectForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddTagForTaskResponse parses an HTTP response from a AddTagForTaskWithResponse call
func ParseAddTagForTaskResponse(rsp *http.Response) (*AddTagForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddTagForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAttachmentsForTaskResponse parses an HTTP response from a GetAttachmentsForTaskWithResponse call
func ParseGetAttachmentsForTaskResponse(rsp *http.Response) (*GetAttachmentsForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAttachmentsForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]AttachmentCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateAttachmentForTaskResponse parses an HTTP response from a CreateAttachmentForTaskWithResponse call
func ParseCreateAttachmentForTaskResponse(rsp *http.Response) (*CreateAttachmentForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateAttachmentForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *AttachmentResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDependenciesForTaskResponse parses an HTTP response from a GetDependenciesForTaskWithResponse call
func ParseGetDependenciesForTaskResponse(rsp *http.Response) (*GetDependenciesForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDependenciesForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]TaskCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDependentsForTaskResponse parses an HTTP response from a GetDependentsForTaskWithResponse call
func ParseGetDependentsForTaskResponse(rsp *http.Response) (*GetDependentsForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDependentsForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]TaskCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDuplicateTaskResponse parses an HTTP response from a DuplicateTaskWithResponse call
func ParseDuplicateTaskResponse(rsp *http.Response) (*DuplicateTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DuplicateTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *JobResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProjectsForTaskResponse parses an HTTP response from a GetProjectsForTaskWithResponse call
func ParseGetProjectsForTaskResponse(rsp *http.Response) (*GetProjectsForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]ProjectCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveDependenciesForTaskResponse parses an HTTP response from a RemoveDependenciesForTaskWithResponse call
func ParseRemoveDependenciesForTaskResponse(rsp *http.Response) (*RemoveDependenciesForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveDependenciesForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveDependentsForTaskResponse parses an HTTP response from a RemoveDependentsForTaskWithResponse call
func ParseRemoveDependentsForTaskResponse(rsp *http.Response) (*RemoveDependentsForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveDependentsForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveFollowerForTaskResponse parses an HTTP response from a RemoveFollowerForTaskWithResponse call
func ParseRemoveFollowerForTaskResponse(rsp *http.Response) (*RemoveFollowerForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveFollowerForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveProjectForTaskResponse parses an HTTP response from a RemoveProjectForTaskWithResponse call
func ParseRemoveProjectForTaskResponse(rsp *http.Response) (*RemoveProjectForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveProjectForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveTagForTaskResponse parses an HTTP response from a RemoveTagForTaskWithResponse call
func ParseRemoveTagForTaskResponse(rsp *http.Response) (*RemoveTagForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveTagForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSetParentForTaskResponse parses an HTTP response from a SetParentForTaskWithResponse call
func ParseSetParentForTaskResponse(rsp *http.Response) (*SetParentForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SetParentForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *TaskResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetStoriesForTaskResponse parses an HTTP response from a GetStoriesForTaskWithResponse call
func ParseGetStoriesForTaskResponse(rsp *http.Response) (*GetStoriesForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetStoriesForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *interface{} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateStoryForTaskResponse parses an HTTP response from a CreateStoryForTaskWithResponse call
func ParseCreateStoryForTaskResponse(rsp *http.Response) (*CreateStoryForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateStoryForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *StoryResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSubtasksForTaskResponse parses an HTTP response from a GetSubtasksForTaskWithResponse call
func ParseGetSubtasksForTaskResponse(rsp *http.Response) (*GetSubtasksForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSubtasksForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]TaskCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSubtaskForTaskResponse parses an HTTP response from a CreateSubtaskForTaskWithResponse call
func ParseCreateSubtaskForTaskResponse(rsp *http.Response) (*CreateSubtaskForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSubtaskForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *TaskResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTagsForTaskResponse parses an HTTP response from a GetTagsForTaskWithResponse call
func ParseGetTagsForTaskResponse(rsp *http.Response) (*GetTagsForTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTagsForTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]TagCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTeamMembershipsResponse parses an HTTP response from a GetTeamMembershipsWithResponse call
func ParseGetTeamMembershipsResponse(rsp *http.Response) (*GetTeamMembershipsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTeamMembershipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]TeamMembershipCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTeamMembershipResponse parses an HTTP response from a GetTeamMembershipWithResponse call
func ParseGetTeamMembershipResponse(rsp *http.Response) (*GetTeamMembershipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTeamMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *TeamMembershipResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateTeamResponse parses an HTTP response from a CreateTeamWithResponse call
func ParseCreateTeamResponse(rsp *http.Response) (*CreateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *TeamResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTeamResponse parses an HTTP response from a GetTeamWithResponse call
func ParseGetTeamResponse(rsp *http.Response) (*GetTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *TeamResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddUserForTeamResponse parses an HTTP response from a AddUserForTeamWithResponse call
func ParseAddUserForTeamResponse(rsp *http.Response) (*AddUserForTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddUserForTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *UserResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProjectsForTeamResponse parses an HTTP response from a GetProjectsForTeamWithResponse call
func ParseGetProjectsForTeamResponse(rsp *http.Response) (*GetProjectsForTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsForTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]ProjectCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateProjectForTeamResponse parses an HTTP response from a CreateProjectForTeamWithResponse call
func ParseCreateProjectForTeamResponse(rsp *http.Response) (*CreateProjectForTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateProjectForTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *ProjectResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveUserForTeamResponse parses an HTTP response from a RemoveUserForTeamWithResponse call
func ParseRemoveUserForTeamResponse(rsp *http.Response) (*RemoveUserForTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveUserForTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTeamMembershipsForTeamResponse parses an HTTP response from a GetTeamMembershipsForTeamWithResponse call
func ParseGetTeamMembershipsForTeamResponse(rsp *http.Response) (*GetTeamMembershipsForTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTeamMembershipsForTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]TeamMembershipCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUsersForTeamResponse parses an HTTP response from a GetUsersForTeamWithResponse call
func ParseGetUsersForTeamResponse(rsp *http.Response) (*GetUsersForTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUsersForTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]UserCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserTaskListResponse parses an HTTP response from a GetUserTaskListWithResponse call
func ParseGetUserTaskListResponse(rsp *http.Response) (*GetUserTaskListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserTaskListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *UserTaskListResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTasksForUserTaskListResponse parses an HTTP response from a GetTasksForUserTaskListWithResponse call
func ParseGetTasksForUserTaskListResponse(rsp *http.Response) (*GetTasksForUserTaskListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTasksForUserTaskListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]TaskCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]UserCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *UserResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFavoritesForUserResponse parses an HTTP response from a GetFavoritesForUserWithResponse call
func ParseGetFavoritesForUserResponse(rsp *http.Response) (*GetFavoritesForUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFavoritesForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]AsanaNamedResource `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTeamMembershipsForUserResponse parses an HTTP response from a GetTeamMembershipsForUserWithResponse call
func ParseGetTeamMembershipsForUserResponse(rsp *http.Response) (*GetTeamMembershipsForUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTeamMembershipsForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]TeamMembershipCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTeamsForUserResponse parses an HTTP response from a GetTeamsForUserWithResponse call
func ParseGetTeamsForUserResponse(rsp *http.Response) (*GetTeamsForUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]TeamCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserTaskListForUserResponse parses an HTTP response from a GetUserTaskListForUserWithResponse call
func ParseGetUserTaskListForUserResponse(rsp *http.Response) (*GetUserTaskListForUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserTaskListForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *UserTaskListResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceMembershipsForUserResponse parses an HTTP response from a GetWorkspaceMembershipsForUserWithResponse call
func ParseGetWorkspaceMembershipsForUserResponse(rsp *http.Response) (*GetWorkspaceMembershipsForUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceMembershipsForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]WorkspaceMembershipCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWebhooksResponse parses an HTTP response from a GetWebhooksWithResponse call
func ParseGetWebhooksResponse(rsp *http.Response) (*GetWebhooksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]WebhookResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateWebhookResponse parses an HTTP response from a CreateWebhookWithResponse call
func ParseCreateWebhookResponse(rsp *http.Response) (*CreateWebhookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *WebhookResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteWebhookResponse parses an HTTP response from a DeleteWebhookWithResponse call
func ParseDeleteWebhookResponse(rsp *http.Response) (*DeleteWebhookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWebhookResponse parses an HTTP response from a GetWebhookWithResponse call
func ParseGetWebhookResponse(rsp *http.Response) (*GetWebhookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *WebhookResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceMembershipResponse parses an HTTP response from a GetWorkspaceMembershipWithResponse call
func ParseGetWorkspaceMembershipResponse(rsp *http.Response) (*GetWorkspaceMembershipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *WorkspaceMembershipResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesResponse parses an HTTP response from a GetWorkspacesWithResponse call
func ParseGetWorkspacesResponse(rsp *http.Response) (*GetWorkspacesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]WorkspaceCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceResponse parses an HTTP response from a GetWorkspaceWithResponse call
func ParseGetWorkspaceResponse(rsp *http.Response) (*GetWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *WorkspaceResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateWorkspaceResponse parses an HTTP response from a UpdateWorkspaceWithResponse call
func ParseUpdateWorkspaceResponse(rsp *http.Response) (*UpdateWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *WorkspaceResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddUserForWorkspaceResponse parses an HTTP response from a AddUserForWorkspaceWithResponse call
func ParseAddUserForWorkspaceResponse(rsp *http.Response) (*AddUserForWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddUserForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *UserResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCustomFieldsForWorkspaceResponse parses an HTTP response from a GetCustomFieldsForWorkspaceWithResponse call
func ParseGetCustomFieldsForWorkspaceResponse(rsp *http.Response) (*GetCustomFieldsForWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCustomFieldsForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]CustomFieldResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProjectsForWorkspaceResponse parses an HTTP response from a GetProjectsForWorkspaceWithResponse call
func ParseGetProjectsForWorkspaceResponse(rsp *http.Response) (*GetProjectsForWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]ProjectCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateProjectForWorkspaceResponse parses an HTTP response from a CreateProjectForWorkspaceWithResponse call
func ParseCreateProjectForWorkspaceResponse(rsp *http.Response) (*CreateProjectForWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateProjectForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *ProjectResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveUserForWorkspaceResponse parses an HTTP response from a RemoveUserForWorkspaceWithResponse call
func ParseRemoveUserForWorkspaceResponse(rsp *http.Response) (*RemoveUserForWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveUserForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest struct {

			// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
			Data *EmptyResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTagsForWorkspaceResponse parses an HTTP response from a GetTagsForWorkspaceWithResponse call
func ParseGetTagsForWorkspaceResponse(rsp *http.Response) (*GetTagsForWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTagsForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]TagCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateTagForWorkspaceResponse parses an HTTP response from a CreateTagForWorkspaceWithResponse call
func ParseCreateTagForWorkspaceResponse(rsp *http.Response) (*CreateTagForWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateTagForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *TagResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSearchTasksForWorkspaceResponse parses an HTTP response from a SearchTasksForWorkspaceWithResponse call
func ParseSearchTasksForWorkspaceResponse(rsp *http.Response) (*SearchTasksForWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SearchTasksForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]TaskCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseTypeaheadForWorkspaceResponse parses an HTTP response from a TypeaheadForWorkspaceWithResponse call
func ParseTypeaheadForWorkspaceResponse(rsp *http.Response) (*TypeaheadForWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TypeaheadForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]AsanaNamedResource `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUsersForWorkspaceResponse parses an HTTP response from a GetUsersForWorkspaceWithResponse call
func ParseGetUsersForWorkspaceResponse(rsp *http.Response) (*GetUsersForWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUsersForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]UserCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceMembershipsForWorkspaceResponse parses an HTTP response from a GetWorkspaceMembershipsForWorkspaceWithResponse call
func ParseGetWorkspaceMembershipsForWorkspaceResponse(rsp *http.Response) (*GetWorkspaceMembershipsForWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceMembershipsForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]WorkspaceMembershipCompact `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
